#!/usr/bin/env node
import fs from 'node:fs';
import path from 'node:path';

const args = process.argv.slice(2);
const options = {
  output: 'artifacts/kvonce-trace-summary.json',
  traceDir: path.join('hermetic-reports', 'trace'),
  summary: null,
  cases: null,
};

for (let i = 0; i < args.length; i += 1) {
  const arg = args[i];
  const next = args[i + 1];
  if ((arg === '--output' || arg === '-o') && next) {
    options.output = next;
    i += 1;
  } else if ((arg === '--trace-dir' || arg === '-d') && next) {
    options.traceDir = next;
    i += 1;
  } else if ((arg === '--summary' || arg === '-s') && next) {
    options.summary = next;
    i += 1;
  } else if (arg === '--cases' && next) {
    options.cases = next;
    i += 1;
  } else if (arg === '--help' || arg === '-h') {
    console.log(`Usage: node scripts/trace/build-kvonce-envelope-summary.mjs [options]

Options:
  -o, --output <file>      Output JSON path (default: artifacts/kvonce-trace-summary.json)
  -d, --trace-dir <dir>    Base directory containing projection/validation artifacts (default: hermetic-reports/trace)
  -s, --summary <file>     Conformance summary JSON generated by verify:conformance
      --cases <list>       Comma-separated case keys (default: current,otlp,ndjson)
  -h, --help               Show this message
`);
    process.exit(0);
  }
}

const outputPath = options.output;
const baseDir = options.traceDir;

const defaultCases = [
  { key: 'current', label: 'Current run', dir: baseDir },
  { key: 'otlp', label: 'OTLP payload', dir: path.join(baseDir, 'otlp') },
  { key: 'ndjson', label: 'NDJSON sample', dir: path.join(baseDir, 'ndjson') },
];

let cases;
if (options.cases) {
  cases = options.cases.split(',').map((raw) => {
    const trimmed = raw.trim();
    if (!trimmed) return null;
    const [key, label = null, subdir = null] = trimmed.split(':');
    if (!key) return null;
    const resolvedDir = subdir ? path.join(baseDir, subdir) : (key === 'current' ? baseDir : path.join(baseDir, key));
    return { key, label: label ?? key, dir: resolvedDir };
  }).filter(Boolean);
} else {
  cases = defaultCases;
}

const readJsonSafe = (file) => {
  try {
    return JSON.parse(fs.readFileSync(file, 'utf8'));
  } catch (error) {
    return null;
  }
};

const metadata = readJsonSafe(path.join(baseDir, 'kvonce-payload-metadata.json')) ?? {};
const casesSummary = [];

for (const item of cases) {
  if (!item?.dir) continue;
  const reportPath = path.join(item.dir, 'kvonce-validation.json');
  const projectionPath = path.join(item.dir, 'kvonce-projection.json');
  const validation = readJsonSafe(reportPath);
  const projection = readJsonSafe(projectionPath);
  if (!validation) {
    casesSummary.push({
      format: item.key,
      status: 'missing',
      issues: [],
      note: 'validation file missing'
    });
    continue;
  }
  const issues = Array.isArray(validation.issues) ? validation.issues : [];
  const trimmedIssues = issues.slice(0, 10).map((issue) => ({
    type: issue.type ?? 'unknown',
    key: issue.key ?? 'unknown',
    message: issue.message ?? ''
  }));
  const projectionStats = projection?.stats ?? undefined;
  const stateSequencePath = projection?.outputs?.stateSequence ?? undefined;
  casesSummary.push({
    format: item.key,
    label: item.label ?? item.key,
    valid: Boolean(validation.valid),
    issueCount: issues.length,
    issues: trimmedIssues,
    projectionStats,
    validationPath: fs.existsSync(reportPath) ? path.relative(process.cwd(), reportPath) : undefined,
    projectionPath: fs.existsSync(projectionPath) ? path.relative(process.cwd(), projectionPath) : undefined,
    ...(stateSequencePath ? { stateSequencePath } : {})
  });
}

const conformanceSummary = options.summary ? readJsonSafe(options.summary) : readJsonSafe(path.join(baseDir, 'kvonce-conformance-summary.json'));

const summary = {
  schemaVersion: '1.0.0',
  generatedAt: new Date().toISOString(),
  payloadMetadata: {
    sourceType: metadata.sourceType ?? null,
    sourceDetail: metadata.sourceDetail ?? null,
    sha256: metadata.sha256 ?? null,
    sizeBytes: metadata.sizeBytes ?? null
  },
  cases: casesSummary,
  ...(conformanceSummary ? { conformance: conformanceSummary } : {})
};

const destDir = path.dirname(outputPath);
if (!fs.existsSync(destDir)) {
  fs.mkdirSync(destDir, { recursive: true });
}

fs.writeFileSync(outputPath, JSON.stringify(summary, null, 2));
console.log(`[trace] wrote kvonce summary to ${outputPath}`);
