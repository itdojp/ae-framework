#!/usr/bin/env node

import { existsSync, readFileSync } from 'node:fs';
import { resolve } from 'node:path';
import process from 'node:process';
import { Octokit } from '@octokit/rest';

function usage() {
  console.log(`Usage: publish-survivors-report.mjs --summary <json> --context <label>

Options:
  --summary, -s   Path to JSON summary generated by post-quick-summary.mjs --format json
  --context, -c   Context label (e.g., mutation-quick / verify-lite)
  --issue, -i     Override target issue number (defaults to open issue labelled mutation-survivors)
  --dry-run       Print payload instead of publishing
  -h, --help      Show this help message
`);
}

function parseArgs(argv) {
  const args = { summary: undefined, context: undefined, issue: undefined, dryRun: false };
  for (let i = 2; i < argv.length; i += 1) {
    const current = argv[i];
    if ((current === '--summary' || current === '-s') && argv[i + 1]) {
      args.summary = argv[i + 1];
      i += 1;
    } else if ((current === '--context' || current === '-c') && argv[i + 1]) {
      args.context = argv[i + 1];
      i += 1;
    } else if ((current === '--issue' || current === '-i') && argv[i + 1]) {
      args.issue = Number(argv[i + 1]);
      i += 1;
    } else if (current === '--dry-run') {
      args.dryRun = true;
    } else if (current === '--help' || current === '-h') {
      usage();
      process.exit(0);
    }
  }
  return args;
}

function loadSummary(summaryPath) {
  const absolute = resolve(summaryPath);
  if (!existsSync(absolute)) {
    throw new Error(`Summary file not found: ${absolute}`);
  }
  const payload = JSON.parse(readFileSync(absolute, 'utf8'));
  if (!payload || typeof payload !== 'object') {
    throw new Error('Summary JSON does not contain expected payload');
  }
  return { ...payload, path: absolute };
}

async function findOrCreateIssue(octokit, owner, repo, specifiedIssue) {
  if (specifiedIssue) {
    const { data } = await octokit.issues.get({ owner, repo, issue_number: specifiedIssue });
    return data;
  }

  const { data: issues } = await octokit.issues.listForRepo({
    owner,
    repo,
    state: 'open',
    labels: 'mutation-survivors',
    per_page: 10,
  });

  if (issues.length > 0) {
    return issues[0];
  }

  const { data: created } = await octokit.issues.create({
    owner,
    repo,
    title: 'Mutation Survivors Backlog',
    body: `This issue tracks surviving mutants collected from mutation quick runs.

- Auto-generated by publish-survivors-report.mjs
- Please triage survivors and link follow-up tasks.
`,
    labels: ['mutation-survivors'],
  });
  return created;
}

function formatMarkdown(summary, context) {
  const lines = [
    `## Mutation Quick Survivors (${context})`,
    '',
    `- Report: ${summary.report}`,
    `- Generated: ${summary.generatedAt}`,
    `- Mutation score: ${summary.metrics.mutationScore.toFixed(2)}% (killed ${summary.metrics.killed}, survived ${summary.metrics.survived}, timeout ${summary.metrics.timeout}, no-cover ${summary.metrics.noCover}, errors ${summary.metrics.errors})`,
  ];

  if (summary.empty) {
    lines.push('', 'No mutants were generated for this run.');
    return lines.join('\n');
  }

  if (!summary.survivors || summary.survivors.length === 0) {
    lines.push('', 'All targeted mutants were killed ðŸŽ‰');
    return lines.join('\n');
  }

  lines.push('', '### Top surviving mutants');
  for (const survivor of summary.survivors) {
    const line = survivor.location?.start?.line;
    const location = line ? `:${line}` : '';
    lines.push(`- ${survivor.file}${location} â€” ${survivor.mutator}`);
  }
  return lines.join('\n');
}

async function publishComment(octokit, owner, repo, issueNumber, body) {
  const { data } = await octokit.issues.createComment({
    owner,
    repo,
    issue_number: issueNumber,
    body,
  });
  return data;
}

async function main() {
  const args = parseArgs(process.argv);
  if (!args.summary || !args.context) {
    console.error('Both --summary and --context are required.');
    usage();
    process.exit(1);
  }

  const summary = loadSummary(args.summary);
  const token = process.env.GITHUB_TOKEN;
  if (!token && !args.dryRun) {
    console.error('GITHUB_TOKEN is required unless --dry-run is used.');
    process.exit(1);
  }

  const contextLabel = args.context;
  const markdown = formatMarkdown(summary, contextLabel);

  if (args.dryRun) {
    console.log('--- Dry Run ---');
    console.log(markdown);
    return;
  }

  const octokit = new Octokit({ auth: token });
  const repository = process.env.GITHUB_REPOSITORY;
  if (!repository) {
    console.error('GITHUB_REPOSITORY env var is required (owner/repo).');
    process.exit(1);
  }
  const [owner, repo] = repository.split('/');

  const issue = await findOrCreateIssue(octokit, owner, repo, args.issue);
  await publishComment(octokit, owner, repo, issue.number, markdown);
  console.log(`Published mutation survivors comment to issue #${issue.number} (${issue.html_url})`);
}

await main();
