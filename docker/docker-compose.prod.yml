# Docker Compose for ae-framework - Production Environment
# Optimized for production deployment with security and performance focus

version: '3.8'

services:
  ae-framework:
    image: ae-framework:${VERSION:-latest}
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      # OpenTelemetry production configuration
      - OTEL_EXPORTER_OTLP_ENDPOINT=${OTEL_ENDPOINT:-http://otel-collector:4317}
      - OTEL_RESOURCE_ATTRIBUTES=service.name=ae-framework,service.version=${VERSION:-1.0.0},deployment.environment=production
      - OTEL_LOG_LEVEL=warn
      # Database configuration
      - DATABASE_URL=${DATABASE_URL}
      # Security configuration
      - HELMET_ENABLED=true
      - RATE_LIMIT_ENABLED=true
    volumes:
      # Production state directory (read-only filesystem except for app data)
      - ae_prod_data:/app/.ae
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (res) => process.exit(res.statusCode === 200 ? 0 : 1))"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    # Security: Use non-root user
    user: "1001:1001"
    # Security: Read-only root filesystem
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
    # Security: Drop all capabilities
    cap_drop:
      - ALL
    # Security: No new privileges
    security_opt:
      - no-new-privileges:true
    # Resource limits (production-optimized)
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 1G
          cpus: "1.0"
        reservations:
          memory: 512M
          cpus: "0.5"
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

  # OpenTelemetry Collector for production observability
  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.88.0
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./config/otel-collector-config.yaml:/etc/otel-collector-config.yaml:ro
    ports:
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP HTTP receiver
      - "8889:8889"   # Prometheus metrics
    environment:
      - OTEL_LOG_LEVEL=warn
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8889/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    # Security hardening
    user: "1001:1001"
    read_only: true
    cap_drop:
      - ALL
    security_opt:
      - no-new-privileges:true

  # Redis for caching and session storage (production)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: ["redis-server", "--appendonly", "yes", "--requirepass-file", "/run/secrets/redis_password"]
    volumes:
      - redis_data:/data
    secrets:
      - redis_password
    healthcheck:
      test: ["CMD", "sh", "-c", "redis-cli --no-auth-warning -a $(cat /run/secrets/redis_password) ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    # Security
    user: "999:999"
    read_only: true
    cap_drop:
      - ALL
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "0.5"
        reservations:
          memory: 256M
          cpus: "0.25"

  # Nginx reverse proxy with security headers
  nginx:
    image: nginx:1.25-alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - ae-framework
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    # Security
    user: "101:101"
    read_only: true
    tmpfs:
      - /var/cache/nginx:noexec,nosuid,size=100m
      - /var/run:noexec,nosuid,size=100m
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - DAC_OVERRIDE
      - SETGID
      - SETUID
    security_opt:
      - no-new-privileges:true

volumes:
  ae_prod_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${AE_DATA_PATH:-/opt/ae-framework/data}
  redis_data:
    driver: local
  nginx_logs:
    driver: local

networks:
  default:
    name: ae-framework-prod
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Production secrets (use Docker secrets or external secret management)
secrets:
  db_password:
    external: true
  redis_password:
    external: true
  ssl_cert:
    external: true
  ssl_key:
    external: true