'use client';

import Link from 'next/link';
import { Button } from '@ae-framework/ui/components/button';
import { Badge } from '@ae-framework/ui/components/badge';

interface {{EntityName}} {
{{#each attributes}}
  {{@key}}: {{getTypeScriptType type}};
{{/each}}
}

interface {{EntityName}}CardProps {
  {{entityName}}: {{EntityName}};
  onDelete?: (id: string) => void;
  showActions?: boolean;
}

export function {{EntityName}}Card({ 
  {{entityName}}, 
  onDelete, 
  showActions = true 
}: {{EntityName}}CardProps) {
  return (
    <div className="bg-white border border-gray-200 rounded-lg p-6 hover:shadow-md transition-shadow">
      <div className="flex justify-between items-start mb-4">
        <div className="flex-1">
          <h3 className="text-lg font-semibold text-gray-900 mb-1">
            {{#if displayNameField}}
            { {{entityName}}.{{displayNameField}} }
            {{else}}
            {{EntityName}} #{ {{entityName}}.id.slice(0, 8) }
            {{/if}}
          </h3>
          {{#if descriptionField}}
          <p className="text-gray-600 text-sm line-clamp-2">
            { {{entityName}}.{{descriptionField}} }
          </p>
          {{/if}}
        </div>
        
        {{#if statusField}}
        <Badge variant={getStatusVariant({{entityName}}.{{statusField}})}>
          { {{entityName}}.{{statusField}} }
        </Badge>
        {{/if}}
      </div>

      <div className="space-y-2 mb-4">
        {{#each cardDisplayFields}}
        <div className="flex justify-between text-sm">
          <span className="text-gray-500">{{getFieldLabel @key}}:</span>
          <span className="text-gray-900 font-medium">
            {{getCardFieldDisplay @key ../entityName}}
          </span>
        </div>
        {{/each}}
      </div>

      {{#if timestampFields}}
      <div className="text-xs text-gray-400 mb-4">
        {{#each timestampFields}}
        <div>{{getFieldLabel @key}}: {new Date({{../entityName}}.{{@key}}).toLocaleDateString()}</div>
        {{/each}}
      </div>
      {{/if}}

      {showActions && (
        <div className="flex gap-2">
          <Link href={`/{{entityName}}/${ {{entityName}}.id }`}>
            <Button variant="outline" size="sm" className="flex-1">
              View Details
            </Button>
          </Link>
          
          {onDelete && (
            <Button 
              variant="destructive" 
              size="sm"
              onClick={() => onDelete( {{entityName}}.id )}
            >
              Delete
            </Button>
          )}
        </div>
      )}
    </div>
  );
}

// Helper function for status badge variants
function getStatusVariant(status: string) {
  switch (status?.toLowerCase()) {
    case 'active':
    case 'confirmed':
    case 'delivered':
      return 'success';
    case 'pending':
    case 'shipped':
      return 'warning';
    case 'inactive':
    case 'cancelled':
      return 'destructive';
    default:
      return 'secondary';
  }
}