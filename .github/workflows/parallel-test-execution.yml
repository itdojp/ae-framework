name: Parallel Test Execution Strategy

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened, ready_for_review, labeled]
    paths:
      - 'src/**'
      - 'packages/**'
      - 'apps/**'
      - 'tests/**'
      - 'configs/**'
      - 'scripts/**'
      - 'types/**'

env:
  NODE_ENV: test
  CI: true

concurrency:
  group: parallel-tests-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Matrix strategy for parallel test execution
  test-matrix:
    name: Test Suite (${{ matrix.test-type }})
    runs-on: ubuntu-latest
    # Job-level gating removed to satisfy actionlint; gate at step level instead
    continue-on-error: ${{ github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'ci-non-blocking') }}
    timeout-minutes: 30
    
    strategy:
      fail-fast: false
      matrix:
        test-type: [unit, integration, quality, flake-detection]
        include:
          - test-type: unit
            command: test:unit
            timeout: 10
          - test-type: integration  
            command: test:integration
            timeout: 15
          - test-type: quality
            command: test:a11y
            timeout: 20
          - test-type: flake-detection
            command: flake:detect:enhanced:quick
            timeout: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
      
      - name: Enable corepack and install deps
        run: |
          corepack enable
          pnpm install --frozen-lockfile || pnpm install --no-frozen-lockfile

      - name: Create reports directory
        run: |
          mkdir -p reports
          mkdir -p logs

      - name: Run ${{ matrix.test-type }} tests
        run: |
          printf "%s\n" "üöÄ Starting ${{ matrix.test-type }} test suite..."
          pnpm run ${{ matrix.command }}
        timeout-minutes: ${{ matrix.timeout }}

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.test-type }}
          path: |
            reports/
            logs/
          retention-days: 30

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        if: matrix.test-type == 'unit' && always()
        with:
          name: coverage-reports
          path: coverage/
          retention-days: 30

  # E2E tests run separately due to higher resource requirements
  test-e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    continue-on-error: ${{ github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'ci-non-blocking') }}
    # Only run on PR when explicitly requested via label; always on push
    if: github.event_name != 'pull_request' || contains(join(fromJSON(toJSON(github.event.pull_request.labels)).*.name, ','), 'run-e2e')
    timeout-minutes: 45
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
      
      - name: Enable corepack and install deps
        run: |
          corepack enable
          pnpm install --frozen-lockfile || pnpm install --no-frozen-lockfile

      - name: Create reports directory
        run: |
          mkdir -p reports
          mkdir -p logs

      - name: Run E2E tests
        run: |
          printf "%s\n" "üé≠ Starting E2E test suite..."
          pnpm run test:playwright
        timeout-minutes: 40

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-e2e
          path: |
            reports/
            logs/
            playwright-report/
          retention-days: 30

  # Performance tests run on schedule and for significant changes
  test-performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    continue-on-error: ${{ github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'ci-non-blocking') }}
    timeout-minutes: 35
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
      
      - name: Enable corepack and install deps
        run: |
          corepack enable
          pnpm install --frozen-lockfile || pnpm install --no-frozen-lockfile

      - name: Run performance tests
        run: |
          printf "%s\n" "‚ö° Starting performance test suite..."
          pnpm run test:perf
        timeout-minutes: 30

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-results
          path: |
            benchmarks/
            reports/
          retention-days: 90

  # Consolidate results from all test jobs
  test-consolidation:
    name: Test Result Consolidation
    runs-on: ubuntu-latest
    needs: [test-matrix, test-e2e]
    continue-on-error: ${{ github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'ci-non-blocking') }}
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
      
      - name: Enable corepack and install deps
        run: |
          corepack enable
          pnpm install --frozen-lockfile || pnpm install --no-frozen-lockfile


      - name: Download all test artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Merge test results
        run: |
          printf "%s\n" "üìä Consolidating test results..."
          mkdir -p reports
          
          # Merge all test results into reports directory
          find artifacts/ -name "*.xml" -exec cp {} reports/ \; || true
          find artifacts/ -name "*.json" -exec cp {} reports/ \; || true
          find artifacts/ -name "*.txt" -exec cp {} reports/ \; || true

      - name: Generate consolidated report
        run: |
          node scripts/generate-test-report.js
        timeout-minutes: 5

      - name: Upload consolidated results
        uses: actions/upload-artifact@v4
        with:
          name: consolidated-test-results
          path: |
            reports/consolidated-test-report.json
            reports/test-summary.txt
          retention-days: 90

      - name: Check test results
        run: |
          if [ -f "reports/consolidated-test-report.json" ]; then
            # Extract status from consolidated report
            STATUS=$(node -e "
              const report = require('./reports/consolidated-test-report.json');
              console.log(report.status);
            ")
            
            if [ "$STATUS" = "failure" ]; then
                printf "%s\n" "‚ùå Tests failed - check consolidated report for details"
              exit 1
            else
                printf "%s\n" "‚úÖ All tests passed successfully"
            fi
          else
            printf "%s\n" "‚ö†Ô∏è No consolidated report found"
            exit 1
          fi

  # Adaptive retry for flaky tests
  test-flaky-retry:
    name: Flaky Test Retry
    runs-on: ubuntu-latest
    needs: [test-matrix]
    if: failure() && contains(needs.test-matrix.result, 'failure')
    timeout-minutes: 20
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
      
      - name: Enable corepack and install deps
        run: |
          corepack enable
          pnpm install --frozen-lockfile

      - name: Retry failed tests with enhanced detection
        run: |
          printf "%s\n" "üîÑ Retrying potentially flaky tests..."
          pnpm run flake:detect:enhanced:quick
        timeout-minutes: 8

      - name: Upload retry results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: flaky-test-retry-results
          path: |
            reports/flake-detection/
          retention-days: 30
