name: Formal Verify

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review, labeled]
  push:
    tags: ['v*']
  workflow_dispatch:
    inputs:
      target:
        description: "Target to run (all|conformance|alloy|tla|smt)"
        required: false
        default: "all"
      tlaFile:
        description: "TLA file to run (for Apalache/TLA)"
        required: false
        default: "spec/tla/DomainSpec.tla"
      engine:
        description: "TLA+ engine (tlc|apalache)"
        required: false
        default: "tlc"
      solver:
        description: "SMT solver (z3|cvc5)"
        required: false
        default: "z3"
      alloyJar:
        description: "Path to Alloy jar (optional)"
        required: false
        default: ""
      tlaToolsJar:
        description: "Path to TLA+ tla2tools.jar (optional)"
        required: false
        default: ""

jobs:
  verify-conformance:
    name: verify:conformance (stub)
    runs-on: ubuntu-latest
    if: (github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'run-formal')) || (github.event_name == 'workflow_dispatch' && (inputs.target == 'all' || inputs.target == 'conformance'))
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Print run context
        run: node scripts/formal/print-context.mjs || true
      - name: Show formal tools availability (non-blocking)
        run: node scripts/formal/tools-check.mjs || true
      - name: Run verify:conformance stub
        run: node scripts/formal/verify-conformance.mjs
      - name: Validate trace schema (sample)
        run: node scripts/formal/trace-validate.mjs
      - name: Aggregate formal summaries (local)
        run: node scripts/formal/aggregate-formal.mjs
      - name: Conformance driver (stub)
        run: node scripts/formal/conformance-driver.mjs || true
      - name: Print formal summary (console)
        run: node scripts/formal/print-summary.mjs
      - name: Upload formal reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: formal-reports
          path: |
            hermetic-reports/
      - name: Upload conformance summary (artifact)
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: formal-reports-conformance
          path: |
            hermetic-reports/formal/conformance-summary.json

  verify-alloy:
    name: verify:alloy (stub)
    runs-on: ubuntu-latest
    if: (github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'run-formal')) || (github.event_name == 'workflow_dispatch' && (inputs.target == 'all' || inputs.target == 'alloy'))
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Check Alloy tooling presence (non-blocking)
        run: |
          printf "%s\n" "Checking Alloy tooling..."
          node -e "console.log('Alloy tooling check stub ok')"
      - name: Run verify:alloy (sample)
        env:
          ALLOY_JAR: ${{ github.event_name == 'workflow_dispatch' && inputs.alloyJar || '' }}
        run: node scripts/formal/verify-alloy.mjs --file spec/alloy/Domain.als || true
      - name: Upload Alloy summary (artifact)
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: formal-reports-alloy
          path: |
            hermetic-reports/formal/alloy-summary.json

  verify-tla:
    name: verify:tla (stub)
    runs-on: ubuntu-latest
    if: (github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'run-formal')) || (github.event_name == 'workflow_dispatch' && (inputs.target == 'all' || inputs.target == 'tla'))
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Run verify:tla stub
        env:
          TLA_ENGINE: ${{ github.event_name == 'workflow_dispatch' && inputs.engine || 'tlc' }}
          TLA_TOOLS_JAR: ${{ github.event_name == 'workflow_dispatch' && inputs.tlaToolsJar || '' }}
        run: node scripts/formal/verify-tla.mjs --engine="$TLA_ENGINE" --file spec/tla/DomainSpec.tla || true
      - name: Upload TLA summary (artifact)
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: formal-reports-tla
          path: |
            hermetic-reports/formal/tla-summary.json

  verify-smt:
    name: verify:smt (stub)
    runs-on: ubuntu-latest
    if: (github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'run-formal')) || (github.event_name == 'workflow_dispatch' && (inputs.target == 'all' || inputs.target == 'smt'))
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Check SMT tooling presence (non-blocking)
        run: |
          printf "%s\n" "Checking SMT tooling..."
          node -e "console.log('SMT tooling check stub ok')"
      - name: Run verify:smt (sample)
        env:
          SMT_SOLVER: ${{ github.event_name == 'workflow_dispatch' && inputs.solver || 'z3' }}
        run: node scripts/formal/verify-smt.mjs --solver="$SMT_SOLVER" --file spec/smt/sample.smt2 || true
      - name: Upload SMT summary (artifact)
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: formal-reports-smt
          path: |
            hermetic-reports/formal/smt-summary.json

  verify-apalache:
    name: verify:apalache (stub)
    runs-on: ubuntu-latest
    if: (github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'run-formal')) || (github.event_name == 'workflow_dispatch' && (inputs.target == 'all' || inputs.target == 'apalache'))
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Check Apalache presence (non-blocking)
        run: |
          node scripts/formal/check-apalache.mjs || true
      - name: Run verify:apalache (summary, non-blocking)
        run: |
          node scripts/formal/verify-apalache.mjs --file "${{ inputs.tlaFile || 'spec/tla/DomainSpec.tla' }}" || true
      - name: Upload Apalache summary (artifact)
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: formal-reports-apalache
          path: |
            hermetic-reports/formal/apalache-summary.json
            hermetic-reports/formal/apalache-output.txt
      - name: Validate Apalache summary shape (non-blocking)
        if: always()
        run: |
          node scripts/formal/validate-apalache-summary.mjs || true
      - name: "Enforce Apalache (label: enforce-formal)"
        if: contains(github.event.pull_request.labels.*.name, 'enforce-formal')
        run: |
          FILE="hermetic-reports/formal/apalache-summary.json"
          if [ ! -f "$FILE" ]; then
            printf "%s\n" "::error::apalache-summary.json not found"
            exit 1
          fi
          ok=$(jq -r '.ok // ""' "$FILE" 2>/dev/null || printf "\n")
          ran=$(jq -r '.ran // false' "$FILE" 2>/dev/null || printf "false\n")
          if [ "$ran" != "true" ]; then
            printf "%s\n" "::error::Apalache did not run; cannot enforce"
            exit 1
          fi
          if [ "$ok" != "true" ]; then
            ec=$(jq -r '.errorCount // 0' "$FILE" 2>/dev/null || printf "0\n")
            printf "%s\n" "::error::Apalache not ok (errors=$ec)"
            exit 1
          fi
