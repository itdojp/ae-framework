name: Fail-Fast Spec Validation

on:
  pull_request:
    paths:
      - 'spec/**'
      - '.ae/**'
  push:
    branches: [main]
  workflow_call:
    # Allow this workflow to be called by other workflows

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '10'

jobs:
  fail-fast-validation:
    runs-on: ubuntu-latest
    name: üö¶ Fail-Fast Spec Validation
    timeout-minutes: 10  # Quick fail-fast timeout
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Only fetch files needed for spec validation
          sparse-checkout: |
            spec
            .ae
            packages/spec-compiler
            src/cli
            package.json
            pnpm-lock.yaml
            tsconfig.json

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install pnpm
        uses: pnpm/action-setup@v5
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: Install dependencies (fast)
        run: |
          pnpm install --frozen-lockfile --prefer-offline
          # Only build what's needed for spec validation
          cd packages/spec-compiler && pnpm run build

      - name: üîç Pre-flight spec file check
        run: |
          printf "%s\n" "::group::Checking for spec files"
          if [ ! -d "spec" ]; then
            printf "%s\n" "::warning::No spec directory found - creating with example"
            mkdir -p spec
            printf "%s\n" "# Example Specification" > "spec/example-spec.md"
            printf "%s\n" "This is a minimal example spec for validation testing." >> "spec/example-spec.md"
          fi
          
          SPEC_FILES=$(find spec -name "*.md" -type f 2>/dev/null || echo "")
          if [ -z "$SPEC_FILES" ]; then
            printf "%s\n" "::error::No spec files found in spec/ directory"
            exit 1
          fi
          
          printf "%s\n" "Found spec files:"
          printf "%s\n" "$SPEC_FILES"
          printf "%s\n" "::endgroup::"

      - name: üöÄ Fast AE-Spec Compilation
        run: |
          printf "%s\n" "::group::AE-Spec ‚Üí AE-IR Compilation"
          
          # Find the first spec file (or use specified one)
          SPEC_FILE=$(find spec -name "*.md" -type f | head -1)
          
          if [ -z "$SPEC_FILE" ]; then
            printf "%s\n" "::error::No markdown spec files found"
            exit 1
          fi
          
          printf "%s\n" "Compiling: $SPEC_FILE ‚Üí .ae/ae-ir.json"
          mkdir -p .ae
          
          # Fail fast on compilation errors
          if ! npx tsx src/cli/index.ts spec compile --input "$SPEC_FILE" --output .ae/ae-ir.json --no-verbose; then
            printf "%s\n" "::error::AE-Spec compilation failed"
            exit 1
          fi
          
          printf "%s\n" "‚úÖ Compilation successful"
          printf "%s\n" "::endgroup::"

      - name: ‚ö° Critical Lint Validation
        run: |
          printf "%s\n" "::group::Critical Lint Validation"
          
          if [ ! -f ".ae/ae-ir.json" ]; then
            printf "%s\n" "::error::AE-IR file not generated"
            exit 1
          fi
          
          # Strict linting - fail on any errors
          if ! npx tsx src/cli/index.ts spec lint --input .ae/ae-ir.json --max-errors 0 --max-warnings 20; then
            printf "%s\n" "::error::AE-IR lint validation failed - specification has critical issues"
            exit 1
          fi
          
          printf "%s\n" "‚úÖ Lint validation passed"
          printf "%s\n" "::endgroup::"

      - name: üìä Structure Validation
        run: |
          printf "%s\n" "::group::AE-IR Structure Validation"
          
          # Basic JSON structure validation
          if ! node -e "
            const fs = require('fs');
            const ir = JSON.parse(fs.readFileSync('.ae/ae-ir.json', 'utf8'));
            
            // Required fields validation
            const required = ['version', 'metadata', 'glossary', 'domain', 'invariants', 'usecases', 'api'];
            const missing = required.filter(field => !(field in ir));
            
            if (missing.length > 0) {
              console.error('Missing required fields:', missing.join(', '));
              process.exit(1);
            }
            
            // Basic content validation
            if (!ir.metadata.name) {
              console.error('Specification must have a name');
              process.exit(1);
            }
            
            console.log('üìã AE-IR Structure Summary:');
            console.log('- Name:', ir.metadata.name);
            console.log('- Version:', ir.version);
            console.log('- Entities:', ir.domain.length);
            console.log('- API Endpoints:', ir.api.length);
            console.log('- Use Cases:', ir.usecases.length);
            console.log('- Business Rules:', ir.invariants.length);
            console.log('- Glossary Terms:', ir.glossary.length);
            
            console.log('‚úÖ Structure validation passed');
          "; then
            printf "%s\n" "::error::AE-IR structure validation failed"
            exit 1
          fi
          
          printf "%s\n" "::endgroup::"

      - name: üíæ Upload artifacts on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: failed-spec-validation-${{ github.run_id }}
          path: |
            .ae/
            spec/
          retention-days: 7

      - name: üìù Success Summary
        if: success()
        run: |
          printf "%s\n" "::notice::üéâ Fail-fast spec validation completed successfully!"
          printf "%s\n" "::notice::AE-IR is ready for use as Single Source of Truth (SSOT)"
          
          if [ -f ".ae/ae-ir.json" ]; then
            AE_IR_SIZE=$(du -h .ae/ae-ir.json | cut -f1)
            printf "%s\n" "::notice::Generated AE-IR size: $AE_IR_SIZE"
          fi

  # Call dependent workflows only after validation passes
  downstream-validation:
    needs: fail-fast-validation
    if: success()
    uses: ./.github/workflows/spec-validation.yml
    secrets: inherit
