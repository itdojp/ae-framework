name: Verify Lite

on:
  pull_request:
  push:
    branches: [main]
    tags: ['v*']
  workflow_dispatch:

jobs:
  verify-lite:
    runs-on: ubuntu-latest
    steps:
      - name: Coverage policy (note)
        run: |
          printf "%s\n" "Coverage policy (for reference):" \
          && printf "%s\n" "- Enforce on main: ${COVERAGE_ENFORCE_MAIN:-0}" \
          && printf "%s\n" "- Default threshold: ${COVERAGE_DEFAULT_THRESHOLD:-80} (override via coverage:<pct>)"
        env:
          COVERAGE_ENFORCE_MAIN: ${{ vars.COVERAGE_ENFORCE_MAIN }}
          COVERAGE_DEFAULT_THRESHOLD: ${{ vars.COVERAGE_DEFAULT_THRESHOLD }}
      - uses: actions/checkout@v4
      - name: Prepare pnpm
        uses: ./.github/actions/setup-pnpm
      - name: Enable corepack
        run: corepack enable
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
      - name: Run verify-lite pipeline
        env:
          VERIFY_LITE_KEEP_LINT_LOG: '1'
          VERIFY_LITE_RUN_MUTATION: ${{ github.event_name == 'pull_request' && '1' || '0' }}
          VERIFY_LITE_NO_FROZEN: '0'
          VERIFY_LITE_SUMMARY_FILE: verify-lite-run-summary.json
          VERIFY_LITE_SUMMARY_EXPORT_PATH: artifacts/verify-lite/verify-lite-run-summary.json
          VERIFY_LITE_LINT_BASELINE: config/verify-lite-lint-baseline.json
          VERIFY_LITE_LINT_ENFORCE: ${{ github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'enforce-verify-lite-lint') && '1' || '0' }}
        run: |
          pnpm run verify:lite
      - name: Runtime contracts report
        if: always()
        env:
          CONTRACTS_ENFORCE: ${{ github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'enforce-runtime-contracts') && '1' || '0' }}
        run: |
          pnpm tsx scripts/verify/execute-contracts.ts
      - name: Verify-lite lint baseline
        if: always()
        env:
          VERIFY_LITE_LINT_ENFORCE: ${{ github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'enforce-verify-lite-lint') && '1' || '0' }}
        run: |
          if [ -f verify-lite-lint-summary.json ]; then
            set -o pipefail
            node scripts/ci/enforce-verify-lite-lint.mjs \
              verify-lite-lint-summary.json \
              config/verify-lite-lint-baseline.json | tee /tmp/lint-baseline-report.txt
            cat /tmp/lint-baseline-report.txt >> "$GITHUB_STEP_SUMMARY"
          else
            echo 'verify-lite lint summary missing; skipped baseline enforcement' | tee -a "$GITHUB_STEP_SUMMARY"
          fi
      - name: Validate verify-lite summary schema
        run: |
          node scripts/ci/validate-verify-lite-summary.mjs \
            verify-lite-run-summary.json \
            schema/verify-lite-run-summary.schema.json
      - name: Create verify-lite report envelope
        if: always()
        env:
          REPORT_ENVELOPE_SOURCE: verify-lite
        run: |
          if [ -f artifacts/verify-lite/verify-lite-run-summary.json ]; then
            node scripts/trace/create-report-envelope.mjs \
              artifacts/verify-lite/verify-lite-run-summary.json \
              artifacts/report-envelope.json
          else
            echo 'verify-lite summary missing; skipped envelope generation'
          fi
      - name: Validate report envelope schema
        if: always()
        run: |
          node scripts/ci/validate-report-envelope.mjs \
            artifacts/report-envelope.json \
            schema/report-envelope.schema.json
      - name: BDD lint (strict; label-gated)
        if: ${{ github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'enforce-bdd-lint') }}
        env:
          BDD_LINT_STRICT: '1'
          BDD_ROOTS: ${{ vars.BDD_ROOTS }}
        run: |
          node scripts/bdd/lint.mjs
      - name: BDD â†’ LTL suggestions (report-only)
        run: |
          if npm run -s | grep -q "bdd:suggest"; then pnpm -s run bdd:suggest; else printf "No BDD suggest script\n"; fi
      - name: Formal tools check (non-blocking)
        continue-on-error: true
        run: |
          if [ -f scripts/formal/tools-check.mjs ]; then node scripts/formal/tools-check.mjs; fi
      - name: "Run formal (label gated: run-formal)"
        if: ${{ github.event_name != 'pull_request' || contains(github.event.pull_request.labels.*.name, 'run-formal') }}
        run: |
          node scripts/formal/verify-conformance.mjs || true
          node scripts/formal/verify-alloy.mjs || true
          node scripts/formal/verify-tla.mjs --engine=tlc || true
          node scripts/formal/verify-smt.mjs --solver=cvc5 || true
          node scripts/formal/verify-kani.mjs || true
          node scripts/formal/presets-apply.mjs || true
          node scripts/formal/aggregate-formal.mjs || true
          node scripts/formal/print-summary.mjs || true
      - name: Aggregate adapters/formal/properties (non-blocking)
        continue-on-error: true
        run: |
          if npm run -s | grep -q "artifacts:aggregate"; then pnpm -s run artifacts:aggregate; fi
          node scripts/simulation/deterministic-runner.mjs || true
      - name: Resilience quick (label-gated, non-blocking)
        if: ${{ github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'run-resilience') }}
        continue-on-error: true
        run: |
          pnpm -s vitest run "tests/resilience/**/*.fast.*.test.ts" --reporter=verbose --run --coverage=false || true
      - name: BDD step lint (non-blocking)
        continue-on-error: true
        run: |
          if [ -f scripts/bdd/step-lint.mjs ]; then node scripts/bdd/step-lint.mjs || true; fi
      - name: BDD step lint (strict; label-gated)
        if: ${{ github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'enforce-bdd-lint') }}
        run: |
          if [ -f scripts/bdd/step-lint.mjs ]; then node scripts/bdd/step-lint.mjs; fi
      - name: Render PR summary (digest)
        env:
          SUMMARY_MODE: digest
          SUMMARY_LANG: ${{ (github.event.pull_request && contains(github.event.pull_request.labels.*.name, 'lang:ja')) && 'ja' || 'en' }}
        run: |
          if [ -f scripts/summary/render-pr-summary.mjs ]; then node scripts/summary/render-pr-summary.mjs; fi
          [ -f artifacts/summary/PR_SUMMARY.md ] && cat artifacts/summary/PR_SUMMARY.md >> "$GITHUB_STEP_SUMMARY" || true
      - name: Mutation quick summary
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          if [ -f mutation-summary.md ]; then
            cat mutation-summary.md >> "$GITHUB_STEP_SUMMARY"
          elif [ -f reports/mutation/mutation.json ]; then
            node scripts/mutation/post-quick-summary.mjs --format markdown | tee mutation-summary.md
            node scripts/mutation/post-quick-summary.mjs --format json --output reports/mutation/mutation-summary.json >/dev/null
            cat mutation-summary.md >> "$GITHUB_STEP_SUMMARY"
          else
            printf 'No mutation report found; skipped summary.\n' | tee mutation-summary.md >> "$GITHUB_STEP_SUMMARY"
          fi
      - name: Mutation survivors JSON
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          if [ -f reports/mutation/mutation.json ]; then
            mkdir -p reports/mutation
            node scripts/mutation/list-survivors.mjs --limit 50 > reports/mutation/survivors.json
            survivors_for_summary="$(node scripts/mutation/list-survivors.mjs --limit 10)"
            {
              printf '%s\n' '## Mutation survivors (top 10)'
              printf '%s\n' '```json'
              printf '%s\n' "$survivors_for_summary"
              printf '%s\n' '```'
            } >> "$GITHUB_STEP_SUMMARY"
          else
            printf "%s\n" "No mutation report found; skipped survivors extraction." >> "$GITHUB_STEP_SUMMARY"
          fi
      - name: Upload mutation survivors artifact
        if: ${{ github.event_name == 'pull_request' && hashFiles('reports/mutation/survivors.json') != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: mutation-survivors-json
          path: reports/mutation/survivors.json
      - name: Upload verify-lite report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: verify-lite-report
          path: |
            artifacts/verify-lite/verify-lite-run-summary.json
            artifacts/report-envelope.json
            verify-lite-run-summary.json
            verify-lite-lint.log
            verify-lite-lint-summary.json
          if-no-files-found: ignore
      - name: Upload runtime guard stats
        if: ${{ always() && hashFiles('artifacts/runtime-guard/runtime-guard-stats.json') != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: runtime-guard-stats
          path: artifacts/runtime-guard/runtime-guard-stats.json
      - name: Append verify-lite run summary
        if: always()
        run: |
          if [ -f verify-lite-run-summary.json ]; then
            echo '## Verify Lite Run Summary' >> "$GITHUB_STEP_SUMMARY"
            node scripts/ci/render-verify-lite-summary.mjs verify-lite-run-summary.json >> "$GITHUB_STEP_SUMMARY"
          else
            echo 'Verify Lite run summary not generated.' >> "$GITHUB_STEP_SUMMARY"
          fi
      - name: Append runtime contracts summary
        if: always()
        run: |
          if [ -f artifacts/contracts/contracts-exec.json ]; then
            node scripts/verify/render-contracts-summary.mjs artifacts/contracts/contracts-exec.json >> "$GITHUB_STEP_SUMMARY"
          else
            echo 'Runtime contracts summary not generated.' >> "$GITHUB_STEP_SUMMARY"
          fi
      - name: Append runtime guard summary
        if: ${{ always() && hashFiles('artifacts/runtime-guard/runtime-guard-stats.json') != '' }}
        run: |
          node scripts/telemetry/render-runtime-guard-summary.mjs artifacts/runtime-guard/runtime-guard-stats.json >> "$GITHUB_STEP_SUMMARY"
      - name: Append lint summary (top rules)
        if: always()
        run: |
          if [ -f verify-lite-lint-summary.json ]; then
            echo '## Verify Lite Lint Summary' >> "$GITHUB_STEP_SUMMARY"
            # shellcheck disable=SC1009,SC1073,SC1039,SC1072
            node -e $'const fs = require("fs");\ntry {\n  const data = JSON.parse(fs.readFileSync("verify-lite-lint-summary.json","utf8"));\n  console.log("Total issues: " + data.total);\n  const top = (data.rules || []).slice(0, 5);\n  if (top.length) {\n    console.log("Top rules:");\n    for (const rule of top) {\n      console.log("- " + rule.rule + " (" + rule.count + ")");\n    }\n  }\n} catch (err) {\n  console.log("Failed to parse lint summary: " + err.message);\n}' >> "$GITHUB_STEP_SUMMARY"
          else
            echo 'Verify Lite lint summary not generated.' >> "$GITHUB_STEP_SUMMARY"
          fi
