name: Verify Lite

on:
  pull_request:
  push:
    branches: [main]
    tags: ['v*']
  workflow_dispatch:

jobs:
  verify-lite:
    runs-on: ubuntu-latest
    steps:
      - name: Coverage policy (note)
        run: |
          printf "%s\n" "Coverage policy (for reference):" \
          && printf "%s\n" "- Enforce on main: ${COVERAGE_ENFORCE_MAIN:-0}" \
          && printf "%s\n" "- Default threshold: ${COVERAGE_DEFAULT_THRESHOLD:-80} (override via coverage:<pct>)"
        env:
          COVERAGE_ENFORCE_MAIN: ${{ vars.COVERAGE_ENFORCE_MAIN }}
          COVERAGE_DEFAULT_THRESHOLD: ${{ vars.COVERAGE_DEFAULT_THRESHOLD }}
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Prepare pnpm
        uses: ./.github/actions/setup-pnpm
      - name: Enable corepack
        run: corepack enable
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile || pnpm install --no-frozen-lockfile

      - name: Prepare mutation auto diff args
        id: vlite-mutation-args
        run: |
          set -euo pipefail
          target_base="origin/main"
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            target_base="origin/${{ github.event.pull_request.base.ref }}"
          fi
          git fetch --no-tags --depth=1 origin "${target_base#origin/}" || true
          {
            echo "base_ref=${target_base}"
            echo 'args<<__VL_MUT_ARGS__'
            echo '--configFile'
            echo 'configs/stryker.config.js'
            echo '__VL_MUT_ARGS__'
          } >> "$GITHUB_OUTPUT"

      - name: Run mutation auto diff (verify-lite)
        id: vlite-mutation
        uses: ./.github/actions/mutation-auto-diff
        with:
          base-ref: ${{ steps.vlite-mutation-args.outputs.base_ref }}
          quick: 'true'
          extra-args: ${{ steps.vlite-mutation-args.outputs.args }}
      - name: Detect pact-related changes (PR only)
        id: pact-paths
        run: |
          WATCH_PATH_PATTERN='^(contracts/|src/api/|specs/openapi/|tests/contracts/)'

          if [ "${{ github.event_name }}" = "pull_request" ]; then
            set -eo pipefail
            BASE_SHA="${{ github.event.pull_request.base.sha }}"
            git fetch origin "$BASE_SHA" --depth=1
            CHANGED="$(git diff --name-only "$BASE_SHA"...HEAD || true)"
            printf '%s\n' "$CHANGED" > /tmp/changed-files.txt
            if printf '%s\n' "$CHANGED" | grep -E "$WATCH_PATH_PATTERN" >/dev/null; then
              echo "pact=true" >> "$GITHUB_OUTPUT"
            else
              echo "pact=false" >> "$GITHUB_OUTPUT"
            fi
          else
            echo "pact=true" >> "$GITHUB_OUTPUT"
          fi
      - name: Run verify-lite pipeline
        env:
          VERIFY_LITE_KEEP_LINT_LOG: '1'
          VERIFY_LITE_RUN_MUTATION: '0'
          VERIFY_LITE_SKIP_INSTALL: '1'
          VERIFY_LITE_NO_FROZEN: '0'
          VERIFY_LITE_SUMMARY_FILE: verify-lite-run-summary.json
          VERIFY_LITE_SUMMARY_EXPORT_PATH: artifacts/verify-lite/verify-lite-run-summary.json
          VERIFY_LITE_LINT_BASELINE: config/verify-lite-lint-baseline.json
          VERIFY_LITE_LINT_ENFORCE: ${{ github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'enforce-verify-lite-lint') && '1' || '0' }}
        run: |
          pnpm run verify:lite
      - name: Property-based smoke
        run: pnpm test:property
      - name: MBT smoke
        run: pnpm test:mbt -- --runs=8 --depth=6
      - name: Pact contract smoke
        if: ${{ steps.pact-paths.outputs.pact == 'true' }}
        run: pnpm pipelines:pact
      - name: Pact contract smoke (skipped)
        if: ${{ github.event_name == 'pull_request' && steps.pact-paths.outputs.pact == 'false' }}
        run: |
          echo 'Pact contract smoke skipped: no relevant contract changes detected.' >> "$GITHUB_STEP_SUMMARY"
      - name: Verify-lite lint baseline
        if: always()
        env:
          VERIFY_LITE_LINT_ENFORCE: ${{ github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'enforce-verify-lite-lint') && '1' || '0' }}
        run: |
          if [ -f verify-lite-lint-summary.json ]; then
            set -o pipefail
            node scripts/ci/enforce-verify-lite-lint.mjs \
              verify-lite-lint-summary.json \
              config/verify-lite-lint-baseline.json | tee /tmp/lint-baseline-report.txt
            cat /tmp/lint-baseline-report.txt >> "$GITHUB_STEP_SUMMARY"
          else
            echo 'verify-lite lint summary missing; skipped baseline enforcement' | tee -a "$GITHUB_STEP_SUMMARY"
          fi
      - name: Validate verify-lite summary schema
        run: |
          node scripts/ci/validate-verify-lite-summary.mjs \
            verify-lite-run-summary.json \
            schema/verify-lite-run-summary.schema.json
      - name: Create verify-lite report envelope
        if: always()
        env:
          REPORT_ENVELOPE_SOURCE: verify-lite
        run: |
          if [ -f artifacts/verify-lite/verify-lite-run-summary.json ]; then
            node scripts/trace/create-report-envelope.mjs \
              artifacts/verify-lite/verify-lite-run-summary.json \
              artifacts/report-envelope.json
          else
            echo 'verify-lite summary missing; skipped envelope generation'
          fi
      - name: Validate report envelope schema
        if: always()
        run: |
          node scripts/ci/validate-report-envelope.mjs \
            artifacts/report-envelope.json \
            schema/report-envelope.schema.json
      - name: BDD lint (strict; label-gated)
        if: ${{ github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'enforce-bdd-lint') }}
        env:
          BDD_LINT_STRICT: '1'
          BDD_ROOTS: ${{ vars.BDD_ROOTS }}
        run: |
          node scripts/bdd/lint.mjs
      - name: BDD â†’ LTL suggestions (report-only)
        run: |
          if npm run -s | grep -q "bdd:suggest"; then pnpm -s run bdd:suggest; else printf "No BDD suggest script\n"; fi
      - name: Formal tools check (non-blocking)
        continue-on-error: true
        run: |
          if [ -f scripts/formal/tools-check.mjs ]; then node scripts/formal/tools-check.mjs; fi
      - name: "Run formal (label gated: run-formal)"
        if: ${{ github.event_name != 'pull_request' || contains(github.event.pull_request.labels.*.name, 'run-formal') }}
        run: |
          node scripts/formal/verify-conformance.mjs || true
          node scripts/formal/verify-alloy.mjs || true
          node scripts/formal/verify-tla.mjs --engine=tlc || true
          node scripts/formal/verify-smt.mjs --solver=cvc5 || true
          node scripts/formal/verify-kani.mjs || true
          node scripts/formal/presets-apply.mjs || true
          node scripts/formal/aggregate-formal.mjs || true
          node scripts/formal/print-summary.mjs || true
      - name: Aggregate adapters/formal/properties (non-blocking)
        continue-on-error: true
        run: |
          if npm run -s | grep -q "artifacts:aggregate"; then pnpm -s run artifacts:aggregate; fi
          node scripts/simulation/deterministic-runner.mjs || true
      - name: Resilience quick (label-gated, non-blocking)
        if: ${{ github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'run-resilience') }}
        continue-on-error: true
        run: |
          pnpm -s vitest run "tests/resilience/**/*.fast.*.test.ts" --reporter=verbose --run --coverage=false || true
      - name: BDD step lint (non-blocking)
        continue-on-error: true
        run: |
          if [ -f scripts/bdd/step-lint.mjs ]; then node scripts/bdd/step-lint.mjs || true; fi
      - name: BDD step lint (strict; label-gated)
        if: ${{ github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'enforce-bdd-lint') }}
        run: |
          if [ -f scripts/bdd/step-lint.mjs ]; then node scripts/bdd/step-lint.mjs; fi
      - name: Render PR summary (digest)
        env:
          SUMMARY_MODE: digest
          SUMMARY_LANG: ${{ (github.event.pull_request && contains(github.event.pull_request.labels.*.name, 'lang:ja')) && 'ja' || 'en' }}
        run: |
          if [ -f scripts/summary/render-pr-summary.mjs ]; then node scripts/summary/render-pr-summary.mjs; fi
          [ -f artifacts/summary/PR_SUMMARY.md ] && cat artifacts/summary/PR_SUMMARY.md >> "$GITHUB_STEP_SUMMARY" || true
      - name: Mutation survivors JSON
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          if [ -f reports/mutation/mutation.json ]; then
            mkdir -p reports/mutation
            node scripts/mutation/list-survivors.mjs --limit 50 > reports/mutation/survivors.json
            survivors_for_summary="$(node scripts/mutation/list-survivors.mjs --limit 10)"
            {
              printf '%s\n' '## Mutation survivors (top 10)'
              printf '%s\n' '```json'
              printf '%s\n' "$survivors_for_summary"
              printf '%s\n' '```'
            } >> "$GITHUB_STEP_SUMMARY"
          else
            printf "%s\n" "No mutation report found; skipped survivors extraction." >> "$GITHUB_STEP_SUMMARY"
          fi
      - name: Upload mutation quick report
        if: ${{ github.event_name == 'pull_request' && hashFiles('reports/mutation/mutation.json') != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: mutation-quick-report
          path: |
            reports/mutation/mutation.json
            reports/mutation/index.html
      - name: Upload mutation survivors artifact
        if: ${{ github.event_name == 'pull_request' && hashFiles('reports/mutation/survivors.json') != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: mutation-survivors-json
          path: reports/mutation/survivors.json
      - name: Upload verify-lite report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: verify-lite-report
          path: |
            artifacts/verify-lite/verify-lite-run-summary.json
            artifacts/report-envelope.json
            verify-lite-run-summary.json
            verify-lite-lint.log
            verify-lite-lint-summary.json
          if-no-files-found: ignore
      - name: Append verify-lite run summary
        if: always()
        run: |
          if [ -f verify-lite-run-summary.json ]; then
            echo '## Verify Lite Run Summary' >> "$GITHUB_STEP_SUMMARY"
            node scripts/ci/render-verify-lite-summary.mjs verify-lite-run-summary.json >> "$GITHUB_STEP_SUMMARY"
          else
            echo 'Verify Lite run summary not generated.' >> "$GITHUB_STEP_SUMMARY"
          fi
      - name: Append property harness summary
        if: always()
        run: |
          if [ -f artifacts/properties/summary.json ]; then
            echo '## Property Harness' >> "$GITHUB_STEP_SUMMARY"
            jq -r '
              "Trace ID: \(.traceId)",
              "Seed: \(.seed)",
              "Runs: \(.runs)",
              "Passed: \(.passed)",
              (if .note then "Note: \(.note)" else empty end)
            ' artifacts/properties/summary.json >> "$GITHUB_STEP_SUMMARY" || echo 'Failed to parse property summary.' >> "$GITHUB_STEP_SUMMARY"
          else
            echo 'Property harness summary not generated.' >> "$GITHUB_STEP_SUMMARY"
          fi
      - name: Append MBT summary
        if: always()
        run: |
          if [ -f artifacts/mbt/summary.json ]; then
            echo '## MBT Harness' >> "$GITHUB_STEP_SUMMARY"
            jq -r '
              "Seed: \(.seed)",
              "Runs: \(.runs)",
              "Depth: \(.depth)",
              "Violations: \(.violations)"
            ' artifacts/mbt/summary.json >> "$GITHUB_STEP_SUMMARY" || echo 'Failed to parse MBT summary.' >> "$GITHUB_STEP_SUMMARY"
          else
            echo 'MBT summary not generated.' >> "$GITHUB_STEP_SUMMARY"
          fi
      - name: Append lint summary (top rules)
        if: always()
        run: |
          if [ -f verify-lite-lint-summary.json ]; then
            echo '## Verify Lite Lint Summary' >> "$GITHUB_STEP_SUMMARY"
            # shellcheck disable=SC1009,SC1073,SC1039,SC1072
            node -e $'const fs = require("fs");\ntry {\n  const data = JSON.parse(fs.readFileSync("verify-lite-lint-summary.json","utf8"));\n  console.log("Total issues: " + data.total);\n  const top = (data.rules || []).slice(0, 5);\n  if (top.length) {\n    console.log("Top rules:");\n    for (const rule of top) {\n      console.log("- " + rule.rule + " (" + rule.count + ")");\n    }\n  }\n} catch (err) {\n  console.log("Failed to parse lint summary: " + err.message);\n}' >> "$GITHUB_STEP_SUMMARY"
          else
            echo 'Verify Lite lint summary not generated.' >> "$GITHUB_STEP_SUMMARY"
          fi
