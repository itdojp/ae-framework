name: Spec Generate & Model Tests

on:
  workflow_dispatch:
    inputs:
      kvonce_otlp_payload:
        description: 'Path to an OTLP payload file to use for KvOnce trace conformance (optional)'
        required: false
  pull_request:
    paths:
      - 'specs/**'
      - 'templates/**'
      - 'scripts/**'
      - 'docs/**'
      - 'tests/**'
      - 'artifacts/**'
      - '.github/workflows/spec-generate-model.yml'

permissions:
  contents: read
  actions: read

jobs:
  generate-artifacts:
    runs-on: ubuntu-latest
    env:
      AE_HOST_STORE: ${{ github.workspace }}/.pnpm-store
      PNPM_STORE_PATH: ${{ github.workspace }}/.pnpm-store
    steps:
      - uses: actions/checkout@v4
      - name: Prepare pnpm
        uses: ./.github/actions/setup-pnpm
      - name: Ensure pnpm cache dir
        run: mkdir -p "$AE_HOST_STORE"
      - name: Cache pnpm store
        uses: actions/cache@v4
        with:
          path: ${{ env.AE_HOST_STORE }}
          key: ${{ runner.os }}-pnpm-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-
      - uses: actions/setup-node@v4
        with:
          node-version: 22
      - name: Enable corepack
        run: corepack enable
      - name: Install dependencies
        run: |
          pnpm fetch --prefer-offline
          pnpm install --frozen-lockfile --config.confirm=false
      - name: Generate artifacts preview
        run: pnpm run generate:artifacts:preview
      - name: Check diff summary
        id: diffcheck
        run: |
          node <<'NODE'
          const fs = require('fs');
          const summaryFile = 'hermetic-reports/spec/generate-artifacts-diff.json';
          const stepSummary = process.env.GITHUB_STEP_SUMMARY;
          const appendSummary = (lines) => {
            if (!stepSummary) {
              return;
            }
            fs.appendFileSync(stepSummary, lines.join("\n") + "\n");
          };
          if (!fs.existsSync(summaryFile)) {
            console.log('No summary generated.');
            appendSummary(['## Generate Artifacts Drift', '- summary file missing']);
            process.exitCode = 1;
            return;
          }
          const summary = JSON.parse(fs.readFileSync(summaryFile, 'utf8'));
          const changed = (summary.targets || []).filter((t) => t.hasChanges);
          if (changed.length === 0) {
            const lines = ['## Generate Artifacts Drift', '- clean'];
            console.log('No generate-artifacts drift detected.');
            appendSummary(lines);
            return;
          }
          const lines = ['## Generate Artifacts Drift', `Generated at: ${summary.generatedAt || 'unknown'}`];
          console.log('Detected drift in generated artifacts:');
          for (const target of changed) {
            console.log(`- ${target.path}`);
            lines.push(`- ${target.path}: CHANGED`);
            if (Array.isArray(target.files)) {
              for (const file of target.files.slice(0, 10)) {
                console.log(`  ${file.status} ${file.file}`);
                lines.push(`  - ${file.status} ${file.file}`);
              }
              if (target.files.length > 10) {
                const more = `  - … (${target.files.length - 10} more)`;
                console.log(more.trim());
                lines.push(more);
              }
            }
          }
          appendSummary(lines);
          process.exitCode = 1;
          NODE
      - name: Upload diff summary
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: generate-artifacts-diff
          path: hermetic-reports/spec/generate-artifacts-diff.json
          if-no-files-found: warn

  model-based-tests:
    runs-on: ubuntu-latest
    needs: generate-artifacts
    env:
      AE_HOST_STORE: ${{ github.workspace }}/.pnpm-store
      PNPM_STORE_PATH: ${{ github.workspace }}/.pnpm-store
    steps:
      - uses: actions/checkout@v4
      - name: Prepare pnpm
        uses: ./.github/actions/setup-pnpm
      - name: Ensure pnpm cache dir
        run: mkdir -p "$AE_HOST_STORE"
      - name: Cache pnpm store
        uses: actions/cache@v4
        with:
          path: ${{ env.AE_HOST_STORE }}
          key: ${{ runner.os }}-pnpm-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-
      - uses: actions/setup-node@v4
        with:
          node-version: 22
      - name: Enable corepack
        run: corepack enable
      - name: Install dependencies
        run: |
          pnpm fetch --prefer-offline
          pnpm install --frozen-lockfile --config.confirm=false
      - name: Run KvOnce property suite
        run: pnpm vitest run tests/property/kvonce.safety.property.test.ts --reporter dot
      - name: Summarize model-based run
        if: always()
        run: |
          node <<'NODE'
          const fs = require('fs');
          const summary = process.env.GITHUB_STEP_SUMMARY;
          if (!summary) {
            process.exit(0);
          }
          const lines = [
            '## Model-based Tests',
            '- kvonce.safety property suite executed (see job log for details).'
          ];
          fs.appendFileSync(summary, lines.join("\n") + "\n");
          NODE

  trace-conformance:
    runs-on: ubuntu-latest
    needs: model-based-tests
    env:
      AE_HOST_STORE: ${{ github.workspace }}/.pnpm-store
      PNPM_STORE_PATH: ${{ github.workspace }}/.pnpm-store
      KVONCE_OTLP_PAYLOAD: ${{ github.event.inputs.kvonce_otlp_payload || '' }}
    steps:
      - uses: actions/checkout@v4
      - name: Prepare pnpm
        uses: ./.github/actions/setup-pnpm
      - name: Ensure pnpm cache dir
        run: mkdir -p "$AE_HOST_STORE"
      - name: Cache pnpm store
        uses: actions/cache@v4
        with:
          path: ${{ env.AE_HOST_STORE }}
          key: ${{ runner.os }}-pnpm-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-
      - uses: actions/setup-node@v4
        with:
          node-version: 22
      - name: Enable corepack
        run: corepack enable
      - name: Install dependencies
        run: |
          pnpm fetch --prefer-offline
          pnpm install --frozen-lockfile --config.confirm=false
      - name: Run KvOnce trace conformance pipeline
        run: bash ./scripts/trace/run-kvonce-conformance.sh
      - name: Summarize trace validation
        id: trace_summary
        run: |
          node <<'NODE'
          const fs = require('fs');
          const summaryPath = process.env.GITHUB_STEP_SUMMARY;
          const reportPath = 'hermetic-reports/trace/kvonce-validation.json';
          if (!fs.existsSync(reportPath)) {
            console.error('kvonce-validation.json not found');
            if (summaryPath) {
              fs.appendFileSync(summaryPath, '## KvOnce Trace Validation\n- validation file missing\n');
            }
            process.exitCode = 1;
            return;
          }
          const report = JSON.parse(fs.readFileSync(reportPath, 'utf8'));
          const issues = Array.isArray(report.issues) ? report.issues : [];
          const lines = [
            '## KvOnce Trace Validation',
            `- status: ${report.valid ? '✅ valid' : '❌ invalid'}`,
            `- issues: ${issues.length}`,
          ];
          if (issues.length > 0) {
            for (const issue of issues.slice(0, 10)) {
              const rendered = `  - [${issue.type}] ${issue.key ?? 'unknown'} :: ${issue.message ?? ''}`.trim();
              lines.push(rendered);
            }
            if (issues.length > 10) {
              lines.push(`  - … (${issues.length - 10} more)`);
            }
          }
          if (summaryPath) {
            fs.appendFileSync(summaryPath, lines.join("\n") + "\n");
          }
          const outputPath = process.env.GITHUB_OUTPUT;
          if (outputPath) {
            fs.appendFileSync(outputPath, `valid=${report.valid}\n`);
            fs.appendFileSync(outputPath, `issues=${issues.length}\n`);
          }
          if (!report.valid) {
            process.exitCode = 1;
          }
          NODE
      - name: Upload trace artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: kvonce-trace-results
          path: |
            hermetic-reports/trace/collected-kvonce-otlp.json
            hermetic-reports/trace/kvonce-events.ndjson
            hermetic-reports/trace/kvonce-projection.json
            hermetic-reports/trace/kvonce-validation.json
          if-no-files-found: warn
      - name: Update PR with trace summary
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            const marker = '<!-- kvonce-trace-summary -->';
            const reportPath = path.join(process.cwd(), 'hermetic-reports/trace/kvonce-validation.json');
            let body;
            if (fs.existsSync(reportPath)) {
              const report = JSON.parse(fs.readFileSync(reportPath, 'utf8'));
              const issues = Array.isArray(report.issues) ? report.issues : [];
              const renderedIssues = issues.slice(0, 10).map((issue) => {
                const key = issue.key ?? 'unknown';
                const type = issue.type ?? 'unknown';
                const message = issue.message ?? '';
                return `- [${type}] **${key}**: ${message}`;
              });
              if (issues.length > 10) {
                renderedIssues.push(`- … (${issues.length - 10} more)`);
              }
              body = `${marker}\n### KvOnce Trace Validation\n- 状態: ${report.valid ? '✅ 正常' : '❌ 失敗'}\n- Issues: ${issues.length}\n${renderedIssues.join('\n')}`;
            } else {
              body = `${marker}\n### KvOnce Trace Validation\n- 状態: ⚠️ 結果ファイルが生成されませんでした`;
            }

            const { owner, repo, number } = context.issue;
            const existing = await github.rest.issues.listComments({ owner, repo, issue_number: number, per_page: 100 });
            const target = existing.data.find((comment) => comment.body && comment.body.includes(marker));
            if (target) {
              await github.rest.issues.updateComment({ owner, repo, comment_id: target.id, body });
            } else {
              await github.rest.issues.createComment({ owner, repo, issue_number: number, body });
            }
