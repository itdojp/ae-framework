name: coverage-check
on:
  pull_request:
  push:
    branches: [ main ]
permissions:
  contents: read
jobs:
  gate:
    runs-on: ubuntu-latest
    outputs:
      strict: ${{ steps.gate.outputs.strict }}
      threshold: ${{ steps.th.outputs.threshold }}
    steps:
      - uses: actions/github-script@v7
        id: gate
        with:
          script: |
            const labels = (context.payload.pull_request?.labels || []).map(l=>l.name);
            let strict = labels.includes('enforce-coverage');
            // Enforce on main if repo variable COVERAGE_ENFORCE_MAIN == '1'
            const onMainPush = context.eventName === 'push' && context.ref === 'refs/heads/main';
            const enforceMain = (process.env.COVERAGE_ENFORCE_MAIN || '0') === '1';
            if (onMainPush && enforceMain) strict = true;
            core.setOutput('strict', String(strict));
        env:
          COVERAGE_ENFORCE_MAIN: ${{ vars.COVERAGE_ENFORCE_MAIN }}
      - uses: actions/github-script@v7
        id: th
        with:
          script: |
            const labels = (context.payload.pull_request?.labels || []).map(l=>l.name);
            const cov = labels.find(n => n.startsWith('coverage:'));
            const def = Number(process.env.COVERAGE_DEFAULT_THRESHOLD || 80);
            const val = cov ? Number(cov.split(':')[1]) : def;
            core.setOutput('threshold', String(isFinite(val) ? val : def));
        env:
          COVERAGE_DEFAULT_THRESHOLD: ${{ vars.COVERAGE_DEFAULT_THRESHOLD }}
  coverage:
    needs: gate
    runs-on: ubuntu-latest
    steps:
      - name: Note
        run: |
          printf "%s\n" "Coverage policy:" \
          && printf "%s\n" "- Enforce on main: ${COVERAGE_ENFORCE_MAIN:-0}" \
          && printf "%s\n" "- Default threshold: ${COVERAGE_DEFAULT_THRESHOLD:-80} (override via coverage:<pct>)" \
          && printf "%s\n" "- Derived: label > repo var > default" \
          && printf "%s\n" "- Effective threshold: ${{ needs.gate.outputs.threshold }}%" \
          && printf "%s\n" "- Policy: ${{ needs.gate.outputs.strict == 'true' && 'enforced' || 'report-only' }}"
        env:
          COVERAGE_ENFORCE_MAIN: ${{ vars.COVERAGE_ENFORCE_MAIN }}
          COVERAGE_DEFAULT_THRESHOLD: ${{ vars.COVERAGE_DEFAULT_THRESHOLD }}
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: '20' }
      - name: Enable corepack
        run: corepack enable
      - name: Install deps (pnpm)
        run: pnpm install --frozen-lockfile || pnpm install --no-frozen-lockfile
      - name: Run coverage
        run: pnpm run coverage || true
      - name: Check coverage threshold
        env:
          THRESHOLD: ${{ needs.gate.outputs.threshold }}
        run: |
          if [ -f coverage/coverage-summary.json ]; then \
            PCT=$(node -e "console.log((require('./coverage/coverage-summary.json').total.lines.pct)||0)"); \
            printf "Coverage: %s%% (threshold: %s%%)\n" "$PCT" "$THRESHOLD"; \
            awk 'BEGIN{ if ('"${PCT}"' + 0 < '"${THRESHOLD}"' + 0) exit 1 }' || { printf "%s\n" "::error::Coverage ${PCT}% below threshold ${THRESHOLD}% (see docs/quality/coverage-required.md; tips: /coverage <pct>, /enforce-coverage)"; exit 1; }; \
          else \
            printf "%s\n" "No coverage-summary.json found; skipping check"; \
          fi
        continue-on-error: ${{ needs.gate.outputs.strict != 'true' }}
      - name: Comment PR with coverage (non-blocking)
        if: github.event_name == 'pull_request'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          COVERAGE_ENFORCE_MAIN: ${{ vars.COVERAGE_ENFORCE_MAIN }}
          COVERAGE_DEFAULT_THRESHOLD: ${{ vars.COVERAGE_DEFAULT_THRESHOLD }}
        run: node scripts/coverage/pr-coverage-summary.mjs
