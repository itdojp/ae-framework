name: coverage-check
on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review, labeled]
  push:
    branches: [ main ]
permissions:
  contents: read
concurrency:
  group: coverage-check-${{ github.ref }}
  cancel-in-progress: true
jobs:
  gate:
    runs-on: ubuntu-latest
    outputs:
      strict: ${{ steps.gate.outputs.strict }}
      threshold: ${{ steps.th.outputs.threshold }}
    steps:
      - uses: actions/github-script@v7
        id: gate
        with:
          script: |
            const labels = (context.payload.pull_request?.labels || []).map(l=>l.name);
            let strict = labels.includes('enforce-coverage');
            // Enforce on main if repo variable COVERAGE_ENFORCE_MAIN == '1'
            const onMainPush = context.eventName === 'push' && context.ref === 'refs/heads/main';
            const enforceMain = (process.env.COVERAGE_ENFORCE_MAIN || '0') === '1';
            if (onMainPush && enforceMain) strict = true;
            core.setOutput('strict', String(strict));
        env:
          COVERAGE_ENFORCE_MAIN: ${{ vars.COVERAGE_ENFORCE_MAIN }}
      - uses: actions/github-script@v7
        id: th
        with:
          script: |
            const labels = (context.payload.pull_request?.labels || []).map(l=>l.name);
            const cov = labels.find(n => n.startsWith('coverage:'));
            const def = Number(process.env.COVERAGE_DEFAULT_THRESHOLD || 80);
            const val = cov ? Number(cov.split(':')[1]) : def;
            core.setOutput('threshold', String(isFinite(val) ? val : def));
        env:
          COVERAGE_DEFAULT_THRESHOLD: ${{ vars.COVERAGE_DEFAULT_THRESHOLD }}
  coverage:
    needs: gate
    runs-on: ubuntu-latest
    steps:
      - name: Note
        run: |
          printf "%s\n" "Coverage policy:" \
          && printf "%s\n" "- Enforce on main: ${COVERAGE_ENFORCE_MAIN:-0}" \
          && printf "%s\n" "- Default threshold: ${COVERAGE_DEFAULT_THRESHOLD:-80} (override via coverage:<pct>)" \
          && printf "%s\n" "- Derived: label > repo var > default" \
          && printf "%s\n" "- Effective threshold: ${{ needs.gate.outputs.threshold }}%" \
          && printf "%s\n" "- Policy: ${{ needs.gate.outputs.strict == 'true' && 'enforced' || 'report-only' }}"
        env:
          COVERAGE_ENFORCE_MAIN: ${{ vars.COVERAGE_ENFORCE_MAIN }}
          COVERAGE_DEFAULT_THRESHOLD: ${{ vars.COVERAGE_DEFAULT_THRESHOLD }}
      - name: Coverage summary (note)
        if: always()
        env:
          COVERAGE_ENFORCE_MAIN: ${{ vars.COVERAGE_ENFORCE_MAIN }}
          COVERAGE_DEFAULT_THRESHOLD: ${{ vars.COVERAGE_DEFAULT_THRESHOLD }}
        run: |
          printf "\n## 📏 Coverage (reference)\n" >> "$GITHUB_STEP_SUMMARY" || true
          printf "- Enforce on main: %s\n" "${COVERAGE_ENFORCE_MAIN:-0}" >> "$GITHUB_STEP_SUMMARY" || true
          printf "- Default threshold: %s (override via coverage:<pct>)\n" "${COVERAGE_DEFAULT_THRESHOLD:-80}" >> "$GITHUB_STEP_SUMMARY" || true
          printf "- Derived: label > repo var > default\n" >> "$GITHUB_STEP_SUMMARY" || true
          printf "- Effective threshold: %s%%\n" "${{ needs.gate.outputs.threshold }}" >> "$GITHUB_STEP_SUMMARY" || true
          printf "- Policy: %s\n" "${{ needs.gate.outputs.strict == 'true' && 'enforced' || 'report-only' }}" >> "$GITHUB_STEP_SUMMARY" || true
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: '20' }
      - name: Enable corepack
        run: corepack enable
      - name: Install deps (pnpm)
        run: pnpm install --frozen-lockfile || pnpm install --no-frozen-lockfile
      - name: Run coverage
        run: pnpm run coverage || true
      - name: Check coverage threshold
        env:
          THRESHOLD: ${{ needs.gate.outputs.threshold }}
        run: |
          if [ -f coverage/coverage-summary.json ]; then \
            PCT=$(node -e "console.log((require('./coverage/coverage-summary.json').total.lines.pct)||0)"); \
            printf "Coverage: %s%% (threshold: %s%%)\n" "$PCT" "$THRESHOLD"; \
            awk 'BEGIN{ if ('"${PCT}"' + 0 < '"${THRESHOLD}"' + 0) exit 1 }' || { printf "%s\n" "::error::Coverage ${PCT}% below threshold ${THRESHOLD}% (see docs/quality/coverage-required.md; tips: /coverage <pct>, /enforce-coverage)"; exit 1; }; \
          else \
            printf "%s\n" "No coverage-summary.json found; skipping check"; \
          fi
        continue-on-error: ${{ needs.gate.outputs.strict != 'true' }}
      - name: Comment PR with coverage (non-blocking)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        env:
          COVERAGE_ENFORCE_MAIN: ${{ vars.COVERAGE_ENFORCE_MAIN }}
          COVERAGE_DEFAULT_THRESHOLD: ${{ vars.COVERAGE_DEFAULT_THRESHOLD }}
        with:
          script: |
            const fs = require('fs');
            const summaryPath = 'coverage/coverage-summary.json';
            if (!fs.existsSync(summaryPath)) return;
            const cov = JSON.parse(fs.readFileSync(summaryPath,'utf-8'));
            const pct = cov?.total?.lines?.pct ?? 'n/a';
            const header = '<!-- AE-COVERAGE-SUMMARY -->\n';
            // Derive label override (if any)
            const labels = (context.payload.pull_request?.labels || []).map(l=>l.name);
            const covLabel = labels.find(n => typeof n === 'string' && n.startsWith('coverage:')) || null;
            const defTh = Number(process.env.COVERAGE_DEFAULT_THRESHOLD || 80);
            const effTh = `${{ needs.gate.outputs.threshold }}`;
            const strict = `${{ needs.gate.outputs.strict }}` === 'true';
            const policy = strict ? 'enforced' : 'report-only';
            let rationale = 'report-only';
            if (strict) {
              if (labels.includes('enforce-coverage')) rationale = 'enforced via label: enforce-coverage';
              else rationale = 'enforced via main + repo vars (COVERAGE_ENFORCE_MAIN)';
            }
            const lines = [];
            lines.push(`Coverage (lines): ${pct}%`);
            lines.push(`Threshold (effective): ${effTh}%`);
            if (covLabel) lines.push(`- via label: ${covLabel}`);
            lines.push(`- default: ${isFinite(defTh) ? defTh : 80}%`);
            lines.push('Derived: label > repo var > default');
            lines.push(`Policy: ${policy}`);
            lines.push(`Policy source: ${rationale}`);
            lines.push('Docs: docs/quality/coverage-required.md');
            const body = header + lines.join('\n');
            const { owner, repo, number } = context.issue;
            const comments = await github.rest.issues.listComments({ owner, repo, issue_number: number, per_page: 100 });
            const mine = comments.data.find(c => c.body && c.body.startsWith(header));
            if (mine) {
              await github.rest.issues.updateComment({ owner, repo, comment_id: mine.id, body });
            } else {
              await github.rest.issues.createComment({ owner, repo, issue_number: number, body });
            }
