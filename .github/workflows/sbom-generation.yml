name: SBOM Generation and Security Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      include_vulnerabilities:
        description: 'Include vulnerability scanning'
        required: false
        default: 'true'
        type: boolean

jobs:
  sbom-generation:
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      security-events: write
      actions: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'pnpm'
    - name: Enable corepack
      run: corepack enable
        
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
      
    - name: Build project
      run: pnpm run build
    
    - name: Bin smoke check
      run: node scripts/ci/check-bins.mjs
      
    - name: Generate SBOM (JSON format)
      run: |
        pnpm run ae-framework sbom generate \
          --format json \
          --include-dev-deps \
          ${{ github.event.inputs.include_vulnerabilities == 'true' && '--include-vulns' || '' }} \
          --output sbom.json \
          --verbose
          
    - name: Generate SBOM (XML format)
      run: |
        pnpm run ae-framework sbom generate \
          --format xml \
          --output sbom.xml \
          --verbose
          
    - name: Validate SBOM
      run: |
        pnpm run ae-framework sbom validate sbom.json --verbose
        
    - name: Compare with previous SBOM (PR only)
      if: github.event_name == 'pull_request'
      run: |
        # Download previous SBOM from main branch if available
        if gh api repos/${{ github.repository }}/actions/artifacts --paginate \
           --jq '.artifacts[] | select(.name=="sbom-files") | select(.workflow_run.head_branch=="main") | .archive_download_url' \
           | head -1 | xargs -I {} gh api {} > previous-sbom.zip 2>/dev/null; then
          unzip -q previous-sbom.zip 2>/dev/null && \
          if [[ -f "sbom.json" ]]; then
            mv sbom.json previous-sbom.json
            pnpm run ae-framework sbom compare previous-sbom.json sbom.json --verbose
          fi
        else
          echo "No previous SBOM found for comparison"
        fi
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Upload SBOM artifacts
      uses: actions/upload-artifact@v4
      with:
        name: sbom-files
        path: |
          sbom.json
          sbom.xml
        retention-days: 30
        
    - name: Upload SBOM to GitHub's dependency graph
      if: github.ref == 'refs/heads/main'
      uses: actions/upload-artifact@v4
      with:
        name: sbom-dependency-graph
        path: sbom.json
        
    # Security scanning
    - name: Run dependency audit
      run: |
        pnpm audit --audit-level=moderate --json > audit-results.json || true
        
    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      with:
        name: security-scan-results
        path: audit-results.json
        retention-days: 30
        
    # Optional: Upload to dependency tracking service
    - name: Upload to Dependency Track
      if: github.ref == 'refs/heads/main' && vars.DEPENDENCY_TRACK_URL
      env:
        DT_API_KEY: ${{ secrets.DEPENDENCY_TRACK_API_KEY }}
        DT_BASE_URL: ${{ vars.DEPENDENCY_TRACK_URL }}
        DT_PROJECT_UUID: ${{ vars.DEPENDENCY_TRACK_PROJECT_UUID }}
      run: |
        if [[ -n "$DT_API_KEY" && -n "$DT_BASE_URL" ]]; then
          echo "Uploading SBOM to Dependency Track..."
          
          # Upload to specific project if UUID is provided
          if [[ -n "$DT_PROJECT_UUID" ]]; then
            curl -X "PUT" "$DT_BASE_URL/api/v1/bom" \
              -H "X-API-Key: $DT_API_KEY" \
              -H "Content-Type: application/json" \
              -F "project=$DT_PROJECT_UUID" \
              -F "bom=@sbom.json"
          else
            # Auto-create project from SBOM metadata
            curl -X "PUT" "$DT_BASE_URL/api/v1/bom" \
              -H "X-API-Key: $DT_API_KEY" \
              -H "Content-Type: application/json" \
              -d @sbom.json
          fi
          
          echo "SBOM uploaded successfully to Dependency Track"
        else
          echo "Dependency Track credentials not configured, skipping upload"
        fi
        
  security-analysis:
    runs-on: ubuntu-latest
    needs: sbom-generation
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download SBOM artifacts
      uses: actions/download-artifact@v4
      with:
        name: sbom-files
        
    - name: Download security scan results
      uses: actions/download-artifact@v4
      with:
        name: security-scan-results
        
    # CodeQL analysis for additional security scanning
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: javascript
        
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      
    # Generate security report
    - name: Generate security report
      run: |
        echo "# Security Analysis Report" > security-report.md
        echo "" >> security-report.md
        echo "Generated on: $(date)" >> security-report.md
        echo "" >> security-report.md
        
        echo "## SBOM Summary" >> security-report.md
        if [[ -f "sbom.json" ]]; then
          echo "- SBOM format: $(jq -r '.bomFormat' sbom.json)" >> security-report.md
          echo "- Spec version: $(jq -r '.specVersion' sbom.json)" >> security-report.md
          echo "- Components: $(jq '.components | length' sbom.json)" >> security-report.md
          echo "- Dependencies: $(jq '.dependencies | length // 0' sbom.json)" >> security-report.md
          echo "" >> security-report.md
          
          echo "### Component Types" >> security-report.md
          jq -r '.components | group_by(.type) | .[] | "\(.length) \(.[0].type) components"' sbom.json >> security-report.md
          echo "" >> security-report.md
        fi
        
        echo "## Dependency Audit Results" >> security-report.md
        if [[ -f "audit-results.json" ]]; then
          if jq -e '.vulnerabilities' audit-results.json > /dev/null 2>&1; then
            echo "- Total vulnerabilities: $(jq '.metadata.vulnerabilities.total // 0' audit-results.json)" >> security-report.md
            echo "- High severity: $(jq '.metadata.vulnerabilities.high // 0' audit-results.json)" >> security-report.md
            echo "- Moderate severity: $(jq '.metadata.vulnerabilities.moderate // 0' audit-results.json)" >> security-report.md
            echo "- Low severity: $(jq '.metadata.vulnerabilities.low // 0' audit-results.json)" >> security-report.md
          else
            echo "- No vulnerabilities found" >> security-report.md
          fi
        fi
        echo "" >> security-report.md
        
        echo "## Recommendations" >> security-report.md
        echo "1. Review SBOM for unexpected dependencies" >> security-report.md
        echo "2. Update vulnerable packages to latest versions" >> security-report.md
        echo "3. Monitor for new vulnerabilities in dependencies" >> security-report.md
        echo "4. Consider using dependency scanning tools in CI/CD" >> security-report.md
        
    - name: Upload security report
      uses: actions/upload-artifact@v4
      with:
        name: security-analysis-report
        path: security-report.md
        retention-days: 30
        
    # Post security summary as PR comment (for pull requests)
    - name: Comment on PR with security summary
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          try {
            const report = fs.readFileSync('security-report.md', 'utf8');
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## ðŸ”’ Security Analysis Report\n\n${report}\n\n---\n*Generated by SBOM workflow*`
            });
          } catch (error) {
            console.log('Error posting comment:', error);
          }
          
  # Compliance and attestation (optional)
  compliance:
    runs-on: ubuntu-latest
    needs: sbom-generation
    if: github.ref == 'refs/heads/main'
    
    permissions:
      id-token: write
      contents: read
      attestations: write
    
    steps:
    - name: Download SBOM artifacts
      uses: actions/download-artifact@v4
      with:
        name: sbom-files
        
    # Generate attestation for SBOM
    - name: Generate SBOM attestation
      uses: actions/attest-build-provenance@v1
      with:
        subject-path: 'sbom.json'
        
    # Optional: Sign SBOM with Sigstore
    - name: Install Cosign
      uses: sigstore/cosign-installer@v3
      
    - name: Sign SBOM with Cosign
      env:
        COSIGN_EXPERIMENTAL: 1
      run: |
        cosign sign-blob sbom.json --output-signature sbom.json.sig --output-certificate sbom.json.crt
        
    - name: Upload signed SBOM
      uses: actions/upload-artifact@v4
      with:
        name: signed-sbom
        path: |
          sbom.json.sig
          sbom.json.crt
        retention-days: 90
