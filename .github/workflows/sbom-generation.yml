name: SBOM Generation and Security Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
    # Run SBOM only when dependency or code manifests change
    paths:
      - 'package.json'
      - 'pnpm-lock.yaml'
      - 'packages/**'
      - 'apps/**'
      - 'src/**'
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      include_vulnerabilities:
        description: 'Include vulnerability scanning'
        required: false
        default: 'true'
        type: boolean

jobs:
  sbom-generation:
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' || contains(join(fromJSON(toJSON(github.event.pull_request.labels)).*.name, ','), 'run-security')
    
    permissions:
      contents: read
      security-events: write
      actions: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Prepare pnpm
      uses: ./.github/actions/setup-pnpm

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'pnpm'
    - name: Enable corepack
      run: corepack enable
        
    - name: Install dependencies
      run: pnpm install --frozen-lockfile || pnpm install --no-frozen-lockfile
      
    - name: Build project
      run: pnpm run build
    
    - name: Bin smoke check
      run: node scripts/ci/check-bins.mjs
      
    - name: Generate SBOM (JSON format)
      run: |
        pnpm run ae-framework sbom generate \
          --format json \
          --include-dev-deps \
          ${{ github.event.inputs.include_vulnerabilities == 'true' && '--include-vulns' || '' }} \
          --output sbom.json \
          --verbose
          
    - name: Generate SBOM (XML format)
      run: |
        pnpm run ae-framework sbom generate \
          --format xml \
          --output sbom.xml \
          --verbose
          
    - name: Validate SBOM
      run: |
        pnpm run ae-framework sbom validate sbom.json --verbose
        
    - name: Compare with previous SBOM (PR only)
      if: github.event_name == 'pull_request'
      run: |
        # Download previous SBOM from main branch if available
        if gh api repos/${{ github.repository }}/actions/artifacts --paginate \
           --jq '.artifacts[] | select(.name=="sbom-files") | select(.workflow_run.head_branch=="main") | .archive_download_url' \
           | head -1 | xargs -I {} gh api {} > previous-sbom.zip 2>/dev/null; then
          unzip -q previous-sbom.zip 2>/dev/null && \
          if [[ -f "sbom.json" ]]; then
            mv sbom.json previous-sbom.json
            pnpm run ae-framework sbom compare previous-sbom.json sbom.json --verbose
          fi
        else
          printf -- "%s\n" "No previous SBOM found for comparison"
        fi
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Upload SBOM artifacts
      uses: actions/upload-artifact@v4
      with:
        name: sbom-files
        path: |
          sbom.json
          sbom.xml
        retention-days: 30
        
    - name: Upload SBOM to GitHub's dependency graph
      if: github.ref == 'refs/heads/main'
      uses: actions/upload-artifact@v4
      with:
        name: sbom-dependency-graph
        path: sbom.json
        
    # Security scanning
    - name: Run dependency audit
      run: |
        pnpm audit --audit-level=moderate --json > audit-results.json || true
        
    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      with:
        name: security-scan-results
        path: audit-results.json
        retention-days: 30
        
    # Optional: Upload to dependency tracking service
    - name: Upload to Dependency Track
      if: github.ref == 'refs/heads/main' && vars.DEPENDENCY_TRACK_URL
      env:
        DT_API_KEY: ${{ secrets.DEPENDENCY_TRACK_API_KEY }}
        DT_BASE_URL: ${{ vars.DEPENDENCY_TRACK_URL }}
        DT_PROJECT_UUID: ${{ vars.DEPENDENCY_TRACK_PROJECT_UUID }}
      run: |
        if [[ -n "$DT_API_KEY" && -n "$DT_BASE_URL" ]]; then
          printf -- "%s\n" "Uploading SBOM to Dependency Track..."
          
          # Upload to specific project if UUID is provided
          if [[ -n "$DT_PROJECT_UUID" ]]; then
            curl -X "PUT" "$DT_BASE_URL/api/v1/bom" \
              -H "X-API-Key: $DT_API_KEY" \
              -H "Content-Type: application/json" \
              -F "project=$DT_PROJECT_UUID" \
              -F "bom=@sbom.json"
          else
            # Auto-create project from SBOM metadata
            curl -X "PUT" "$DT_BASE_URL/api/v1/bom" \
              -H "X-API-Key: $DT_API_KEY" \
              -H "Content-Type: application/json" \
              -d @sbom.json
          fi
          
          printf -- "%s\n" "SBOM uploaded successfully to Dependency Track"
        else
          printf -- "%s\n" "Dependency Track credentials not configured, skipping upload"
        fi
        
  security-analysis:
    runs-on: ubuntu-latest
    continue-on-error: ${{ github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'ci-non-blocking') }}
    needs: sbom-generation
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download SBOM artifacts
      uses: actions/download-artifact@v4
      continue-on-error: true
      with:
        name: sbom-files

    - name: Download security scan results
      uses: actions/download-artifact@v4
      continue-on-error: true
      with:
        name: security-scan-results
        
    # CodeQL analysis for additional security scanning
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: javascript
        
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      
    # Generate security report
    - name: Generate security report
      run: |
        {
          printf -- "# Security Analysis Report\n"
          printf -- "\n"
          printf -- "Generated on: %s\n\n" "$(date)"
        } > security-report.md

        {
          printf -- "## SBOM Summary\n"
        } >> security-report.md
        if [[ -f "sbom.json" ]]; then
          {
            printf -- "- SBOM format: %s\n" "$(jq -r '.bomFormat' sbom.json)"
            printf -- "- Spec version: %s\n" "$(jq -r '.specVersion' sbom.json)"
            printf -- "- Components: %s\n" "$(jq '.components | length' sbom.json)"
            printf -- "- Dependencies: %s\n\n" "$(jq '.dependencies | length // 0' sbom.json)"

            printf -- "### Component Types\n"
            jq -r '.components | group_by(.type) | .[] | "\(length) \(.[0].type) components"' sbom.json
            printf -- "\n"

            # License summary (top licenses)
            printf -- "### Licenses (top)\n"
            jq -r '[.components[] | select(.licenses) | .licenses[]?.license?.name // .licenses[]?.expression] | group_by(.) | sort_by(-length) | .[] | "- \(length)x \(.[0])"' sbom.json | head -10 || true
            printf -- "\n"
          } >> security-report.md
        fi

        {
          printf -- "## Dependency Audit Results\n"
        } >> security-report.md
        if [[ -f "audit-results.json" ]]; then
          if jq -e '.vulnerabilities' audit-results.json > /dev/null 2>&1; then
            {
              printf -- "- Total vulnerabilities: %s\n" "$(jq '.metadata.vulnerabilities.total // 0' audit-results.json)"
              printf -- "- High severity: %s\n" "$(jq '.metadata.vulnerabilities.high // 0' audit-results.json)"
              printf -- "- Moderate severity: %s\n" "$(jq '.metadata.vulnerabilities.moderate // 0' audit-results.json)"
              printf -- "- Low severity: %s\n" "$(jq '.metadata.vulnerabilities.low // 0' audit-results.json)"
            } >> security-report.md
          else
            printf -- "- No vulnerabilities found\n" >> security-report.md
          fi
        fi
        printf -- "\n" >> security-report.md

        {
          printf -- "## Recommendations\n"
          printf -- "1. Review SBOM for unexpected dependencies\n"
          printf -- "2. Update vulnerable packages to latest versions\n"
          printf -- "3. Monitor for new vulnerabilities in dependencies\n"
          printf -- "4. Consider using dependency scanning tools in CI/CD\n"
        } >> security-report.md

    - name: Enforce security thresholds (optional)
      if: github.event_name == 'pull_request'
      run: |
        # Determine enforcement from labels
        ENFORCE=0
        if [ -f "$GITHUB_EVENT_PATH" ]; then
          if jq -e '.pull_request.labels[]?.name | select(.=="enforce-security")' "$GITHUB_EVENT_PATH" >/dev/null; then
            ENFORCE=1
          fi
        fi
        # Allow toggling via env
        if [ "${SECURITY_ENFORCE:-0}" = "1" ]; then ENFORCE=1; fi

        # Defaults (can be overridden by repo vars)
        MAX_HIGH=${{ vars.SECURITY_MAX_HIGH || 0 }}
        MAX_MODERATE=${{ vars.SECURITY_MAX_MODERATE || 2 }}

        if [ "$ENFORCE" = "1" ] && [ -f audit-results.json ]; then
          H=$(jq -r '.metadata.vulnerabilities.high // 0' audit-results.json)
          M=$(jq -r '.metadata.vulnerabilities.moderate // 0' audit-results.json)
          printf -- "Enforcing security thresholds: high<=%s moderate<=%s (found: high=%s moderate=%s)\n" "$MAX_HIGH" "$MAX_MODERATE" "$H" "$M"
          FAIL=0
          [ "$H" -gt "$MAX_HIGH" ] && FAIL=1
          [ "$M" -gt "$MAX_MODERATE" ] && FAIL=1
          if [ "$FAIL" = "1" ]; then
            printf -- "%s\n" "Security thresholds exceeded" >&2
            exit 1
          fi
        fi
        
    - name: Upload security report
      uses: actions/upload-artifact@v4
      with:
        name: security-analysis-report
        path: security-report.md
        retention-days: 30
        
    # Post security summary as PR comment (for pull requests)
    - name: Comment on PR with security summary
      if: github.event_name == 'pull_request' && !contains(github.event.pull_request.labels.*.name, 'run-security')
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          try {
            const report = fs.readFileSync('security-report.md', 'utf8');
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 🔒 Security Analysis Report\n\n${report}\n\n---\n*Generated by SBOM workflow*`
            });
          } catch (error) {
            console.log('Error posting comment:', error);
          }

    # Agent B: Security/Compliance 要約コメント（run-security ラベル時のみ、アップサート）
    - name: Post Security/Compliance summary (Agent B)
      if: github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'run-security')
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const header = '<!-- AE-SECURITY-SUMMARY -->';

          const readJSONSafe = (f) => {
            try {
              if (!fs.existsSync(f)) return null;
              const raw = fs.readFileSync(f, 'utf8');
              if (!raw || !raw.trim()) return null;
              return JSON.parse(raw);
            } catch (_) {
              return null;
            }
          };

          const audit = readJSONSafe('audit-results.json');
          const vuln = (audit && audit.metadata && audit.metadata.vulnerabilities) || {};
          const total = Number(vuln.total || 0);
          const high = Number(vuln.high || vuln.critical || 0);
          const moderate = Number(vuln.moderate || 0);
          const low = Number(vuln.low || 0);
          const vulnSummary = (audit && ('vulnerabilities' in (audit.metadata || {})))
            ? `- Total: ${total} (High: ${high}, Moderate: ${moderate}, Low: ${low})`
            : '- No vulnerabilities found';

          const sbom = readJSONSafe('sbom.json');
          let licenseLines = ['- No license data available'];
          if (sbom && Array.isArray(sbom.components)) {
            const freq = new Map();
            for (const c of sbom.components) {
              const ls = Array.isArray(c.licenses) ? c.licenses : [];
              for (const l of ls) {
                const key = String(l?.license?.name || l?.expression || '').trim();
                if (!key) continue;
                freq.set(key, (freq.get(key) || 0) + 1);
              }
            }
            const sorted = [...freq.entries()].sort((a,b)=>b[1]-a[1]);
            const take = Math.max(3, Math.min(5, sorted.length));
            if (take > 0) licenseLines = sorted.slice(0, take).map(([name, count]) => `- ${name}: ${count}`);
          }

          const body = [
            header,
            '## ✅ Security/Compliance Summary',
            '',
            '### Dependency Vulnerabilities',
            vulnSummary,
            '',
            '### Top Licenses (3-5)',
            ...licenseLines,
            '',
            '_This is a non-blocking summary for visibility._'
          ].join('\n');

          const { owner, repo } = context.repo;
          const issue_number = context.issue.number;
          const { data: comments } = await github.rest.issues.listComments({ owner, repo, issue_number, per_page: 100 });
          const existing = comments.find(c => typeof c.body === 'string' && c.body.startsWith(header));
          if (existing) {
            await github.rest.issues.updateComment({ owner, repo, comment_id: existing.id, body });
          } else {
            await github.rest.issues.createComment({ owner, repo, issue_number, body });
          }

    # Agent B: Post Security/Compliance summary (upsert)
    - name: Post Security/Compliance summary
      if: github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'run-security')
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          const header = '<!-- AE-SECURITY-SUMMARY -->';

          function readJSONSafe(file) {
            try {
              if (!fs.existsSync(file)) return null;
              const raw = fs.readFileSync(file, 'utf8');
              if (!raw || !raw.trim()) return null;
              return JSON.parse(raw);
            } catch (e) {
              return null;
            }
          }

          // Extract vulnerability counts from audit-results.json
          const audit = readJSONSafe('audit-results.json');
          const vuln = (audit && audit.metadata && audit.metadata.vulnerabilities) || {};
          const total = Number(vuln.total || 0);
          const high = Number(vuln.high || vuln.critical || 0); // fallback just in case
          const moderate = Number(vuln.moderate || 0);
          const low = Number(vuln.low || 0);

          let vulnSummary = '';
          if (!audit || (!('vulnerabilities' in (audit.metadata || {})) && total === 0 && high === 0 && moderate === 0 && low === 0)) {
            vulnSummary = '- No vulnerabilities found';
          } else {
            vulnSummary = `- Total: ${total} (High: ${high}, Moderate: ${moderate}, Low: ${low})`;
          }

          // Extract top licenses from SBOM components
          const sbom = readJSONSafe('sbom.json');
          let licenseLines = ['- No license data available'];
          if (sbom && Array.isArray(sbom.components)) {
            const freq = new Map();
            for (const c of sbom.components) {
              const ls = Array.isArray(c.licenses) ? c.licenses : [];
              for (const l of ls) {
                const key = String(l || '').trim();
                if (!key) continue;
                freq.set(key, (freq.get(key) || 0) + 1);
              }
            }
            const sorted = [...freq.entries()].sort((a,b)=>b[1]-a[1]).slice(0,5);
            if (sorted.length > 0) {
              licenseLines = sorted.slice(0, Math.max(3, Math.min(5, sorted.length)))
                .map(([name, count]) => `- ${name}: ${count}`);
            }
          }

          const body = `${header}\n` +
            `## ✅ Security/Compliance Summary\n\n` +
            `### Dependency Vulnerabilities\n${vulnSummary}\n\n` +
            `### Top Licenses (3-5)\n${licenseLines.join('\n')}\n\n` +
            `_This is a non-blocking summary for visibility._`;

          // Upsert a single comment identified by the header
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            per_page: 100,
          });
          const existing = comments.find(c => typeof c.body === 'string' && c.body.includes(header));
          if (existing) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: existing.id,
              body,
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body,
            });
          }
          
  # Compliance and attestation (optional)
  compliance:
    runs-on: ubuntu-latest
    needs: sbom-generation
    if: github.ref == 'refs/heads/main'
    
    permissions:
      id-token: write
      contents: read
      attestations: write
    
    steps:
    - name: Download SBOM artifacts
      uses: actions/download-artifact@v4
      with:
        name: sbom-files
        
    # Generate attestation for SBOM
    - name: Generate SBOM attestation
      uses: actions/attest-build-provenance@v1
      with:
        subject-path: 'sbom.json'
        
    # Optional: Sign SBOM with Sigstore
    - name: Install Cosign
      uses: sigstore/cosign-installer@v3
      
    - name: Sign SBOM with Cosign
      env:
        COSIGN_EXPERIMENTAL: 1
      run: |
        cosign sign-blob sbom.json --output-signature sbom.json.sig --output-certificate sbom.json.crt
        
    - name: Upload signed SBOM
      uses: actions/upload-artifact@v4
      with:
        name: signed-sbom
        path: |
          sbom.json.sig
          sbom.json.crt
        retention-days: 90
