name: Spec Validation
on:
  pull_request:
    paths: ['spec/**', '.ae/**', 'docs/**']
  push:
    branches: [main, develop]
    paths: ['spec/**', '.ae/**', 'docs/**']
  workflow_call:
    # Allow other workflows to call this validation

permissions:
  contents: read

jobs:
  spec-validation:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - uses: actions/checkout@v4
      - name: Prepare pnpm
        uses: ./.github/actions/setup-pnpm
      
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile || pnpm install --no-frozen-lockfile
      
      - name: Build spec compiler
        run: pnpm run build
      
      - name: Check for AE-Spec files
        id: check-spec
        run: |
          if [ -f "spec/ae-spec.md" ]; then
            printf "%s\n" "spec_exists=true" >> "$GITHUB_OUTPUT"
            printf "%s\n" "📄 Found AE-Spec file: spec/ae-spec.md"
          else
            printf "%s\n" "spec_exists=false" >> "$GITHUB_OUTPUT"
            printf "%s\n" "⚠️ No AE-Spec file found at spec/ae-spec.md"
          fi
      
      - name: Compile AE-Spec → AE-IR
        if: steps.check-spec.outputs.spec_exists == 'true'
        run: |
          printf "%s\n" "🔄 Compiling AE-Spec to AE-IR..."
          pnpm spec:compile --in spec/ae-spec.md --out .ae/ae-ir.json
          printf "%s\n" "✅ Compilation successful"

      - name: Generate contracts & replay fixtures (non-blocking)
        if: steps.check-spec.outputs.spec_exists == 'true'
        run: |
          node scripts/spec/generate-contracts.mjs || true
          node scripts/spec/generate-replay-fixtures.mjs || true
      
      - name: Lint AE-IR (ambiguity/undefined/conflicts)
        if: steps.check-spec.outputs.spec_exists == 'true'
        run: |
          printf "%s\n" "🔍 Linting AE-IR for quality issues..."
          pnpm spec:lint --in .ae/ae-ir.json
          printf "%s\n" "✅ Linting completed"
      
      - name: BDD step lint (non-blocking)
        if: steps.check-spec.outputs.spec_exists == 'true'
        run: |
          printf "%s\n" "🔍 BDD step lint... (non-blocking)"
          node scripts/bdd/step-lint.mjs || true
      
      - name: Validate AE-IR structure
        if: steps.check-spec.outputs.spec_exists == 'true'
        run: |
          printf "%s\n" "📋 Validating AE-IR structure..."
          if [ -f ".ae/ae-ir.json" ]; then
            # Basic JSON validation
            jq empty .ae/ae-ir.json
            
            # Check required fields
            version=$(jq -r '.version // "missing"' .ae/ae-ir.json)
            domain_count=$(jq '.domain | length' .ae/ae-ir.json)
            api_count=$(jq '.api | length' .ae/ae-ir.json)
            
            printf "%s\n" "  AE-IR Version: $version"
            printf "%s\n" "  Domain Entities: $domain_count"
            printf "%s\n" "  API Endpoints: $api_count"
            
            if [ "$version" = "missing" ]; then
              printf "%s\n" "❌ Missing required field: version"
              exit 1
            fi
            
            printf "%s\n" "✅ AE-IR structure validation passed"
          else
            printf "%s\n" "❌ AE-IR file not found"
            exit 1
          fi
      
      - name: Generate drift check report
        if: steps.check-spec.outputs.spec_exists == 'true'
        run: |
          printf "%s\n" "🔄 Checking for specification drift..."

          timestamp=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
          branch="${GITHUB_REF#refs/heads/}"
          commit="${GITHUB_SHA:0:8}"
          version=$(jq -r '.version // "missing"' .ae/ae-ir.json)
          entities=$(jq '.domain | length' .ae/ae-ir.json)
          api_endpoints=$(jq '.api | length' .ae/ae-ir.json)
          use_cases=$(jq '.usecases | length' .ae/ae-ir.json)
          invariants=$(jq '.invariants | length' .ae/ae-ir.json)

          bdd_summary=$(node <<'NODE'
            const fs = require('fs');
            const path = 'artifacts/spec/bdd-step-lint.json';
            if (!fs.existsSync(path)) {
              console.log('No lint summary');
              process.exit(0);
            }
            const data = JSON.parse(fs.readFileSync(path, 'utf8'));
            const lines = [];
            lines.push(`Usecases: ${data.usecases ?? 0}`);
            lines.push('');
            lines.push(`Issues: ${data.issuesCount ?? 0}`);
            if (Array.isArray(data.issues) && data.issues.length) {
              for (const issue of data.issues.slice(0, 10)) {
                if (!issue) continue;
                const usecase = issue.usecase ?? 'unknown';
                const kind = issue.kind ?? 'issue';
                const message = issue.message ?? '';
                lines.push(`- ${usecase}: ${kind} — ${message}`);
              }
            }
            console.log(lines.join('\n'));
          NODE
          )

          {
            printf "%s\n" "# AE-Spec Validation Report"
            printf "%s\n" ""
            printf "%s\n" "**Status**: ✅ Passed"
            printf "%s\n" "**Timestamp**: ${timestamp}"
            printf "%s\n" "**Branch**: ${branch}"
            printf "%s\n" "**Commit**: ${commit}"
            printf "%s\n" ""
            printf "%s\n" "## Validation Results"
            printf "%s\n" ""
            printf "%s\n" "- ✅ **Compilation**: AE-Spec → AE-IR successful"
            printf "%s\n" "- ✅ **Linting**: No critical issues found"
            printf "%s\n" "- ✅ **Structure**: All required fields present"
            printf "%s\n" ""
            printf "%s\n" "## AE-IR Summary"
            printf "%s\n" ""
            printf "%s\n" "- **Version**: ${version}"
            printf "%s\n" "- **Entities**: ${entities}"
            printf "%s\n" "- **API Endpoints**: ${api_endpoints}"
            printf "%s\n" "- **Use Cases**: ${use_cases}"
            printf "%s\n" "- **Invariants**: ${invariants}"
            printf "%s\n" ""
            printf "%s\n" "## BDD Step Lint (non-blocking)"
            printf "%s\n" "${bdd_summary}"
          } > spec-validation-report.md

          printf "%s\n" "📊 Validation report generated:"
          cat spec-validation-report.md
      
      - name: Upload validation artifacts
        if: steps.check-spec.outputs.spec_exists == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: spec-validation-artifacts-${{ github.run_id }}
          path: |
            .ae/ae-ir.json
            spec-validation-report.md
            artifacts/spec/bdd-step-lint.json
            artifacts/contracts/contracts-summary.json
            artifacts/domain/replay-fixtures.sample.json
          retention-days: 30
      
      - name: Post PR comment (upsert)
        if: github.event_name == 'pull_request' && steps.check-spec.outputs.spec_exists == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const header = '<!-- AE-SPEC-VALIDATION -->\n';
            const body = header + (fs.existsSync('spec-validation-report.md') ? fs.readFileSync('spec-validation-report.md','utf-8') : 'No report');
            const { owner, repo, number } = context.issue;
            const comments = await github.rest.issues.listComments({ owner, repo, issue_number: number, per_page: 100 });
            const mine = comments.data.find(c => c.body && c.body.startsWith(header));
            if (mine) {
              await github.rest.issues.updateComment({ owner, repo, comment_id: mine.id, body });
            } else {
              await github.rest.issues.createComment({ owner, repo, issue_number: number, body });
            }
      
      - name: Skip validation (no spec file)
        if: steps.check-spec.outputs.spec_exists == 'false'
        run: |
          printf "%s\n" "ℹ️ No AE-Spec file found - skipping validation"
          printf "%s\n" "To enable spec validation, create a file at: spec/ae-spec.md"
          printf "%s\n" "See documentation for AE-Spec format guidelines."
