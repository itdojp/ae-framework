name: Flake Detect
on:
  workflow_dispatch:
  schedule:
    - cron: '0 21 * * *' # JST 06:00
permissions: 
  contents: read
  issues: write
  pull-requests: write
jobs:
  run3:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: 
          node-version: '20'
          cache: 'pnpm'
      - run: corepack enable
      - run: pnpm install --frozen-lockfile || pnpm install --no-frozen-lockfile
      
      - name: Run tests multiple times
        id: flake-test
        run: |
          set -e
          fails=0
          total_runs=3
          
          echo "üîç Starting flake detection with $total_runs runs"
          
          for i in $(seq 1 $total_runs); do
            echo "üìä Run #$i of $total_runs"
            
            if pnpm run test:int; then
              echo "‚úÖ Run #$i passed"
            else
              echo "‚ùå Run #$i failed"
              fails=$((fails+1))
            fi
            
            # Brief pause between runs
            sleep 5
          done
          
          echo "FAILS=$fails" >> $GITHUB_ENV
          echo "TOTAL_RUNS=$total_runs" >> $GITHUB_ENV
          
          failure_rate=$(echo "scale=2; $fails / $total_runs * 100" | bc -l)
          echo "FAILURE_RATE=$failure_rate" >> $GITHUB_ENV
          
          echo "üìà Flake detection summary:"
          echo "   Total runs: $total_runs"
          echo "   Failures: $fails"
          echo "   Failure rate: ${failure_rate}%"
      
      - name: Create flake detection report
        run: |
          mkdir -p reports
          cat > reports/flake-detection-report.json <<EOF
          {
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "totalRuns": $TOTAL_RUNS,
            "failures": $FAILS,
            "failureRate": $FAILURE_RATE,
            "threshold": 30.0,
            "status": "$([ $(echo "$FAILURE_RATE > 30.0" | bc -l) -eq 1 ] && echo "flaky" || echo "stable")",
            "testSuite": "integration",
            "environment": "ci"
          }
          EOF
      
      - name: Check flake threshold
        id: flake-check
        run: |
          threshold=30.0
          
          if [ $(echo "$FAILURE_RATE > $threshold" | bc -l) -eq 1 ]; then
            echo "üö® Flake detected! Failure rate: ${FAILURE_RATE}% exceeds threshold: ${threshold}%"
            echo "flaky=true" >> $GITHUB_OUTPUT
          else
            echo "‚úÖ Tests stable. Failure rate: ${FAILURE_RATE}% below threshold: ${threshold}%"
            echo "flaky=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Upload flake detection report
        uses: actions/upload-artifact@v4
        with:
          name: flake-detection-report
          path: reports/flake-detection-report.json
          retention-days: 30
      
      - name: Create GitHub issue for flaky tests
        if: steps.flake-check.outputs.flaky == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const failureRate = '${{ env.FAILURE_RATE }}';
            const totalRuns = '${{ env.TOTAL_RUNS }}';
            const failures = '${{ env.FAILS }}';
            
            const title = `üîç Flaky Test Detected - Integration Tests (${failureRate}% failure rate)`;
            
            const body = `## üö® Flaky Test Detection Report
            
            **Test Suite:** Integration Tests  
            **Detection Time:** ${new Date().toISOString()}  
            **Failure Rate:** ${failureRate}% (${failures}/${totalRuns} runs failed)  
            **Threshold:** 30.0%
            
            ### üìä Test Run Results
            - **Total Runs:** ${totalRuns}
            - **Failed Runs:** ${failures}
            - **Success Runs:** ${totalRuns - failures}
            - **Failure Rate:** ${failureRate}%
            
            ### üéØ Recommended Actions
            1. **Immediate:** Isolate flaky tests to prevent CI blocking
            2. **Short-term:** Investigate test timing and resource dependencies
            3. **Long-term:** Implement test retry mechanisms or improve test stability
            
            ### üîß Investigation Steps
            - [ ] Check test logs for timing issues
            - [ ] Review resource cleanup in test teardown
            - [ ] Analyze system load during test execution
            - [ ] Consider test isolation improvements
            
            ### üìã Labels Applied
            - \`flaky-test\`: Test exhibits non-deterministic behavior
            - \`ci-stability\`: Affects continuous integration stability
            - \`priority-high\`: High priority due to CI impact
            
            **Auto-generated by Flake Detection Workflow**  
            *Workflow Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}*`;
            
            // Check if similar issue already exists
            const existingIssues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'flaky-test',
              state: 'open'
            });
            
            const duplicateIssue = existingIssues.data.find(issue => 
              issue.title.includes('Integration Tests') && 
              issue.title.includes('Flaky Test Detected')
            );
            
            if (duplicateIssue) {
              console.log(`Updating existing issue #${duplicateIssue.number}`);
              
              const updateBody = `${duplicateIssue.body}
              
              ---
              
              ## üîÑ Recent Detection - ${new Date().toISOString()}
              **Failure Rate:** ${failureRate}% (${failures}/${totalRuns} runs failed)`;
              
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: duplicateIssue.number,
                body: updateBody
              });
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: duplicateIssue.number,
                body: `üö® **Flake still detected** - ${failureRate}% failure rate in latest run`
              });
              
            } else {
              console.log('Creating new flaky test issue');
              
              const issue = await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                labels: ['flaky-test', 'ci-stability', 'priority-high', 'automated']
              });
              
              console.log(`Created issue #${issue.data.number}`);
            }
      
      - name: Report final status
        run: |
          if [ "${{ steps.flake-check.outputs.flaky }}" = "true" ]; then
            echo "‚ùå Flake detection workflow completed - FLAKY TESTS DETECTED"
            echo "Failure rate: ${FAILURE_RATE}% exceeds threshold"
            exit 1
          else
            echo "‚úÖ Flake detection workflow completed - Tests are STABLE"
            echo "Failure rate: ${FAILURE_RATE}% below threshold"
          fi
