name: pr-summary-comment
on:
  pull_request:
    types: [opened, synchronize, reopened]
permissions:
  contents: read
  pull-requests: write
jobs:
  summarize:
    runs-on: ubuntu-latest
      - name: Determine summary mode
        id: mode
        uses: actions/github-script@v7
        with:
          script: |
            const labels = (context.payload.pull_request?.labels || []).map(l=>l.name);
            const detailed = labels.includes("pr-summary:detailed");
            core.setOutput("mode", detailed ? "detailed" : "digest");
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: '20' }
      - run: npm ci
      - name: Aggregate artifacts if present
        run: |
          if npm run -s | grep -q "artifacts:aggregate"; then npm run artifacts:aggregate || true; fi
      - name: Generate Markdown summary
        env:
          SUMMARY_MODE: ${{ steps.mode.outputs.mode }}
        run: |
          if [ -f scripts/summary/render-pr-summary.mjs ]; then node scripts/summary/render-pr-summary.mjs; else echo "No renderer; keeping inline"; fi
        run: |
          if [ -f scripts/summary/render-pr-summary.mjs ]; then node scripts/summary/render-pr-summary.mjs; else echo "No renderer; keeping inline"; fi
        id: gen
        run: |
          node -e '
          const fs=require("fs");
          function r(p){ try { return JSON.parse(fs.readFileSync(p,"utf-8")); } catch { return undefined; } }
          const c = r("artifacts/summary/combined.json") || {};
          const adapters=(c.adapters||[]).map(a=>`  - ${a.adapter||a.name}: ${a.summary} (${a.status})`).join("\n");
          const formalObj = c.formal || r("formal/summary.json") || {};
          const formal = formalObj.result || "n/a";
          const replay = c.replay || r("artifacts/domain/replay.summary.json") || {};
          const props = c.properties ? (Array.isArray(c.properties) ? c.properties : [c.properties]) : (r("artifacts/properties/summary.json") ? [r("artifacts/properties/summary.json")] : []);
          const traceIds = new Set();
          for (const a of c.adapters||[]) if (a?.traceId) traceIds.add(a.traceId);
          if (formalObj?.traceId) traceIds.add(formalObj.traceId);
          if (replay?.traceId) traceIds.add(replay.traceId);
          for (const p of props) if (p?.traceId) traceIds.add(p.traceId);
          const replayLine = replay.totalEvents!==undefined ? `Replay: ${replay.totalEvents} events, ${(replay.violatedInvariants||[]).length} violations` : "Replay: n/a";
          const md = `## Quality Summary\n- Adapters:\n${adapters}\n- Formal: ${formal}\n- ${replayLine}\n- Trace IDs: ${Array.from(traceIds).join(', ')}`;
          fs.mkdirSync("artifacts/summary",{recursive:true});
          fs.writeFileSync("artifacts/summary/PR_SUMMARY.md", md);
          console.log(md);
          '
      - name: Post or update PR comment
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const body = fs.readFileSync('artifacts/summary/PR_SUMMARY.md','utf-8');
            const header = '<!-- AE-PR-SUMMARY -->\n' + body;
            const { owner, repo, number } = context.issue;
            const comments = await github.rest.issues.listComments({ owner, repo, issue_number: number, per_page: 100 });
            const mine = comments.data.find(c => c.body && c.body.startsWith('<!-- AE-PR-SUMMARY -->'));
            if (mine) {
              await github.rest.issues.updateComment({ owner, repo, comment_id: mine.id, body: header });
            } else {
              await github.rest.issues.createComment({ owner, repo, issue_number: number, body: header });
            }
