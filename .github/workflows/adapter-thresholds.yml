name: Adapter Thresholds (Report-Only)

on:
  pull_request:

permissions: read-all

jobs:
  summarize-a11y:
    if: contains(github.event.pull_request.labels.*.name, 'run-adapters')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Summarize a11y results (report-only)
        id: a11y
        run: |
          set -e
          FILE="reports/a11y-results.json"
          if [ ! -f "$FILE" ]; then
            printf "%s\n" "present=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          critical=$(jq -r '.violations.critical // 0' "$FILE" 2>/dev/null || printf "0\n")
          serious=$(jq -r '.violations.serious // 0' "$FILE" 2>/dev/null || printf "0\n")
          moderate=$(jq -r '.violations.moderate // 0' "$FILE" 2>/dev/null || printf "0\n")
          minor=$(jq -r '.violations.minor // 0' "$FILE" 2>/dev/null || printf "0\n")
          passes=$(jq -r '.passes // 0' "$FILE" 2>/dev/null || printf "0\n")
          comps=$(jq -r '.components_tested | length' "$FILE" 2>/dev/null || printf "0\n")
          printf "%s\n" "present=true" >> "$GITHUB_OUTPUT"
          printf "%s\n" "critical=$critical" >> "$GITHUB_OUTPUT"
          printf "%s\n" "serious=$serious" >> "$GITHUB_OUTPUT"
          printf "%s\n" "moderate=$moderate" >> "$GITHUB_OUTPUT"
          printf "%s\n" "minor=$minor" >> "$GITHUB_OUTPUT"
          printf "%s\n" "passes=$passes" >> "$GITHUB_OUTPUT"
          printf "%s\n" "components=$comps" >> "$GITHUB_OUTPUT"
      - name: Comment PR with a11y summary
        if: steps.a11y.outputs.present == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const header = '<!-- AE-ADAPTER-A11Y -->\n';
            const body = [
              header,
              '### Accessibility',
              '',
              `Violations: critical=${{ steps.a11y.outputs.critical }}, serious=${{ steps.a11y.outputs.serious }}, moderate=${{ steps.a11y.outputs.moderate }}, minor=${{ steps.a11y.outputs.minor }}`,
              `Passes: ${{ steps.a11y.outputs.passes }}, Components tested: ${{ steps.a11y.outputs.components }}`,
              '',
              `${{ contains(github.event.pull_request.labels.*.name, 'enforce-a11y') && 'Policy: enforced (label: enforce-a11y); Threshold: critical=0, serious=0' || 'Policy: report-only; Threshold: critical=0, serious=0' }}`,
              'Docs: docs/quality/adapter-thresholds.md'
            ].join('\n');
            const { owner, repo, number } = context.issue;
            const comments = await github.rest.issues.listComments({ owner, repo, issue_number: number, per_page: 100 });
            const mine = comments.data.find(c => c.body && c.body.startsWith(header));
            if (mine) {
              await github.rest.issues.updateComment({ owner, repo, comment_id: mine.id, body });
            } else {
              await github.rest.issues.createComment({ owner, repo, issue_number: number, body });
            }
      - name: Enforce a11y thresholds (critical/serious==0)
        if: steps.a11y.outputs.present == 'true' && contains(github.event.pull_request.labels.*.name, 'enforce-a11y')
        run: |
          crit=${{ steps.a11y.outputs.critical }}
          seri=${{ steps.a11y.outputs.serious }}
          if [ "$crit" -gt 0 ] || [ "$seri" -gt 0 ]; then
            printf "%s\n" "::error::a11y violations exceed threshold (critical=$crit, serious=$seri)"
            exit 1
          fi

  summarize-perf:
    if: contains(github.event.pull_request.labels.*.name, 'run-adapters')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Summarize perf results (report-only)
        id: perf
        run: |
          set -e
          FILE="reports/perf-results.json"
          if [ ! -f "$FILE" ]; then
            printf "%s\n" "present=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          score=$(jq -r '.score // .performance // .lighthouse.performance // empty' "$FILE" 2>/dev/null || printf "\n")
          [ -z "$score" ] && score=$(jq -r '.metrics.score // empty' "$FILE" 2>/dev/null || printf "\n")
          # Normalize to number 0..100 if possible
          if printf '%s\n' "$score" | rg -q '^[0-9]+(\.[0-9]+)?$'; then :; else score=""; fi
          printf "%s\n" "present=true" >> "$GITHUB_OUTPUT"
          printf "%s\n" "score=${score:-}" >> "$GITHUB_OUTPUT"
      - name: Comment PR with perf summary
        if: steps.perf.outputs.present == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const header = '<!-- AE-ADAPTER-PERF -->\n';
            const score = '${{ steps.perf.outputs.score }}' || 'n/a';
            const enforced = ${{ contains(github.event.pull_request.labels.*.name, 'enforce-perf') && 'true' || 'false' }};
            const labels = context.payload.pull_request.labels.map(l=>l.name);
            const perfLbl = labels.find(n=>/^perf:\\d{1,3}$/.test(n));
            const threshold = perfLbl ? Number(perfLbl.split(':')[1]) : (Number(process.env.PERF_DEFAULT_THRESHOLD||75));
            const body = [
              header,
              '### Performance (report-only)',
              '',
              `Score: ${score}`,
              `Policy: ${enforced==='true' ? 'enforced (label: enforce-perf)' : 'report-only'}; Threshold: ${threshold}%`,
              '',
              'Docs: docs/quality/adapter-thresholds.md'
            ].join('\n');
            const { owner, repo, number } = context.issue;
            const comments = await github.rest.issues.listComments({ owner, repo, issue_number: number, per_page: 100 });
            const mine = comments.data.find(c => c.body && c.body.startsWith(header));
            if (mine) {
              await github.rest.issues.updateComment({ owner, repo, comment_id: mine.id, body });
            } else {
              await github.rest.issues.createComment({ owner, repo, issue_number: number, body });
            }
        env:
          PERF_DEFAULT_THRESHOLD: ${{ vars.PERF_DEFAULT_THRESHOLD }}
      - name: Enforce perf threshold
        if: steps.perf.outputs.present == 'true' && contains(github.event.pull_request.labels.*.name, 'enforce-perf')
        run: |
          score='${{ steps.perf.outputs.score }}'
          thresh='${{ vars.PERF_DEFAULT_THRESHOLD }}'
          # label perf:<n> overrides
          lbl=$(jq -r '.pull_request.labels[]?.name | select(test("^perf:[0-9]{1,3}$"))' "$GITHUB_EVENT_PATH" | head -1 || true)
          if [ -n "$lbl" ]; then thresh=${lbl#perf:}; fi
          if [ -z "$score" ]; then
            printf "%s\n" "::error::perf score not found in reports/perf-results.json"
            exit 1
          fi
          awk 'BEGIN{ if ('"${score}"' + 0 < '"${thresh}"' + 0) exit 1 }' || { printf "%s\n" "::error::perf score ${score}% below threshold ${thresh}%"; exit 1; }

  summarize-lh:
    if: contains(github.event.pull_request.labels.*.name, 'run-adapters')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Summarize Lighthouse results (report-only)
        id: lh
        run: |
          set -e
          FILE=""
          for f in reports/lighthouse-results.json reports/lh-results.json; do
            if [ -f "$f" ]; then FILE="$f"; break; fi
          done
          if [ -z "$FILE" ]; then
            printf "%s\n" "present=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          # Try multiple paths: categories.performance.score (0..1) or .performance (0..100)
          raw=$(jq -r '.categories.performance.score // .performance // .score // empty' "$FILE" 2>/dev/null || printf "\n")
          score=""
          if [ -n "$raw" ]; then
            if printf '%s\n' "$raw" | rg -q '^[0-1](\.[0-9]+)?$'; then
              # normalize 0..1 -> 0..100
              score=$(awk 'BEGIN{printf "%d", ('"$raw"')*100}')
            elif printf '%s\n' "$raw" | rg -q '^[0-9]+(\.[0-9]+)?$'; then
              score=$(printf "%s\n" "$raw" | cut -d. -f1)
            fi
          fi
          printf "%s\n" "present=true" >> "$GITHUB_OUTPUT"
          printf "%s\n" "score=${score:-}" >> "$GITHUB_OUTPUT"
      - name: Comment PR with Lighthouse summary
        if: steps.lh.outputs.present == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const header = '<!-- AE-ADAPTER-LH -->\n';
            const score = '${{ steps.lh.outputs.score }}' || 'n/a';
            const enforced = ${{ contains(github.event.pull_request.labels.*.name, 'enforce-lh') && 'true' || 'false' }};
            const labels = context.payload.pull_request.labels.map(l=>l.name);
            const lhLbl = labels.find(n=>/^lh:\\d{1,3}$/.test(n));
            const threshold = lhLbl ? Number(lhLbl.split(':')[1]) : (Number(process.env.LH_DEFAULT_THRESHOLD||80));
            const body = [
              header,
              '### Lighthouse Performance (report-only)',
              '',
              `Score: ${score}`,
              `Policy: ${enforced==='true' ? 'enforced (label: enforce-lh)' : 'report-only'}; Threshold: ${threshold}%`,
              '',
              'Docs: docs/quality/adapter-thresholds.md'
            ].join('\n');
            const { owner, repo, number } = context.issue;
            const comments = await github.rest.issues.listComments({ owner, repo, issue_number: number, per_page: 100 });
            const mine = comments.data.find(c => c.body && c.body.startsWith(header));
            if (mine) {
              await github.rest.issues.updateComment({ owner, repo, comment_id: mine.id, body });
            } else {
              await github.rest.issues.createComment({ owner, repo, issue_number: number, body });
            }
        env:
          LH_DEFAULT_THRESHOLD: ${{ vars.LH_DEFAULT_THRESHOLD }}
      - name: Enforce Lighthouse threshold
        if: steps.lh.outputs.present == 'true' && contains(github.event.pull_request.labels.*.name, 'enforce-lh')
        run: |
          score='${{ steps.lh.outputs.score }}'
          thresh='${{ vars.LH_DEFAULT_THRESHOLD }}'
          lbl=$(jq -r '.pull_request.labels[]?.name | select(test("^lh:[0-9]{1,3}$"))' "$GITHUB_EVENT_PATH" | head -1 || true)
          if [ -n "$lbl" ]; then thresh=${lbl#lh:}; fi
          if [ -z "$score" ]; then
            printf "%s\n" "::error::lighthouse score not found in results file"
            exit 1
          fi
          awk 'BEGIN{ if ('"${score}"' + 0 < '"${thresh}"' + 0) exit 1 }' || { printf "%s\n" "::error::lighthouse score ${score}% below threshold ${thresh}%"; exit 1; }
