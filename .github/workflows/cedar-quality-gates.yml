name: Cedar Policies Quality Gates

on:
  pull_request:
  push:
    branches: [main]
    tags: ['v*']
  workflow_dispatch:

permissions: read-all

jobs:
  cedar-validate:
    if: contains(github.event.pull_request.labels.*.name, 'run-security') || contains(github.event.pull_request.labels.*.name, 'run-cedar')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Validate Cedar policies (non-blocking)
        id: cedar
        run: |
          set -e
          node scripts/policies/validate-cedar.mjs || true
          FILE="artifacts/policies/cedar-summary.json"
          if [ -f "$FILE" ]; then
            ok=$(jq -r '.okCount // 0' "$FILE" 2>/dev/null || printf "0\n")
            ng=$(jq -r '.ngCount // 0' "$FILE" 2>/dev/null || printf "0\n")
            files=$(jq -r '.filesScanned // 0' "$FILE" 2>/dev/null || printf "0\n")
            {
              printf "%s\n" "files=$files"
              printf "%s\n" "ok=$ok"
              printf "%s\n" "ng=$ng"
            } >> "$GITHUB_OUTPUT"
          else
            {
              printf "%s\n" "files=0"
              printf "%s\n" "ok=0"
              printf "%s\n" "ng=0"
            } >> "$GITHUB_OUTPUT"
          fi
      - name: Upload cedar summary
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cedar-summary
          path: artifacts/policies/cedar-summary.json
      - name: Comment PR with cedar summary
        if: always() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const header = '<!-- AE-CEDAR-SUMMARY -->\n';
            const exists = fs.existsSync('artifacts/policies/cedar-summary.json');
            let body = header + '### Cedar Policies (report-only)\n\n';
            if (exists) {
              const j = JSON.parse(fs.readFileSync('artifacts/policies/cedar-summary.json','utf-8'));
              body += `Files: ${j.filesScanned} (json=${j.jsonFiles}, cedar=${j.cedarFiles})\n`;
              body += `Results: ok=${j.okCount}, ng=${j.ngCount}\n`;
              body += `Tool: ${j.tool}\n`;
            } else {
              body += 'No cedar files found (policies/cedar).\n';
            }
            body += '\nPolicy: report-only';
            body += '\nDocs: docs/quality/cedar-quality-gates.md';
            const { owner, repo, number } = context.issue;
            const comments = await github.rest.issues.listComments({ owner, repo, issue_number: number, per_page: 100 });
            const mine = comments.data.find(c => c.body && c.body.startsWith(header));
            if (mine) {
              await github.rest.issues.updateComment({ owner, repo, comment_id: mine.id, body });
            } else {
              await github.rest.issues.createComment({ owner, repo, issue_number: number, body });
            }
      - name: Enforce cedar (errors==0)
        if: (steps.cedar.outputs.ng != '' && steps.cedar.outputs.ng != '0') && contains(github.event.pull_request.labels.*.name, 'enforce-security')
        run: |
          printf "%s\n" "::error::Cedar validation found NG=${{ steps.cedar.outputs.ng }} (enforce-security)"; exit 1
