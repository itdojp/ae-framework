name: PR Verify

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]

concurrency:
  group: pr-verify-${{ github.ref }}
  cancel-in-progress: true

jobs:
  verify:
    runs-on: ubuntu-latest
    continue-on-error: ${{ github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'ci-non-blocking') }}
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Enable corepack
        run: corepack enable

      - name: Install
        run: pnpm install --frozen-lockfile
      
      - name: Build
        run: pnpm run build

      - name: CodeX quickstart smoke
        run: pnpm run codex:quickstart
        env:
          AE_TYPES_STRICT: "1"
          CODEX_RUN_FORMAL: "1"
          CODEX_SKIP_QUALITY: "1"   # keep informative but non-blocking
          CODEX_TOLERANT: "1"       # force success regardless of phase results
      - name: Upload CodeX quickstart summary
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: codex-quickstart-summary
          path: artifacts/codex-quickstart-summary.md
      - name: Upload CodeX JSON artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: codex-json-artifacts
          path: artifacts/codex/*.json
      - name: Upload formal TLA+ (if generated)
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: codex-formal-tla
          path: artifacts/codex/formal.tla
      - name: Show TLA+ head (if present)
        if: always()
        run: |
          if [ -f artifacts/codex/formal.tla ]; then
            echo '--- TLA+ (head) ---'
            sed -n '1,80p' artifacts/codex/formal.tla || true
            echo '---'
          else
            echo 'No formal.tla found.'
          fi
      - name: Upload OpenAPI (if generated)
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: codex-openapi
          path: artifacts/codex/openapi.yaml

      - name: Upload model checking (if generated)
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: codex-model-check
          path: artifacts/codex/model-check.json
      - name: Show model checking summary (if present)
        if: always()
        run: |
          if [ -f artifacts/codex/model-check.json ]; then
            node -e "const mc=require('./artifacts/codex/model-check.json'); console.log('Properties:', mc.properties?.length||0); const unsat=(mc.properties||[]).filter(p=>p && p.satisfied===false).length; console.log('Unsatisfied:', unsat);"
          else
            echo 'No model-check.json found.'
          fi
      - name: Show UI summary (if present)
        if: always()
        run: |
          if [ -f artifacts/codex/ui-summary.json ]; then
            node -e "const s=require('./artifacts/codex/ui-summary.json'); console.log('UI Entities:', s.okEntities,'/',s.totalEntities,'Files:', (s.files||[]).length, 'Dry-run:', !!s.dryRun);"
          else
            echo 'No ui-summary.json found.'
          fi
      - name: Show contract/E2E templates summary (if present)
        if: always()
        run: |
          if [ -f artifacts/codex/openapi-contract-tests.json ]; then
            node -e "const s=require('./artifacts/codex/openapi-contract-tests.json'); console.log('Contract/E2E templates:', s.files, 'dir:', s.outDir);"
          else
            echo 'No openapi-contract-tests.json found.'
          fi

      - name: Comment summary on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let lines = [];
            // Model check
            try {
              if (fs.existsSync('artifacts/codex/model-check.json')) {
                const mc = JSON.parse(fs.readFileSync('artifacts/codex/model-check.json','utf8'));
                const props = (mc.properties || []).length;
                const unsat = (mc.properties || []).filter(p => p && p.satisfied === false).length;
                lines.push(`â€¢ Model Checking: ${props} properties, Unsatisfied: ${unsat}`);
              }
            } catch {}
            // UI summary
            try {
              if (fs.existsSync('artifacts/codex/ui-summary.json')) {
                const s = JSON.parse(fs.readFileSync('artifacts/codex/ui-summary.json','utf8'));
                let files = s.files || [];
                const preview = files.slice(0, 5).map(f => `    - ${f}`).join('\\n');
                lines.push(`â€¢ UI Scaffold: ${s.okEntities}/${s.totalEntities} entities, Files: ${files.length}, Dry-run: ${!!s.dryRun}`);
                if (files.length) lines.push('  Preview files (up to 5):\\n' + preview);
              }
            } catch {}
            // Stories summary
            try {
              if (fs.existsSync('artifacts/codex/result-stories.json')) {
                const rs = JSON.parse(fs.readFileSync('artifacts/codex/result-stories.json','utf8'));
                const sum = (rs.response && rs.response.summary) || '';
                const mStories = sum.match(/(\d+)\s+stor/i);
                const mEpics = sum.match(/(\d+)\s+epic/i);
                const parts = [];
                parts.push(mStories ? `${mStories[1]} stories` : 'stories: n/a');
                if (mEpics) parts.push(`${mEpics[1]} epics`);
                lines.push(`â€¢ Stories: ${parts.join(', ')}`);
              }
            } catch {}
            // Validation summary
            try {
              if (fs.existsSync('artifacts/codex/result-validation.json')) {
                const rv = JSON.parse(fs.readFileSync('artifacts/codex/result-validation.json','utf8'));
                const sum = (rv.response && rv.response.summary) || 'Validation';
                const analysis = (rv.response && rv.response.analysis) || '';
                const mCov = analysis.match(/Coverage:\s*(\d+)%/i);
                const covText = mCov ? `, Coverage: ${mCov[1]}%` : '';
                lines.push(`â€¢ Validation: ${sum}${covText}`);
              }
            } catch {}
            // Intent summary
            try {
              if (fs.existsSync('artifacts/codex/result-intent.json')) {
                const ri = JSON.parse(fs.readFileSync('artifacts/codex/result-intent.json','utf8'));
                const sum = (ri.response && ri.response.summary) || '';
                const mReq = sum.match(/(\d+)\s+requirement/i);
                const reqText = mReq ? `${mReq[1]} requirements` : 'requirements: n/a';
                lines.push(`â€¢ Intent: ${reqText}`);
              }
            } catch {}
            // Formal/OpenAPI presence
            const hasTla = fs.existsSync('artifacts/codex/formal.tla');
            const hasOas = fs.existsSync('artifacts/codex/openapi.yaml');
            if (hasTla) lines.push('â€¢ Formal: TLA+ generated (artifacts/codex/formal.tla)');
            if (hasOas) lines.push('â€¢ OpenAPI: artifacts/codex/openapi.yaml');
            // Contract/E2E templates
            try {
              if (fs.existsSync('artifacts/codex/openapi-contract-tests.json')) {
                const s = JSON.parse(fs.readFileSync('artifacts/codex/openapi-contract-tests.json','utf8'));
                lines.push(`â€¢ Contract/E2E templates: ${s.files} files (dir: ${s.outDir})`);
              }
            } catch {}
            if (lines.length === 0) {
              lines.push('No CodeX artifacts found to summarize.');
            }
            const body = `### CodeX Artifacts Summary\n\n${lines.map(l=>`- ${l}`).join('\n')}\n`;
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body
            });
      - name: Show CodeX summary (head)
        if: always()
        run: |
          if [ -f artifacts/codex-quickstart-summary.md ]; then
            echo '--- CodeX Quickstart Summary (head) ---'
            sed -n '1,60p' artifacts/codex-quickstart-summary.md || true
            echo '---'
          else
            echo 'No codex-quickstart summary found.'
          fi

      - name: Bin smoke check
        run: node scripts/ci/check-bins.mjs

      - name: Verify
        run: node dist/src/cli/index.js verify
        env:
          AE_TYPES_STRICT: "1"
      
      - name: LLM replay smoke
        run: AE_RECORDER_MODE=replay node dist/src/cli/index.js agent:complete --prompt "Hello, ae!"
      
      - name: Upload artifacts (14 days)
        uses: actions/upload-artifact@v4
        with:
          name: ae-artifacts
          path: artifacts/
          retention-days: 14
      
      - name: Notify Slack on failure
        if: failure() && env.SLACK_WEBHOOK != null
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_MESSAGE: |
            ðŸš¨ ${{ github.workflow }} failed on ${{ github.ref }}
            â€¢ run: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
            â€¢ artifacts: (see workflow page)
          SLACK_COLOR: "#E01E5A"

  flake-optin:
    if: contains(join(fromJSON(toJSON(github.event.pull_request.labels)).*.name, ','), 'run-flake')
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Enable corepack
        run: corepack enable

      - name: Install
        run: pnpm install --frozen-lockfile
      
      - name: Build
        run: pnpm run build
      
      - name: Flake (opt-in)
        run: node dist/src/cli/index.js qa:flake --times 20 --timeoutMs 240000 --workers 50% --pattern "tests/**/*.test.ts"
