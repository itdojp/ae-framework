name: PR Verify

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
  push:
    tags: ['v*']

concurrency:
  group: pr-verify-${{ github.ref }}
  cancel-in-progress: true

jobs:
  verify:
    runs-on: ubuntu-latest
    env:
      AE_HOST_STORE: ${{ github.workspace }}/.pnpm-store
      PNPM_STORE_PATH: ${{ github.workspace }}/.pnpm-store
    continue-on-error: ${{ github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'ci-non-blocking') }}
    steps:
      - uses: actions/checkout@v4
      - name: Prepare pnpm
        uses: ./.github/actions/setup-pnpm
      - name: Ensure pnpm cache dir
        run: mkdir -p "$AE_HOST_STORE"
      - name: Cache pnpm store
        uses: actions/cache@v4
        with:
          path: ${{ env.AE_HOST_STORE }}
          key: ${{ runner.os }}-pnpm-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-
      
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Enable corepack
        run: corepack enable

      - name: Install
        run: |
          pnpm fetch --prefer-offline
          pnpm install --frozen-lockfile || pnpm install --no-frozen-lockfile --prefer-offline
      
      - name: Build
        run: pnpm run build

      - name: CodeX quickstart smoke
        run: pnpm run codex:quickstart
        env:
          AE_TYPES_STRICT: "1"
          CODEX_RUN_FORMAL: "1"
          CODEX_SKIP_QUALITY: "1"   # keep informative but non-blocking
          CODEX_TOLERANT: "1"       # force success regardless of phase results
      - name: Upload CodeX quickstart summary
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: codex-quickstart-summary
          path: artifacts/codex-quickstart-summary.md
      - name: Upload CodeX JSON artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: codex-json-artifacts
          path: artifacts/codex/*.json
      - name: Upload formal TLA+ (if generated)
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: codex-formal-tla
          path: artifacts/codex/formal.tla
      - name: Show TLA+ head (if present)
        if: always()
        run: |
          if [ -f artifacts/codex/formal.tla ]; then
            printf "%s\n" "--- TLA+ (head) ---"
            sed -n '1,80p' artifacts/codex/formal.tla || true
            printf "%s\n" "---"
          else
            printf "%s\n" "No formal.tla found."
          fi
      - name: Upload OpenAPI (if generated)
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: codex-openapi
          path: artifacts/codex/openapi.yaml

      - name: Upload model checking (if generated)
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: codex-model-check
          path: artifacts/codex/model-check.json
      - name: Show model checking summary (if present)
        if: always()
        run: |
          if [ -f artifacts/codex/model-check.json ]; then
            node -e "const mc=require('./artifacts/codex/model-check.json'); console.log('Properties:', mc.properties?.length||0); const unsat=(mc.properties||[]).filter(p=>p && p.satisfied===false).length; console.log('Unsatisfied:', unsat);"
          else
            printf "%s\n" "No model-check.json found."
          fi
      - name: Show UI summary (if present)
        if: always()
        run: |
          if [ -f artifacts/codex/ui-summary.json ]; then
            node -e "const s=require('./artifacts/codex/ui-summary.json'); console.log('UI Entities:', s.okEntities,'/',s.totalEntities,'Files:', (s.files||[]).length, 'Dry-run:', !!s.dryRun);"
          else
            printf "%s\n" "No ui-summary.json found."
          fi
      - name: Show contract/E2E templates summary (if present)
        if: always()
        run: |
          if [ -f artifacts/codex/openapi-contract-tests.json ]; then
            node -e "const s=require('./artifacts/codex/openapi-contract-tests.json'); console.log('Contract/E2E templates:', s.files, 'dir:', s.outDir);"
          else
            printf "%s\n" "No openapi-contract-tests.json found."
          fi

      - name: Generate CodeX summary
        run: |
          node scripts/verify/render-codex-summary.mjs || true

      - name: Comment summary on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            if (!fs.existsSync('codex-summary.md')) {
              core.info('codex-summary.md not found; skipping CodeX comment');
              return;
            }
            const body = fs.readFileSync('codex-summary.md', 'utf8');
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body
            });
      - name: Show CodeX summary (head)
        if: always()
        run: |
          if [ -f artifacts/codex-quickstart-summary.md ]; then
            printf "%s\n" "--- CodeX Quickstart Summary (head) ---"
            sed -n '1,60p' artifacts/codex-quickstart-summary.md || true
            printf "%s\n" "---"
          else
            printf "%s\n" "No codex-quickstart summary found."
          fi

      - name: Ensure CLI executables
        run: pnpm run build:cli || true

      - name: Bin smoke check
        run: node scripts/ci/check-bins.mjs

      - name: Verify
        run: node dist/src/cli/index.js --help
        env:
          AE_TYPES_STRICT: "1"
      
      - name: LLM replay smoke
        run: AE_RECORDER_MODE=replay node dist/src/cli/index.js agent:complete --prompt "Hello, ae!" || true
      
      - name: Upload artifacts (14 days)
        uses: actions/upload-artifact@v4
        with:
          name: ae-artifacts
          path: artifacts/
          retention-days: 14
      
      - name: Notify Slack on failure
        if: failure() && env.SLACK_WEBHOOK != null
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_MESSAGE: |
            ðŸš¨ ${{ github.workflow }} failed on ${{ github.ref }}
            â€¢ run: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
            â€¢ artifacts: (see workflow page)
          SLACK_COLOR: "#E01E5A"

  flake-optin:
    if: contains(join(fromJSON(toJSON(github.event.pull_request.labels)).*.name, ','), 'run-flake')
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4
      - name: Prepare pnpm
        uses: ./.github/actions/setup-pnpm
      
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Enable corepack
        run: corepack enable

      - name: Install
        run: pnpm install --frozen-lockfile
      
      - name: Build
        run: pnpm run build
      
      - name: Flake (opt-in)
        run: node dist/src/cli/index.js qa:flake --times 20 --timeoutMs 240000 --workers 50% --pattern "tests/**/*.test.ts"
