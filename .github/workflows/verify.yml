name: Verify Traceability
on:
  push:
    branches: [main]
    tags: ['v*'] # Verify traceability on releases
  pull_request:
    branches: [main]

jobs:
  traceability:
    runs-on: ubuntu-latest
    continue-on-error: ${{ github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'ci-non-blocking') }}
    steps:
      - uses: actions/checkout@v4
      - name: Generate traceability matrix
        run: |
          chmod +x ./scripts/verify/traceability.sh
          ./scripts/verify/traceability.sh
      - name: Upload traceability artifact
        uses: actions/upload-artifact@v4
        with:
          name: traceability-matrix
          path: |
            traceability.csv
            traceability.json
      - name: Check coverage thresholds
        run: |
          # Placeholder for actual threshold checks
          printf "%s\n" "Checking traceability coverage..."
          if [ -f traceability.csv ]; then
            printf "%s\n" "Traceability matrix generated successfully"
          else
            printf "%s\n" "Failed to generate traceability matrix"
            exit 1
          fi
  model-check:
    runs-on: ubuntu-latest
    continue-on-error: ${{ github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'ci-non-blocking') }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Setup Java (for TLC)
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
      - name: Run model checks (TLA+)
        run: |
          node --version
          java -version
          npm run verify:model || true
      - name: Upload model-check artifacts
        uses: actions/upload-artifact@v4
        with:
          name: model-check-results
          path: |
            artifacts/codex/model-check.json
            artifacts/codex/*.tlc.log.txt
  post-summary:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    needs: [traceability, model-check, contracts-check, contracts-exec]
    continue-on-error: ${{ github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'ci-non-blocking') }}
    steps:
      - uses: actions/checkout@v4
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts_dl
      - name: Build PR comment summary
        id: build
        run: |
          set -e
          shortp() {
            p="$1"
            awk -v s="$p" 'BEGIN{ n=split(s,a,"/"); if (n<=2) {print s} else { print a[n-1] "/" a[n] } }'
          }
          TRACE_FILE=$(find artifacts_dl/traceability-matrix -name 'traceability.csv' 2>/dev/null | head -1)
          MODEL_FILE=$(find artifacts_dl/model-check-results -name 'model-check.json' 2>/dev/null | head -1)
          TRACE_JSON=$(find artifacts_dl/traceability-matrix -name 'traceability.json' 2>/dev/null | head -1)
          CONTRACTS_JSON=$(find artifacts_dl/contracts-check -name 'contracts-check.json' 2>/dev/null | head -1)
          CONTRACTS_EXEC=$(find artifacts_dl/contracts-exec -name 'contracts-exec.json' 2>/dev/null | head -1)
          {
            printf "%s\n" "TRACE_FILE=$TRACE_FILE"
            printf "%s\n" "MODEL_FILE=$MODEL_FILE"
            printf "%s\n" "TRACE_JSON=$TRACE_JSON"
            printf "%s\n" "CONTRACTS_JSON=$CONTRACTS_JSON"
            printf "%s\n" "CONTRACTS_EXEC=$CONTRACTS_EXEC"
          } >> "$GITHUB_OUTPUT"
          {
            printf "%s\n" "### 🔍 Verification Summary"
            if [ -f "$TRACE_JSON" ]; then
              scenarios=$(jq -r '.total' "$TRACE_JSON" 2>/dev/null || printf "0\n")
              covered_tests=$(jq -r '.testsLinked' "$TRACE_JSON" 2>/dev/null || printf "0\n")
              covered_impl=$(jq -r '.implLinked' "$TRACE_JSON" 2>/dev/null || printf "0\n")
              covered_formal=$(jq -r '.formalLinked' "$TRACE_JSON" 2>/dev/null || printf "0\n")
              pct() { if [ "$1" -gt 0 ]; then awk "BEGIN {printf \"%.0f\", ($2*100)/$1}"; else printf "0\n"; fi; }
              tests_pct=$(pct "$scenarios" "$covered_tests")
              impl_pct=$(pct "$scenarios" "$covered_impl")
              formal_pct=$(pct "$scenarios" "$covered_formal")
              printf "- Traceability: %s scenarios\n" "$scenarios"
              printf "%s\n" "  - Tests: ${covered_tests} (${tests_pct}%)"
              printf "%s\n" "  - Impl: ${covered_impl} (${impl_pct}%)"
              printf "%s\n" "  - Formal: ${covered_formal} (${formal_pct}%)"
              printf "\n<details><summary>Unlinked (top 5)</summary>\n"
              jq -r '.rows[] | select(.test=="N/A" or .impl=="N/A" or .formal=="N/A") | "- " + .scenario + " (id: " + .id + ") test:" + .test + " impl:" + .impl + " formal:" + .formal' "$TRACE_JSON" 2>/dev/null | head -5 || true
              printf "</details>\n"
              printf "\n<details><summary>Linked examples (up to 3)</summary>\n"
              PR_SHA=$(jq -r '.pull_request.head.sha // empty' "$GITHUB_EVENT_PATH" 2>/dev/null || printf "\n")
              REPO="$GITHUB_REPOSITORY"
              if [ -f "$TRACE_JSON" ]; then
                idx=0
              while IFS= read -r row && [ $idx -lt 3 ]; do
<<<<<<< HEAD
                  scenario=$(printf "%s\n" "$row" | jq -r '.scenario')
                  testp=$(printf "%s\n" "$row" | jq -r '.test')
                  implp=$(printf "%s\n" "$row" | jq -r '.impl')
                  formp=$(printf "%s\n" "$row" | jq -r '.formal')
=======
                  scenario=$(echo "$row" | jq -r '.scenario')
                  testp=$(echo "$row" | jq -r '.test')
                  implp=$(echo "$row" | jq -r '.impl')
                  formp=$(echo "$row" | jq -r '.formal')
>>>>>>> origin/main
                  testdisp=$( [ "$testp" != "N/A" ] && shortp "$testp" || printf "N/A\n" )
                  impldisp=$( [ "$implp" != "N/A" ] && shortp "$implp" || printf "N/A\n" )
                  formdisp=$( [ "$formp" != "N/A" ] && shortp "$formp" || printf "N/A\n" )
                  testlink="$testdisp"; impllink="$impldisp"; formlink="$formdisp"
                  if [ -n "$PR_SHA" ] && [ "$testp" != "N/A" ]; then testlink="[$testdisp](https://github.com/$REPO/blob/$PR_SHA/$testp)"; fi
                  if [ -n "$PR_SHA" ] && [ "$implp" != "N/A" ]; then impllink="[$impldisp](https://github.com/$REPO/blob/$PR_SHA/$implp)"; fi
                  if [ -n "$PR_SHA" ] && [ "$formp" != "N/A" ]; then formlink="[$formdisp](https://github.com/$REPO/blob/$PR_SHA/$formp)"; fi
<<<<<<< HEAD
                  id=$(printf "%s\n" "$row" | jq -r '.id')
=======
                  id=$(echo "$row" | jq -r '.id')
>>>>>>> origin/main
                  printf "%s\n" "- $scenario (id: $id) test: $testlink impl: $impllink formal: $formlink"
                  idx=$((idx+1))
                done < <(jq -c '.rows[] | select(.test!="N/A" and .impl!="N/A" and .formal!="N/A")' "$TRACE_JSON" 2>/dev/null)
              fi
              printf "</details>\n"
              printf "\n<details><summary>Hit basis (tests/formal)</summary>\n"
              thit_title=$(jq '[.rows[] | select(.testHit == .scenario)] | length' "$TRACE_JSON" 2>/dev/null || printf "0\n")
              thit_id=$(jq '[.rows[] | select(.testHit == .id)] | length' "$TRACE_JSON" 2>/dev/null || printf "0\n")
              thit_tag=$(jq '[.rows[] | select(.testHit | type=="string" and startswith("@"))] | length' "$TRACE_JSON" 2>/dev/null || printf "0\n")
              fhit_title=$(jq '[.rows[] | select(.formalHit == .scenario)] | length' "$TRACE_JSON" 2>/dev/null || printf "0\n")
              fhit_id=$(jq '[.rows[] | select(.formalHit == .id)] | length' "$TRACE_JSON" 2>/dev/null || printf "0\n")
              fhit_tag=$(jq '[.rows[] | select(.formalHit | type=="string" and startswith("@"))] | length' "$TRACE_JSON" 2>/dev/null || printf "0\n")
              printf "%s\n" "- Test hits: title=${thit_title} id=${thit_id} tag=${thit_tag}"
              printf "%s\n" "- Formal hits: title=${fhit_title} id=${fhit_id} tag=${fhit_tag}"
              printf "</details>\n"
            elif [ -f "$TRACE_FILE" ]; then
              total=$(wc -l < "$TRACE_FILE")
              scenarios=$((total-1))
              covered_tests=$(tail -n +2 "$TRACE_FILE" | cut -d, -f2 | grep -vc '^N/A$' || true)
              covered_impl=$(tail -n +2 "$TRACE_FILE" | cut -d, -f3 | grep -vc '^N/A$' || true)
              printf "- Traceability: %s scenarios; tests: %s; impl: %s\n" "$scenarios" "$covered_tests" "$covered_impl"
            else
              printf "- Traceability: (no matrix artifact)\n"
            fi
            if [ -f "$MODEL_FILE" ]; then
              ok=$(jq '[.tlc.results[] | select(.ok==true)] | length' "$MODEL_FILE" 2>/dev/null || printf "0\n")
              total=$(jq '(.tlc.results | length) + 0' "$MODEL_FILE" 2>/dev/null || printf "0\n")
              if [ "$total" -gt 0 ]; then pct=$(awk "BEGIN {printf \"%.0f\", ($ok*100)/$total}"); else pct=0; fi
              printf "- Model Check (TLC): %s/%s (%s%%) modules ok\n" "$ok" "$total" "$pct"
              printf "\n<details><summary>Non-OK modules (top 5)</summary>\n"
              jq -r '.tlc.results[] | select(.ok!=true) | "- " + .module + ( .log? // "" | " (log: " + . + ")" )' "$MODEL_FILE" 2>/dev/null | head -5 || true
              printf "</details>\n"
              # Alloy summary (if present)
              a_ok=$(jq '[.alloy.results[] | select(.ok==true)] | length' "$MODEL_FILE" 2>/dev/null || printf "0\n")
              a_total=$(jq '(.alloy.results | map(select(.ok!=null)) | length) + 0' "$MODEL_FILE" 2>/dev/null || printf "0\n")
              if [ "$a_total" -gt 0 ]; then a_pct=$(awk "BEGIN {printf \"%.0f\", ($a_ok*100)/$a_total}"); else a_pct=0; fi
              if [ "$a_total" -gt 0 ]; then
                printf "- Alloy: %s/%s (%s%%) specs ok\n" "$a_ok" "$a_total" "$a_pct"
                printf "\n<details><summary>Alloy non-OK (top 5)</summary>\n"
                jq -r '.alloy.results[] | select(.ok==false) | "- " + .file + ( .log? // "" | " (log: " + . + ")" )' "$MODEL_FILE" 2>/dev/null | head -5 || true
                printf "</details>\n"
              else
                # If Alloy not executed but detected
                a_detect=$(jq '(.alloy.results | length) + 0' "$MODEL_FILE" 2>/dev/null || printf "0\n")
                if [ "$a_detect" -gt 0 ]; then
                  printf "- Alloy: detected %s specs (execution skipped)\n" "$a_detect"
                fi
              fi
            else
              printf "- Model Check: (no summary artifact)\n"
            fi
            if [ -f "$CONTRACTS_JSON" ]; then
              haveSchemas=$(jq -r '.present.schemas' "$CONTRACTS_JSON" 2>/dev/null || printf "false\n")
              haveConds=$(jq -r '.present.conditions' "$CONTRACTS_JSON" 2>/dev/null || printf "false\n")
              haveMachine=$(jq -r '.present.machine' "$CONTRACTS_JSON" 2>/dev/null || printf "false\n")
              printf "- Contracts: schemas=%s conditions=%s machine=%s\n" "$haveSchemas" "$haveConds" "$haveMachine"
            else
              printf "- Contracts: (no check artifact)\n"
            fi
            if [ -f "$CONTRACTS_EXEC" ]; then
              pin=$(jq -r '.results.parseInOk // false' "$CONTRACTS_EXEC" 2>/dev/null || printf "false\n")
              pre=$(jq -r '.results.preOk // false' "$CONTRACTS_EXEC" 2>/dev/null || printf "false\n")
              pst=$(jq -r '.results.postOk // false' "$CONTRACTS_EXEC" 2>/dev/null || printf "false\n")
              pout=$(jq -r '.results.parseOutOk // false' "$CONTRACTS_EXEC" 2>/dev/null || printf "false\n")
              printf "  - Contracts exec: parseIn=%s pre=%s post=%s parseOut=%s\n" "$pin" "$pre" "$pst" "$pout"
            fi
          } > pr-summary.md
          cat pr-summary.md
      - name: Post PR comment
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const body = fs.readFileSync('pr-summary.md', 'utf8');
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body
            });
  contracts-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run contracts presence check (report-only)
        run: |
          node scripts/verify/run-contracts-check.mjs
          EXIT_CODE=$?
          if [ $EXIT_CODE -ne 0 ] && [ $EXIT_CODE -ne 2 ]; then
            printf "%s\n" "Unexpected error in contracts check (exit code $EXIT_CODE)"
            exit $EXIT_CODE
          fi
      - name: Upload contracts artifact
        uses: actions/upload-artifact@v4
        with:
          name: contracts-check
          path: artifacts/contracts/contracts-check.json
  contracts-exec:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Determine enforcement from labels
        run: |
          if [ -f "$GITHUB_EVENT_PATH" ]; then
            if jq -e '.pull_request.labels[]?.name | select(.=="enforce-contracts")' "$GITHUB_EVENT_PATH" >/dev/null; then
              printf "%s\n" "CONTRACTS_ENFORCE=1" >> "$GITHUB_ENV"
            fi
          fi
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Execute contracts (report-only; requires tsx)
        run: |
          npx -y tsx scripts/verify/execute-contracts.ts || true
      - name: Upload contracts exec artifact
        uses: actions/upload-artifact@v4
        with:
          name: contracts-exec
          path: artifacts/contracts/contracts-exec.json
      - name: Enforce contracts (optional)
        if: ${{ env.CONTRACTS_ENFORCE == '1' }}
        run: |
          FILE=artifacts/contracts/contracts-exec.json
          if [ ! -f "$FILE" ]; then printf "%s\n" "No contracts exec artifact found"; exit 1; fi
          PARSE_IN=$(jq -r '.results.parseInOk // false' "$FILE")
          PRE_OK=$(jq -r '.results.preOk // false' "$FILE")
          POST_OK=$(jq -r '.results.postOk // false' "$FILE")
          PARSE_OUT=$(jq -r '.results.parseOutOk // false' "$FILE")
          if [ "$PARSE_IN" != "true" ] || [ "$PRE_OK" != "true" ] || [ "$POST_OK" != "true" ] || [ "$PARSE_OUT" != "true" ]; then
            printf "%s\n" "Contracts enforcement failed: parseIn=$PARSE_IN pre=$PRE_OK post=$POST_OK parseOut=$PARSE_OUT"
            exit 1
          fi

  formal-enforce:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    needs: [model-check]
    steps:
      - name: Determine enforcement from labels
        run: |
          if [ -f "$GITHUB_EVENT_PATH" ]; then
            if jq -e '.pull_request.labels[]?.name | select(.=="enforce-formal")' "$GITHUB_EVENT_PATH" >/dev/null; then
              printf "%s\n" "FORMAL_ENFORCE=1" >> "$GITHUB_ENV"
            fi
          fi
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts_dl
      - name: Enforce formal checks (optional)
        if: ${{ env.FORMAL_ENFORCE == '1' }}
        run: |
          FILE=$(find artifacts_dl/model-check-results -name 'model-check.json' | head -1)
          if [ -z "$FILE" ] || [ ! -f "$FILE" ]; then printf "%s\n" "No model-check.json found"; exit 1; fi
          tlc_fail=$(jq -r '[.tlc.results[] | select(.ok!=true)] | length' "$FILE")
          alloy_fail=$(jq -r '[.alloy.results[] | select(.ok==false)] | length' "$FILE")
          if [ "$tlc_fail" != "0" ] || [ "$alloy_fail" != "0" ]; then
            printf "%s\n" "Formal enforcement failed: tlc_fail=$tlc_fail alloy_fail=$alloy_fail"
            exit 1
          fi

  formal-conformance-optin:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4
      - name: Determine if run-formal label is present
        run: |
          if [ -f "$GITHUB_EVENT_PATH" ]; then
            if jq -e '.pull_request.labels[]?.name | select(.=="run-formal")' "$GITHUB_EVENT_PATH" >/dev/null; then
              printf "%s\n" "RUN_FORMAL=1" >> "$GITHUB_ENV"
            fi
          fi
      - name: Formal conformance (stub)
        if: ${{ env.RUN_FORMAL == '1' }}
        run: |
          printf "%s\n" "Running formal conformance (opt-in stub)"
          node -e "console.log('formal conformance stub ok')"
