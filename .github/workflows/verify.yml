name: Verify Traceability
on:
  push:
    branches: [main]
    tags: ['v*'] # Verify traceability on releases
  pull_request:
    branches: [main]

jobs:
  traceability:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Generate traceability matrix
        run: |
          chmod +x ./scripts/verify/traceability.sh
          ./scripts/verify/traceability.sh
      - name: Upload traceability artifact
        uses: actions/upload-artifact@v4
        with:
          name: traceability-matrix
          path: |
            traceability.csv
            traceability.json
      - name: Check coverage thresholds
        run: |
          # Placeholder for actual threshold checks
          echo "Checking traceability coverage..."
          if [ -f traceability.csv ]; then
            echo "Traceability matrix generated successfully"
          else
            echo "Failed to generate traceability matrix"
            exit 1
          fi
  model-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Setup Java (for TLC)
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
      - name: Run model checks (TLA+)
        run: |
          node --version
          java -version
          npm run verify:model || true
      - name: Upload model-check artifacts
        uses: actions/upload-artifact@v4
        with:
          name: model-check-results
          path: |
            artifacts/codex/model-check.json
            artifacts/codex/*.tlc.log.txt
  post-summary:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    needs: [traceability, model-check, contracts-check]
    steps:
      - uses: actions/checkout@v4
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts_dl
      - name: Build PR comment summary
        id: build
        run: |
          set -e
          TRACE_FILE=$(find artifacts_dl/traceability-matrix -name 'traceability.csv' 2>/dev/null | head -1)
          MODEL_FILE=$(find artifacts_dl/model-check-results -name 'model-check.json' 2>/dev/null | head -1)
          TRACE_JSON=$(find artifacts_dl/traceability-matrix -name 'traceability.json' 2>/dev/null | head -1)
          CONTRACTS_JSON=$(find artifacts_dl/contracts-check -name 'contracts-check.json' 2>/dev/null | head -1)
          CONTRACTS_EXEC=$(find artifacts_dl/contracts-exec -name 'contracts-exec.json' 2>/dev/null | head -1)
          echo "TRACE_FILE=$TRACE_FILE" >> $GITHUB_OUTPUT
          echo "MODEL_FILE=$MODEL_FILE" >> $GITHUB_OUTPUT
          echo "TRACE_JSON=$TRACE_JSON" >> $GITHUB_OUTPUT
          echo "CONTRACTS_JSON=$CONTRACTS_JSON" >> $GITHUB_OUTPUT
          echo "CONTRACTS_EXEC=$CONTRACTS_EXEC" >> $GITHUB_OUTPUT
          {
            echo "### 🔍 Verification Summary"
            if [ -f "$TRACE_JSON" ]; then
              scenarios=$(jq -r '.total' "$TRACE_JSON" 2>/dev/null || echo 0)
              covered_tests=$(jq -r '.testsLinked' "$TRACE_JSON" 2>/dev/null || echo 0)
              covered_impl=$(jq -r '.implLinked' "$TRACE_JSON" 2>/dev/null || echo 0)
              covered_formal=$(jq -r '.formalLinked' "$TRACE_JSON" 2>/dev/null || echo 0)
              pct() { if [ "$1" -gt 0 ]; then awk "BEGIN {printf \"%.0f\", ($2*100)/$1}"; else echo 0; fi; }
              tests_pct=$(pct "$scenarios" "$covered_tests")
              impl_pct=$(pct "$scenarios" "$covered_impl")
              formal_pct=$(pct "$scenarios" "$covered_formal")
              echo "- Traceability: ${scenarios} scenarios"
              echo "  - Tests: ${covered_tests} (${tests_pct}%)"
              echo "  - Impl: ${covered_impl} (${impl_pct}%)"
              echo "  - Formal: ${covered_formal} (${formal_pct}%)"
              echo "\n<details><summary>Unlinked (top 5)</summary>"
              jq -r '.rows[] | select(.test=="N/A" or .impl=="N/A" or .formal=="N/A") | "- " + .scenario + " (id: " + .id + ") test:" + .test + " impl:" + .impl + " formal:" + .formal' "$TRACE_JSON" 2>/dev/null | head -5 || true
              echo "</details>"
              echo "\n<details><summary>Linked examples (up to 3)</summary>"
              PR_SHA=$(jq -r '.pull_request.head.sha // empty' "$GITHUB_EVENT_PATH" 2>/dev/null || echo "")
              REPO="$GITHUB_REPOSITORY"
              if [ -f "$TRACE_JSON" ]; then
                idx=0
                while IFS= read -r row && [ $idx -lt 3 ]; do
                  scenario=$(echo "$row" | jq -r '.scenario')
                  testp=$(echo "$row" | jq -r '.test')
                  implp=$(echo "$row" | jq -r '.impl')
                  formp=$(echo "$row" | jq -r '.formal')
                  testlink="$testp"; impllink="$implp"; formlink="$formp"
                  if [ -n "$PR_SHA" ] && [ "$testp" != "N/A" ]; then testlink="[$testp](https://github.com/$REPO/blob/$PR_SHA/$testp)"; fi
                  if [ -n "$PR_SHA" ] && [ "$implp" != "N/A" ]; then impllink="[$implp](https://github.com/$REPO/blob/$PR_SHA/$implp)"; fi
                  if [ -n "$PR_SHA" ] && [ "$formp" != "N/A" ]; then formlink="[$formp](https://github.com/$REPO/blob/$PR_SHA/$formp)"; fi
                  echo "- $scenario test: $testlink impl: $impllink formal: $formlink"
                  idx=$((idx+1))
                done < <(jq -c '.rows[] | select(.test!="N/A" and .impl!="N/A" and .formal!="N/A")' "$TRACE_JSON" 2>/dev/null)
              fi
              echo "</details>"
              echo "\n<details><summary>Hit basis (tests/formal)</summary>"
              thit_title=$(jq '[.rows[] | select(.testHit == .scenario)] | length' "$TRACE_JSON" 2>/dev/null || echo 0)
              thit_id=$(jq '[.rows[] | select(.testHit == .id)] | length' "$TRACE_JSON" 2>/dev/null || echo 0)
              thit_tag=$(jq '[.rows[] | select(.testHit | type=="string" and startswith("@"))] | length' "$TRACE_JSON" 2>/dev/null || echo 0)
              fhit_title=$(jq '[.rows[] | select(.formalHit == .scenario)] | length' "$TRACE_JSON" 2>/dev/null || echo 0)
              fhit_id=$(jq '[.rows[] | select(.formalHit == .id)] | length' "$TRACE_JSON" 2>/dev/null || echo 0)
              fhit_tag=$(jq '[.rows[] | select(.formalHit | type=="string" and startswith("@"))] | length' "$TRACE_JSON" 2>/dev/null || echo 0)
              echo "- Test hits: title=${thit_title} id=${thit_id} tag=${thit_tag}"
              echo "- Formal hits: title=${fhit_title} id=${fhit_id} tag=${fhit_tag}"
              echo "</details>"
            elif [ -f "$TRACE_FILE" ]; then
              total=$(wc -l < "$TRACE_FILE")
              scenarios=$((total-1))
              covered_tests=$(tail -n +2 "$TRACE_FILE" | cut -d, -f2 | grep -vc '^N/A$' || true)
              covered_impl=$(tail -n +2 "$TRACE_FILE" | cut -d, -f3 | grep -vc '^N/A$' || true)
              echo "- Traceability: ${scenarios} scenarios; tests: ${covered_tests}; impl: ${covered_impl}"
            else
              echo "- Traceability: (no matrix artifact)"
            fi
            if [ -f "$MODEL_FILE" ]; then
              ok=$(jq '[.tlc.results[] | select(.ok==true)] | length' "$MODEL_FILE" 2>/dev/null || echo 0)
              total=$(jq '(.tlc.results | length) + 0' "$MODEL_FILE" 2>/dev/null || echo 0)
              if [ "$total" -gt 0 ]; then pct=$(awk "BEGIN {printf \"%.0f\", ($ok*100)/$total}"); else pct=0; fi
              echo "- Model Check (TLC): ${ok}/${total} (${pct}%) modules ok"
              echo "\n<details><summary>Non-OK modules (top 5)</summary>"
              jq -r '.tlc.results[] | select(.ok!=true) | "- " + .module + ( .log? // "" | " (log: " + . + ")" )' "$MODEL_FILE" 2>/dev/null | head -5 || true
              echo "</details>"
            else
              echo "- Model Check: (no summary artifact)"
            fi
            if [ -f "$CONTRACTS_JSON" ]; then
              haveSchemas=$(jq -r '.present.schemas' "$CONTRACTS_JSON" 2>/dev/null || echo false)
              haveConds=$(jq -r '.present.conditions' "$CONTRACTS_JSON" 2>/dev/null || echo false)
              haveMachine=$(jq -r '.present.machine' "$CONTRACTS_JSON" 2>/dev/null || echo false)
              echo "- Contracts: schemas=${haveSchemas} conditions=${haveConds} machine=${haveMachine}"
            else
              echo "- Contracts: (no check artifact)"
            fi
            if [ -f "$CONTRACTS_EXEC" ]; then
              pin=$(jq -r '.results.parseInOk // false' "$CONTRACTS_EXEC" 2>/dev/null || echo false)
              pre=$(jq -r '.results.preOk // false' "$CONTRACTS_EXEC" 2>/dev/null || echo false)
              pst=$(jq -r '.results.postOk // false' "$CONTRACTS_EXEC" 2>/dev/null || echo false)
              pout=$(jq -r '.results.parseOutOk // false' "$CONTRACTS_EXEC" 2>/dev/null || echo false)
              echo "  - Contracts exec: parseIn=${pin} pre=${pre} post=${pst} parseOut=${pout}"
            fi
          } > pr-summary.md
          cat pr-summary.md
      - name: Post PR comment
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const body = fs.readFileSync('pr-summary.md', 'utf8');
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body
            });
  contracts-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run contracts presence check (report-only)
        run: |
          node scripts/verify/run-contracts-check.mjs
          EXIT_CODE=$?
          if [ $EXIT_CODE -ne 0 ] && [ $EXIT_CODE -ne 2 ]; then
            echo "Unexpected error in contracts check (exit code $EXIT_CODE)"
            exit $EXIT_CODE
          fi
      - name: Upload contracts artifact
        uses: actions/upload-artifact@v4
        with:
          name: contracts-check
          path: artifacts/contracts/contracts-check.json
  contracts-exec:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Determine enforcement from labels
        run: |
          if [ -f "$GITHUB_EVENT_PATH" ]; then
            if jq -e '.pull_request.labels[]?.name | select(.=="enforce-contracts")' "$GITHUB_EVENT_PATH" >/dev/null; then
              echo "CONTRACTS_ENFORCE=1" >> $GITHUB_ENV
            fi
          fi
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Execute contracts (report-only; requires tsx)
        run: |
          npx -y tsx scripts/verify/execute-contracts.ts || true
      - name: Upload contracts exec artifact
        uses: actions/upload-artifact@v4
        with:
          name: contracts-exec
          path: artifacts/contracts/contracts-exec.json
      - name: Enforce contracts (optional)
        if: ${{ env.CONTRACTS_ENFORCE == '1' }}
        run: |
          FILE=artifacts/contracts/contracts-exec.json
          if [ ! -f "$FILE" ]; then echo "No contracts exec artifact found"; exit 1; fi
          PARSE_IN=$(jq -r '.results.parseInOk // false' "$FILE")
          PRE_OK=$(jq -r '.results.preOk // false' "$FILE")
          POST_OK=$(jq -r '.results.postOk // false' "$FILE")
          PARSE_OUT=$(jq -r '.results.parseOutOk // false' "$FILE")
          if [ "$PARSE_IN" != "true" ] || [ "$PRE_OK" != "true" ] || [ "$POST_OK" != "true" ] || [ "$PARSE_OUT" != "true" ]; then
            echo "Contracts enforcement failed: parseIn=$PARSE_IN pre=$PRE_OK post=$POST_OK parseOut=$PARSE_OUT"
            exit 1
          fi
