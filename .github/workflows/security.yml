name: Security Analysis

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
    # Avoid running heavy scans for docs-only changes
    paths-ignore:
      - 'docs/**'
      - '**/*.md'
  schedule:
    # Run security scan daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Fetch full history for gitleaks
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Enable corepack
        run: corepack enable

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run security analyzer
        run: pnpm run security:scan
        env:
          NODE_ENV: test

      - name: Upload security report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-report
          path: security-reports/
          retention-days: 30

  dependency-audit:
    name: Dependency Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Enable corepack
        run: corepack enable

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Audit dependencies
        run: pnpm audit --audit-level=moderate || true

      - name: Check for high-risk packages
        run: |
          pnpm audit --audit-level=high --json > audit-results.json || true
          if [ -s audit-results.json ]; then
            echo "High-risk vulnerabilities found!"
            cat audit-results.json
            exit 1
          fi

  secrets-scan:
    name: Secrets Scanning
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          config-path: .gitleaks.toml

  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    if: github.event_name != 'schedule'
    
    permissions:
      security-events: write
      contents: read
      actions: read

    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript' ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: security-extended,security-and-quality

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  license-check:
    name: License Compliance
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install license checker
        run: pnpm dlx -y license-checker --version || pnpm add -g license-checker

      - name: Check licenses
        run: |
          license-checker --production --failOn 'GPL;AGPL;LGPL;UNLICENSED' --summary > license-summary.txt
          cat license-summary.txt

      - name: Upload license report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: license-report
          path: license-summary.txt
          retention-days: 30

  security-policy-check:
    name: Security Policy Validation
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check SECURITY.md exists
        run: |
          if [ ! -f SECURITY.md ]; then
            echo "❌ SECURITY.md file is missing"
            exit 1
          fi
          echo "✅ SECURITY.md file exists"

      - name: Validate security configuration
        run: |
          # Check for .gitignore entries
          if ! grep -q "\.env" .gitignore; then
            echo "❌ .env files not in .gitignore"
            exit 1
          fi
          
          # Check for security scripts in package.json
          if ! grep -q "security:" package.json; then
            echo "❌ No security scripts found in package.json"
            exit 1
          fi
          
          echo "✅ Security configuration validated"

  container-security:
    name: Container Security
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        if: hashFiles('docker/Dockerfile') != ''
        run: docker build -f docker/Dockerfile -t ae-framework:latest .

      - name: Run Trivy vulnerability scanner
        if: hashFiles('docker/Dockerfile') != ''
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'ae-framework:latest'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  security-notification:
    name: Security Notification
    runs-on: ubuntu-latest
    needs: [security-scan, dependency-audit, secrets-scan, codeql-analysis]
    if: failure() && github.event_name == 'schedule'
    
    steps:
      - name: Notify security team
        run: |
          echo "Security scan failed on scheduled run"
          echo "Please check the workflow results and take appropriate action"
          # In a real environment, you would send notifications to Slack, email, etc.
          
      - name: Create security issue
        uses: actions/github-script@v7
        if: failure()
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Security scan failure - ${new Date().toISOString().split('T')[0]}`,
              body: `Automated security scan failed on scheduled run.\n\nPlease review the following:\n- Dependency vulnerabilities\n- Secret leaks\n- Code security issues\n\nWorkflow run: ${context.payload.html_url || 'N/A'}`,
              labels: ['security', 'bug', 'high-priority']
            })
