import { execa } from 'execa';
import { writeFile, mkdir } from 'node:fs/promises';
import { access, constants } from 'node:fs/promises';
import which from 'which';

async function hasBin(bin: string): Promise<boolean> {
  try { 
    await which(bin); 
    return true; 
  } catch { 
    return false; 
  }
}

async function hasFile(file: string): Promise<boolean> {
  try {
    await access(file, constants.F_OK);
    return true;
  } catch {
    return false;
  }
}

export async function verifyRun() {
  console.log('[ae] Starting verification pipeline...');
  await mkdir('artifacts', { recursive: true });
  
  const logs: string[] = [];
  let ok = true;
  const startTime = new Date();

  async function step(name: string, cmd: string, args: string[], env?: Record<string, string>) {
    logs.push(`## ${name}\n\`\`\`bash\n${[cmd, ...args].join(' ')}\n\`\`\``);
    console.log(`[ae] Running ${name}...`);
    
    const r = await execa(cmd, args, { 
      reject: false, 
      stdio: 'inherit', 
      env: env ? { ...process.env, ...env } : process.env 
    });
    
    if (r.exitCode !== 0) { 
      ok = false; 
      logs.push(`❌ ${name}: FAILED (exit ${r.exitCode})`);
      console.log(`[ae] ${name}: FAILED`);
    } else { 
      logs.push(`✅ ${name}: OK`);
      console.log(`[ae] ${name}: OK`);
    }
  }

  // 1) TypeScript type check
  if (await hasBin('tsc')) {
    await step('TypeScript Types', 'tsc', ['--noEmit']);
  } else {
    logs.push('## TypeScript Types\nℹ️  Skipped (tsc not available)');
    console.log('[ae] TypeScript Types: SKIPPED (tsc not available)');
  }

  // 2) ESLint
  if (await hasBin('eslint')) {
    await step('ESLint', 'eslint', ['.']);
  } else {
    logs.push('## ESLint\nℹ️  Skipped (eslint not available)');
    console.log('[ae] ESLint: SKIPPED (eslint not available)');
  }

  // 3) QA metrics
  if (await hasFile('dist/cli.js')) {
    await step('QA Metrics', 'node', ['dist/cli.js', 'qa']);
  } else {
    logs.push('## QA Metrics\nℹ️  Skipped (ae CLI not built)');
    console.log('[ae] QA Metrics: SKIPPED (ae CLI not built)');
  }

  // 4) Benchmarks (with deterministic seed)
  if (await hasFile('dist/cli.js')) {
    await step('Benchmarks', 'node', ['dist/cli.js', 'bench'], { AE_SEED: '123' });
  } else {
    logs.push('## Benchmarks\nℹ️  Skipped (ae CLI not built)');
    console.log('[ae] Benchmarks: SKIPPED (ae CLI not built)');
  }

  const endTime = new Date();
  const duration = ((endTime.getTime() - startTime.getTime()) / 1000).toFixed(1);

  const summary = ok ? '✅ All verification steps passed' : '❌ Some verification steps failed';
  
  const report = `# Verification Report

Generated: ${startTime.toISOString()}
Duration: ${duration}s
Status: ${summary}

${logs.join('\n\n')}

---
*Generated by ae-framework verification pipeline*
`;

  await writeFile('artifacts/verify.md', report);
  console.log(`[ae] Verification report generated -> artifacts/verify.md`);
  console.log(`[ae] Verification ${ok ? 'PASSED' : 'FAILED'} (${duration}s)`);
  
  process.exit(ok ? 0 : 1);
}