{
  "name": "ae-framework",
  "version": "1.0.0",
  "description": "AI-Agent Enabled Framework with TDD enforcement",
  "private": false,
  "type": "module",
  "types": "dist/src/index.d.ts",
  "bin": {
    "ae": "./dist/src/cli/index.js",
    "ae-framework": "./dist/src/cli/index.js",
    "ae-phase": "./dist/src/cli/phase-cli.js",
    "ae-approve": "./dist/src/cli/approval-cli.js",
    "ae-slash": "./dist/src/cli/slash-cli.js",
    "ae-ui": "./dist/src/cli/ae-ui-alias.js",
    "ae-sbom": "./dist/src/cli/sbom-cli.js",
    "ae-resilience": "./dist/src/cli/resilience-cli.js",
    "ae-benchmark": "./dist/src/cli/benchmark-cli.js",
    "ae-server": "./dist/src/cli/server-runner.js"
  },
  "scripts": {
    "codex:run": "node scripts/codex/ae-playbook.mjs --resume",
    "start:server": "tsx src/server.ts",
    "dev:server": "tsx watch src/server.ts",
    "dev": "tsx watch src/index.ts",
    "dev:web": "pnpm --filter @ae-framework/web dev",
    "dev:storybook": "pnpm --filter @ae-framework/storybook dev",
    "build": "pnpm build:spec-compiler && tsc -p tsconfig.build.json && ( [ -f scripts/ci/ensure-bin-executables.mjs ] && node scripts/ci/ensure-bin-executables.mjs || true )",
    "build:spec-compiler": "pnpm --filter @ae-framework/spec-compiler build",
    "build:windows": "tsc --project configs/tsconfig.windows.json",
    "build:frontend": "pnpm run build:tokens && pnpm run build:ui && pnpm --filter @ae-framework/web build",
    "build:tokens": "pnpm --filter @ae-framework/design-tokens build",
    "build:ui": "pnpm --filter @ae-framework/ui build",
    "build:storybook": "pnpm --filter @ae-framework/storybook build-storybook",
    "build:cli": "chmod +x dist/src/cli/*.js || true",
    "phase": "tsx src/cli/phase-cli.ts",
    "benchmark": "tsx src/cli/benchmark-cli.ts",
    "benchmark:basic": "tsx src/cli/benchmark-cli.ts run --difficulty basic",
    "benchmark:ci": "tsx src/cli/benchmark-cli.ts run --ci",
    "benchmark:list": "tsx src/cli/benchmark-cli.ts list",
    "benchmark:init": "tsx src/cli/benchmark-cli.ts init",
    "lint": "eslint .",
    "types:check": "tsc -p tsconfig.verify.json --noEmit",
    "lint:frontend": "pnpm --filter @ae-framework/ui lint && pnpm --filter @ae-framework/web lint",
    "type-check:frontend": "pnpm --filter @ae-framework/ui type-check && pnpm --filter @ae-framework/web type-check",
    "clean:frontend": "pnpm --filter @ae-framework/design-tokens clean && pnpm --filter @ae-framework/ui clean",
    "clean:project": "node scripts/project-cleanup.mjs",
    "clean:reports": "rm -rf temp-reports/*/",
    "clean:all": "pnpm run clean:frontend && pnpm run clean:project",
    "codemod:ts-comments": "node scripts/codemods/ts-ignore-to-expect.mjs",
    "codemod:import-type": "tsx scripts/codemods/import-type.mts",
    "optimize:ci": "node scripts/integrated-ci-test-optimizer.mjs",
    "optimize:ci:full": "node scripts/integrated-ci-test-optimizer.mjs --ci",
    "optimize:ci:stability": "node scripts/integrated-ci-test-optimizer.mjs --no-flake-detection --no-performance",
    "optimize:ci:flake": "node scripts/integrated-ci-test-optimizer.mjs --no-stability --no-performance",
    "optimize:ci:performance": "node scripts/integrated-ci-test-optimizer.mjs --no-flake-detection --no-stability",
    "test": "vitest run",
    "test:unit": "vitest run --project unit --passWithNoTests",
    "test:int": "vitest run --project integration",
    "test:perf": "vitest run --project performance --passWithNoTests",
    "verify:lite": "bash scripts/ci/run-verify-lite-local.sh",
    "test:all": "vitest run",
    "test:fast": "vitest run --exclude \"tests/testing/intelligent-test-selection.test.ts\" --exclude \"tests/examples/**\" --exclude \"tests/docker/**\" --exclude \"examples/**\" --exclude \"**/__e2e__/**\" --exclude \"tests/a11y/**\" --exclude \"tests/property/**\" --exclude \"tests/security/**\" --exclude \"tests/integration/**\" --exclude \"tests/resilience/integration.test.ts\" --exclude \"tests/conformance/**\" --exclude \"tests/cegis/**\" --exclude \"tests/cli/**\" --exclude \"tests/commands/**\" --exclude \"tests/api/**\" --exclude \"tests/tdd-setup.test.ts\"",
    "test:fast:plus": "vitest run --exclude \"tests/testing/intelligent-test-selection.test.ts\" --exclude \"tests/examples/**\" --exclude \"tests/docker/**\" --exclude \"examples/**\" --exclude \"**/__e2e__/**\" --exclude \"tests/a11y/**\" --exclude \"tests/property/**\" --exclude \"tests/traceability/**\" --exclude \"tests/security/**\" --exclude \"tests/contracts/**\" --exclude \"tests/integration/**\" --exclude \"tests/resilience/integration.test.ts\" --exclude \"tests/conformance/**\" --exclude \"tests/cegis/**\" --exclude \"tests/cli/**\" --exclude \"tests/commands/**\" --exclude \"tests/api/**\" --exclude \"tests/tdd-setup.test.ts\"",
    "test:fast:batch:commands": "vitest run tests/commands/**",
    "test:fast:batch:cli": "vitest run tests/cli/**",
    "test:fast:batch:property": "vitest run tests/property/**",
    "test:fast:batch:agents": "vitest run tests/agents/**",
    "test:a11y": "jest --config configs/jest.a11y.config.cjs",
    "test:a11y:report": "node scripts/generate-a11y-report.cjs",
    "test:visual": "vitest run tests/testing/visual-regression.test.ts",
    "test:visual:report": "node scripts/generate-visual-report.cjs",
    "test:coverage": "nyc npm test",
    "test:coverage:ci": "nyc --reporter=text-lcov npm test | tee coverage/lcov.info",
    "test:phase3.2:core": "vitest run tests/testing/playwright-integration.test.ts tests/testing/visual-regression.test.ts",
    "test:types": "tsd --files types/**/*.test-d.ts",
    "typecov": "type-coverage -p tsconfig.verify.json --ignore-catch",
    "typecov:check": "type-coverage -p tsconfig.verify.json --ignore-catch --threshold 65",
    "typecov:check:70": "type-coverage -p tsconfig.verify.json --ignore-catch --threshold 70",
    "coverage": "vitest run --coverage",
    "bdd": "cucumber-js",
    "pbt": "vitest run -c tests/property/vitest.config.ts",
    "mbt": "node tests/mbt/run.js",
    "mutation": "stryker run",
    "perf:budgets": "node scripts/performance-budget-validator.js",
    "perf:budgets:dev": "NODE_ENV=development node scripts/performance-budget-validator.js",
    "perf:budgets:prod": "NODE_ENV=production node scripts/performance-budget-validator.js",
    "test:budgets": "vitest run tests/perf/budgets.test.ts",
    "flake:detect": "node scripts/flake-detector.js",
    "flake:detect:quick": "node scripts/flake-detector.js --runs 5 --threshold 0.2",
    "flake:detect:thorough": "node scripts/flake-detector.js --runs 20 --threshold 0.05",
    "flake:detect:enhanced": "node scripts/enhanced-flake-detector.mjs",
    "flake:detect:enhanced:quick": "node scripts/enhanced-flake-detector.mjs --runs 5 --threshold 0.15",
    "test:parallel": "node scripts/parallel-test-coordinator.mjs",
    "test:ci:parallel": "node scripts/parallel-test-coordinator.mjs",
    "flake:detect:enhanced:deep": "node scripts/enhanced-flake-detector.mjs --runs 15 --threshold 0.05",
    "flake:isolate": "node scripts/flake-isolation-manager.js isolate",
    "flake:recover": "node scripts/flake-isolation-manager.js recover",
    "flake:remove": "node scripts/flake-isolation-manager.js remove",
    "flake:report": "node scripts/flake-isolation-manager.js report",
    "flake:maintenance": "node scripts/flake-isolation-manager.js maintenance",
    "flake:list": "node scripts/flake-isolation-manager.js list",
    "ir:validate": "node scripts/ir-schema-validator.js",
    "ir:validate:project": "node scripts/ir-schema-validator.js --project .",
    "ir:validate:rules": "node scripts/ir-schema-validator.js --rules",
    "ir:sample": "node scripts/ir-schema-validator.js --sample",
    "package:quality": "node scripts/package-quality-analyzer.js",
    "package:audit": "npm audit --audit-level moderate",
    "package:outdated": "npm outdated",
    "package:update": "npx npm-check-updates --target minor -u && npm install",
    "quality:scorecard": "node scripts/quality-scorecard-generator.js",
    "benchmark:regression": "node scripts/benchmark-regression-detector.js",
    "benchmark:baseline": "node scripts/benchmark-regression-detector.js --set-baseline",
    "hermetic:validate": "node scripts/hermetic-test-validator.js",
    "hermetic:quick": "node scripts/hermetic-test-quick-validator.js",
    "security:analyze": "node scripts/security-analyzer.js",
    "security:secrets": "npx gitleaks detect --no-git --verbose",
    "security:audit": "npm audit --audit-level=moderate",
    "security:integrated": "node scripts/integrated-security-audit.mjs",
    "security:integrated:quick": "node scripts/integrated-security-audit.mjs --quick",
    "security:integrated:full": "node scripts/integrated-security-audit.mjs --full",
    "security:integrated:compliance": "node scripts/integrated-security-audit.mjs --compliance-only",
    "security:full": "npm run security:analyze && npm run security:secrets && npm run security:audit",
    "accessibility:analyze": "node scripts/accessibility-analyzer.js",
    "accessibility:test": "npm run test:a11y",
    "accessibility:lighthouse": "npx lhci autorun --collect.settings.onlyCategories=accessibility",
    "accessibility:full": "npm run accessibility:analyze && npm run accessibility:test",
    "release:analyze": "node scripts/release-operations.js",
    "release:setup": "node scripts/release-operations.js setup",
    "release:changeset": "npx changeset",
    "release:version": "npx changeset version",
    "release:publish": "npx changeset publish",
    "failures:analyze": "node scripts/failure-visualization.js",
    "failures:collect": "node scripts/failure-visualization.js collect",
    "failures:visualize": "node scripts/failure-visualization.js visualize",
    "failures:report": "npm run failures:collect && npm run failures:visualize",
    "hermetic:analyze": "node scripts/hermetic-ci-enhancer.js",
    "hermetic:enhance": "node scripts/hermetic-ci-enhancer.js enhance",
    "hermetic:full": "npm run hermetic:validate && npm run hermetic:quick && npm run hermetic:analyze",
    "contract": "pact-broker can-i-deploy || true",
    "ae-framework": "tsx src/cli/index.ts",
    "setup-hooks": "node scripts/setup-hooks.js",
    "setup-hooks:unix": "cp scripts/hooks/pre-commit .git/hooks/pre-commit && chmod +x .git/hooks/pre-commit",
    "validate-tdd": "npm run ae-framework -- guard",
    "agent:test": "tsx src/agents/test-generation-agent.ts",
    "agent:code": "tsx src/agents/code-generation-agent.ts",
    "mcp:tdd": "tsx src/mcp-server/tdd-server.ts",
    "mcp:test": "tsx src/mcp-server/test-generation-server.ts",
    "mcp:test-gen": "tsx src/mcp-server/test-generation-server.ts",
    "mcp:code": "tsx src/mcp-server/code-generation-server.ts",
    "verify:server": "tsx src/mcp-server/verify-server.ts",
    "verify:full": "tsx -e \"import {VerifyAgent} from './src/agents/verify-agent.js'; const agent = new VerifyAgent(); console.log('Verify Agent initialized')\"",
    "verify:tests": "npm run test && npm run pbt && npm run bdd",
    "verify:quality": "npm run lint && npm run build",
    "verify:security": "npm audit --audit-level moderate",
    "security:test-headers": "tsx src/cli/index.ts security test-headers",
    "security:check-headers": "tsx src/cli/index.ts security check-headers",
    "security:scan": "tsx src/cli/index.ts security scan",
    "security:config": "tsx src/cli/index.ts security show-config",
    "verify:all": "npm run verify:tests && npm run verify:quality && npm run verify:security && npm run mutation",
    "intent-agent": "tsx src/mcp-server/intent-server.ts",
    "intent-agent:build": "tsc src/mcp-server/intent-server.ts --outDir dist/mcp-server --module commonjs --target es2022",
    "agents:build": "npm run build && npm run intent-agent:build",
    "formal-agent": "tsx src/mcp-server/formal-server.ts",
    "formal-agent:dev": "tsx watch src/mcp-server/formal-server.ts",
    "formal-spec": "npm run formal-agent",
    "validate-specs": "tsx -e \"import { FormalAgent } from './src/agents/formal-agent.js'; const agent = new FormalAgent(); console.log('Validating all specifications...'); agent.getSpecifications().forEach(spec => console.log(spec.validation));\"",
    "generate-tla": "tsx -e \"import { FormalAgent } from './src/agents/formal-agent.js'; const agent = new FormalAgent(); console.log('TLA+ generation tools ready');\"",
    "model-check": "tsx -e \"import { FormalAgent } from './src/agents/formal-agent.js'; const agent = new FormalAgent(); console.log('Model checking tools ready');\"",
    "verify:model": "node scripts/verify/run-model-checks.mjs",
    "operate:server": "tsx src/mcp-server/operate-server.ts",
    "operate:dev": "tsx watch src/mcp-server/operate-server.ts",
    "container:server": "tsx src/mcp-server/container-server.ts",
    "container:dev": "tsx watch src/mcp-server/container-server.ts",
    "container:demo": "tsx -e \"import { ContainerAgent } from './src/agents/container-agent.js'; console.log('Container verification demo ready');\"",
    "codex:quickstart": "node scripts/codex/quickstart.mjs",
    "codex:adapter": "node scripts/codex/adapter-stdio.mjs",
    "codex:spec:stdio": "node scripts/codex/spec-stdio.mjs",
    "codex:spec:iterate": "node scripts/codex/spec-iter.mjs",
    "codex:spec:prompt": "node scripts/codex/issues-to-revision-prompt.mjs",
    "codex:generate:contracts": "node scripts/codex/generate-contract-tests.mjs",
    "codex:generate:tests": "tsx scripts/codex/generate-openapi-tests.ts",
    "codex:mcp:intent": "tsx src/mcp-server/intent-server.ts",
    "codex:mcp:test": "tsx src/mcp-server/test-generation-server.ts",
    "codex:mcp:verify": "tsx src/mcp-server/verify-server.ts",
    "codex:mcp:code": "tsx src/mcp-server/code-generation-server.ts",
    "codex:mcp:spec": "tsx src/mcp-server/spec-synthesis-server.ts",
    "test:container": "vitest run tests/container/",
    "test:phase3.2": "vitest run tests/testing/",
    "test:playwright": "vitest run tests/testing/playwright-integration.test.ts",
    "test:intelligent": "vitest run tests/testing/intelligent-test-selection.test.ts",
    "playwright:install": "playwright install",
    "e2e:demo": "tsx -e \"import { PlaywrightIntegration } from './src/testing/playwright-integration.js'; console.log('Playwright E2E demo ready');\"",
    "visual:demo": "tsx -e \"import { VisualRegressionTesting } from './src/testing/visual-regression.js'; console.log('Visual regression demo ready');\"",
    "smart-test:demo": "tsx -e \"import { IntelligentTestSelection } from './src/testing/intelligent-test-selection.js'; console.log('Intelligent test selection demo ready');\"",
    "test:optimization": "vitest run tests/optimization/",
    "test:phase3.3": "vitest run tests/optimization/",
    "test:parallel:vitest": "vitest run tests/optimization/parallel.test.ts",
    "test:monitoring": "vitest run tests/optimization/monitoring.test.ts",
    "parallel:demo": "tsx src/optimization/parallel/demo.ts",
    "monitoring:demo": "tsx src/optimization/monitoring/demo.ts",
    "test:integration": "vitest run tests/optimization/system-integration.test.ts",
    "test:benchmarks": "vitest run tests/optimization/performance-benchmarks.test.ts",
    "test:phase3.3:full": "vitest run tests/optimization/monitoring.test.ts tests/optimization/parallel.test.ts tests/optimization/system-integration.test.ts",
    "benchmark:performance": "vitest run tests/optimization/performance-benchmarks.test.ts --reporter=verbose",
    "optimization:demo": "tsx -e \"import { startDefaultOptimizationSystem } from './src/optimization/index.js'; console.log('Complete optimization system demo ready');\"",
    "analyze:demo": "tsx -e \"import { SequentialInferenceEngine } from './src/engines/sequential-inference-engine.js'; import { DependencyAnalyzer } from './src/analysis/dependency-analyzer.js'; console.log('Sequential Inference Engine & Dependency Analyzer demo ready');\"",
    "dependency:analyze": "tsx -e \"import { DependencyAnalyzer } from './src/analysis/dependency-analyzer.js'; console.log('Dependency Analyzer ready');\"",
    "performance:monitor": "tsx -e \"import { startDefaultMonitoring } from './src/optimization/monitoring/index.js'; console.log('Performance monitoring demo ready');\"",
    "validate:specs": "bash scripts/validate-specs.sh",
    "validate:spec": "bash scripts/validate-specs.sh -f",
    "validate:specs:ci": "bash scripts/validate-specs.sh --no-color",
    "hooks:setup-spec-validation": "cp scripts/hooks/pre-commit-spec-validation .git/hooks/pre-commit-spec-validation && chmod +x .git/hooks/pre-commit-spec-validation",
    "codegen:generate": "bash scripts/codegen-tools.sh generate-all",
    "codegen:drift": "bash scripts/codegen-tools.sh check-drift",
    "codegen:regen": "bash scripts/codegen-tools.sh regenerate-drifted",
    "codegen:watch": "bash scripts/codegen-tools.sh watch",
    "codegen:validate": "bash scripts/codegen-tools.sh validate",
    "codegen:status": "bash scripts/codegen-tools.sh status",
    "codegen:clean": "bash scripts/codegen-tools.sh clean",
    "quality:run": "tsx src/cli/index.ts quality run",
    "quality:run:dev": "tsx src/cli/index.ts quality run --env=development",
    "quality:run:prod": "tsx src/cli/index.ts quality run --env=production",
    "quality:run:accessibility": "tsx src/cli/index.ts quality run --gates=accessibility",
    "quality:run:coverage": "tsx src/cli/index.ts quality run --gates=coverage",
    "quality:run:all": "tsx src/cli/index.ts quality run --gates=accessibility,coverage,lighthouse,linting,security,tdd",
    "quality:list": "tsx src/cli/index.ts quality list",
    "verify:conformance": "node scripts/formal/verify-conformance.mjs",
    "verify:alloy": "node scripts/formal/verify-alloy.mjs",
    "verify:tla": "node scripts/formal/verify-tla.mjs",
    "verify:smt": "node scripts/formal/verify-smt.mjs",
    "verify:formal": "node scripts/formal/print-context.mjs && node scripts/formal/verify-conformance.mjs && node scripts/formal/verify-alloy.mjs && node scripts/formal/verify-tla.mjs --engine=tlc && node scripts/formal/verify-smt.mjs --solver=z3 && node scripts/formal/aggregate-formal.mjs && node scripts/formal/print-summary.mjs",
    "formal:summary": "node scripts/formal/aggregate-formal.mjs && node scripts/formal/print-summary.mjs",
    "conformance:sample": "tsx src/cli/index.ts conformance sample --rules samples/conformance/sample-rules.json --config samples/conformance/sample-config.json --data samples/conformance/sample-data.json --context samples/conformance/sample-context.json",
    "conformance:verify:sample": "tsx src/cli/index.ts conformance verify -i samples/conformance/sample-data.json --context-file samples/conformance/sample-context.json --rules samples/conformance/sample-rules.json --format json --output hermetic-reports/conformance/sample-results.json",
    "tools:formal:check": "node scripts/formal/tools-check.mjs",
    "trace:validate": "node scripts/formal/trace-validate.mjs samples/conformance/sample-traces.json",
    "trace:kvonce:replay": "node scripts/trace/run-kvonce-trace-replay.mjs",
    "spec:check:tla": "node scripts/formal/spec-check-tla.mjs spec/tla/DomainSpec.tla",
    "spec:check:alloy": "node scripts/formal/spec-check-alloy.mjs spec/alloy/Domain.als",
    "spec:kv-once:tlc": "node scripts/formal/verify-tla.mjs --engine=tlc --file specs/formal/10_abstract/KvOnce.tla --timeout 60000",
    "spec:kv-once:apalache": "node scripts/formal/verify-tla.mjs --engine=apalache --file specs/formal/10_abstract/KvOnce.tla --timeout 60000",
    "quality:policy": "tsx src/cli/index.ts quality policy",
    "quality:validate": "tsx src/cli/index.ts quality validate",
    "quality:report": "tsx src/cli/index.ts quality report",
    "quality:init": "tsx src/cli/index.ts quality init",
    "quality:gates": "npm run quality:run",
    "quality:gates:dev": "npm run quality:run:dev",
    "quality:gates:prod": "npm run quality:run:prod",
    "lint:unused": "ts-prune",
    "lint:deps": "madge --circular --extensions ts src",
    "state:save": "tsx src/cli/index.ts enhanced-state save",
    "state:load": "tsx src/cli/index.ts enhanced-state load",
    "state:versions": "tsx src/cli/index.ts enhanced-state versions",
    "state:snapshot": "tsx src/cli/index.ts enhanced-state snapshot",
    "state:stats": "tsx src/cli/index.ts enhanced-state stats",
    "state:gc": "tsx src/cli/index.ts enhanced-state gc",
    "state:export": "tsx src/cli/index.ts enhanced-state export",
    "state:import": "tsx src/cli/index.ts enhanced-state import",
    "spec:compile": "tsx src/cli/index.ts spec compile",
    "spec:lint": "tsx src/cli/index.ts spec lint",
    "spec:validate": "tsx src/cli/index.ts spec validate",
    "spec:validate:relaxed": "node scripts/spec/spec-tools.mjs validate-relaxed",
    "spec:validate:strict": "node scripts/spec/spec-tools.mjs validate-strict",
    "spec:codegen": "node scripts/spec/spec-tools.mjs codegen",
    "circuit-breaker:create": "tsx src/cli/index.ts circuit-breaker create",
    "circuit-breaker:list": "tsx src/cli/index.ts circuit-breaker list",
    "circuit-breaker:stats": "tsx src/cli/index.ts circuit-breaker stats",
    "circuit-breaker:health": "tsx src/cli/index.ts circuit-breaker health",
    "circuit-breaker:test": "tsx src/cli/index.ts circuit-breaker test",
    "circuit-breaker:watch": "tsx src/cli/index.ts circuit-breaker watch",
    "circuit-breaker:reset": "tsx src/cli/index.ts circuit-breaker reset",
    "test:golden": "vitest run tests/golden/",
    "test:golden:approve": "tsx scripts/golden-test-manager.ts approve",
    "test:golden:diff": "tsx scripts/golden-test-manager.ts diff",
    "test:golden:status": "tsx scripts/golden-test-manager.ts status",
    "test:golden:reset": "tsx scripts/golden-test-manager.ts reset",
    "test:fuzz": "vitest run tests/cli/fuzz.spec.ts",
    "test:fuzz:quick": "vitest run tests/cli/fuzz.spec.ts --timeout 10000",
    "test:quality:full": "npm run test:golden:status && npm run test:fuzz && npm run test:metamorphic:invariant",
    "test:metamorphic:invariant": "vitest run tests/metamorphic/invariant-preservation.test.ts",
    "test:metamorphic": "vitest run tests/metamorphic/",
    "test:cli:fuzz": "vitest run tests/cli/fuzz.spec.ts",
    "test:contracts": "vitest run tests/contracts/",
    "test:doctest": "tsx scripts/doctest.ts",
    "test:doctest:docs": "tsx scripts/doctest.ts 'docs/**/*.md'",
    "test:doctest:readme": "tsx scripts/doctest.ts 'README.md'",
    "test:diff": "tsx scripts/diff-generate.ts",
    "test:randomize": "vitest run tests/utils/test-randomizer.spec.ts",
    "test:quality": "npm run test:golden && npm run test:metamorphic && npm run test:cli:fuzz && npm run test:contracts && npm run test:doctest && npm run test:randomize",
    "test:quality:fast": "npm run test:golden && npm run test:cli:fuzz && npm run test:doctest",
    "api:emit": "tsc -p tsconfig.types.json",
    "api:snapshot": "node scripts/api/snapshot-types.mjs",
    "api:check": "node scripts/api/check-types.mjs",
    "api:update": "pnpm api:emit && pnpm api:snapshot",
    "api:report": "api-extractor run --local",
    "api:diff": "node scripts/api/diff-api.mjs",
    "test:ci": "vitest run --config configs/vitest.ci.config.ts",
    "test:ci:stable": "vitest run --config configs/vitest.ci.config.ts --exclude \"**/system-integration.test.ts\"",
    "test:parallel:ci": "vitest run --config configs/vitest.optimized.config.ts --reporter=junit --reporter=json",
    "test:performance": "vitest run --config configs/vitest.optimized.config.ts --reporter=verbose --run --coverage=false",
    "test:flake-detection": "vitest run --config configs/vitest.optimized.config.ts --retry=5 --reporter=json",
    "test:property": "node scripts/testing/property-harness.mjs",
    "test:property:focus": "node scripts/testing/property-harness.mjs --focus=$TRACE_ID",
    "bdd:lint": "node scripts/bdd/lint.mjs",
    "bdd:suggest": "node scripts/bdd/ltl-suggest.mjs",
    "test:replay": "node scripts/testing/replay-runner.mjs",
    "test:replay:focus": "node scripts/testing/replay-runner.mjs --focus=$TRACE_ID",
    "test:replay:strict": "REPLAY_ONHAND_MIN=0 REPLAY_DISABLE= node scripts/testing/replay-runner.mjs",
    "test:replay:relaxed": "REPLAY_DISABLE=allocated_le_onhand node scripts/testing/replay-runner.mjs",
    "artifacts:aggregate": "node scripts/adapters/aggregate-artifacts.mjs",
    "lint:actions": "bash scripts/ci/actionlint.sh",
    "generate:artifacts:preview": "bash scripts/ci/run-generate-artifacts-preview.sh",
    "pipelines:api-fuzz": "node scripts/pipelines/run-api-fuzz.mjs",
    "pipelines:mutation:quick": "bash scripts/mutation/run-scoped.sh --quick",
    "pipelines:mutation:enhanced": "bash scripts/mutation/run-scoped.sh --quick --mutate src/utils/enhanced-state-manager.ts",
    "pipelines:pact": "node scripts/pipelines/run-pact-contracts.mjs",
    "pipelines:full": "node scripts/pipelines/run-full-pipeline.mjs"
  },
  "dependencies": {
    "@ae-framework/spec-compiler": "file:./packages/spec-compiler",
    "@aws-sdk/client-s3": "^3.901.0",
    "@modelcontextprotocol/sdk": "^0.5.0",
    "@opentelemetry/api": "^1.9.0",
    "@opentelemetry/api-logs": "^0.52.0",
    "@opentelemetry/auto-instrumentations-node": "^0.47.0",
    "@opentelemetry/exporter-metrics-otlp-grpc": "^0.52.0",
    "@opentelemetry/exporter-trace-otlp-grpc": "^0.52.0",
    "@opentelemetry/resources": "^1.25.0",
    "@opentelemetry/sdk-metrics": "^1.25.0",
    "@opentelemetry/sdk-node": "^0.52.0",
    "@opentelemetry/sdk-trace-base": "1.30.1",
    "@opentelemetry/semantic-conventions": "^1.25.0",
    "@types/uuid": "^10.0.0",
    "cac": "^6.7.14",
    "chalk": "^5.3.0",
    "commander": "^12.0.0",
    "execa": "^9.6.0",
    "fastify": "^5.0.0",
    "fastify-openapi-glue": "^4.5.0",
    "gitleaks": "^1.0.0",
    "glob": "^10.3.0",
    "handlebars": "^4.7.8",
    "js-yaml": "^4.1.0",
    "micromatch": "^4.0.8",
    "pg": "^8.12.0",
    "pino": "^9.0.0",
    "tinybench": "^5.0.1",
    "uuid": "^11.1.0",
    "which": "^5.0.0",
    "yaml": "^2.8.1",
    "zod": "^3.23.8"
  },
  "devDependencies": {
    "@babel/core": "^7.23.0",
    "@babel/preset-env": "^7.23.0",
    "@babel/preset-react": "^7.23.0",
    "@babel/preset-typescript": "^7.23.0",
    "@cucumber/cucumber": "^11.0.0",
    "@eslint/js": "^9.34.0",
    "@lhci/cli": "^0.12.0",
    "@microsoft/api-extractor": "^7.52.11",
    "@microsoft/api-extractor-model": "^7.30.7",
    "@playwright/test": "^1.47.0",
    "@stryker-mutator/core": "^8.5.0",
    "@stryker-mutator/typescript-checker": "^8.7.1",
    "@stryker-mutator/vitest-runner": "^8.7.1",
    "@types/handlebars": "^4.1.0",
    "@types/js-yaml": "^4.0.5",
    "@types/micromatch": "^4.0.9",
    "@types/node": "^22.0.0",
    "@types/pg": "^8.11.0",
    "@types/which": "^3.0.4",
    "@typescript-eslint/eslint-plugin": "^8.39.0",
    "@typescript-eslint/parser": "^8.39.0",
    "@vitest/coverage-v8": "^2.0.5",
    "ajv": "^8.12.0",
    "ajv-formats": "^2.1.1",
    "babel-jest": "^29.7.0",
    "chromatic": "^7.0.0",
    "eslint": "^9.8.0",
    "fast-check": "^3.19.0",
    "jest": "^29.7.0",
    "jest-axe": "^8.0.0",
    "jest-dom": "^4.0.0",
    "jest-environment-jsdom": "^29.7.0",
    "jest-junit": "^16.0.0",
    "jsdom": "^22.1.0",
    "nyc": "^15.1.0",
    "playwright": "^1.47.0",
    "ts-morph": "^26.0.0",
    "tsd": "^0.33.0",
    "tsx": "^4.16.0",
    "type-coverage": "^2.29.7",
    "typescript": "^5.5.4",
    "typescript-eslint": "^8.40.0",
    "vitest": "^2.0.5",
    "why-is-node-running": "^3.2.2"
  },
  "files": [
    "dist/**",
    "templates/**",
    "docs/**",
    "types/**",
    "packages/**",
    "ae.config.ts",
    "ae-framework*.yml",
    "api-extractor.json"
  ],
  "peerDependenciesMeta": {
    "@anthropic-ai/sdk": {
      "optional": true
    },
    "@google/generative-ai": {
      "optional": true
    },
    "openai": {
      "optional": true
    }
  },
  "engines": {
    "node": ">=20.11 <23"
  },
  "exports": {
    ".": "./dist/src/index.js"
  },
  "packageManager": "pnpm@10.0.0"
}
