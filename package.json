{
  "name": "ae-framework",
  "version": "1.0.0",
  "description": "AI-Agent Enabled Framework with TDD enforcement",
  "private": false,
  "type": "module",
  "bin": {
    "ae-framework": "./dist/cli/index.js",
    "ae-phase": "./dist/cli/phase-cli.js",
    "ae-approve": "./dist/cli/approval-cli.js",
    "ae-slash": "./dist/cli/slash-cli.js",
    "ae-ui": "./dist/cli/ae-ui-alias.js",
    "ae-sbom": "./dist/cli/sbom-cli.js",
    "ae-resilience": "./dist/cli/resilience-cli.js"
  },
  "scripts": {
    "dev": "tsx watch src/index.ts",
    "dev:web": "pnpm --filter @ae-framework/web dev",
    "dev:storybook": "pnpm --filter @ae-framework/storybook dev",
    "build": "tsc",
    "build:frontend": "pnpm run build:tokens && pnpm run build:ui && pnpm --filter @ae-framework/web build",
    "build:tokens": "pnpm --filter @ae-framework/design-tokens build",
    "build:ui": "pnpm --filter @ae-framework/ui build",
    "build:storybook": "pnpm --filter @ae-framework/storybook build-storybook",
    "build:cli": "tsc && chmod +x dist/cli/index.js && chmod +x dist/cli/phase-cli.js && chmod +x dist/cli/approval-cli.js && chmod +x dist/cli/slash-cli.js && chmod +x dist/cli/ui-scaffold-cli.js && chmod +x dist/cli/ae-ui-alias.js",
    "phase": "tsx src/cli/phase-cli.ts",
    "lint": "eslint . && pnpm --filter @ae-framework/ui lint && pnpm --filter @ae-framework/web lint",
    "lint:frontend": "pnpm --filter @ae-framework/ui lint && pnpm --filter @ae-framework/web lint",
    "type-check:frontend": "pnpm --filter @ae-framework/ui type-check && pnpm --filter @ae-framework/web type-check",
    "clean:frontend": "pnpm --filter @ae-framework/design-tokens clean && pnpm --filter @ae-framework/ui clean",
    "test": "vitest run",
    "test:fast": "vitest run --exclude \"tests/testing/intelligent-test-selection.test.ts\"",
    "test:a11y": "jest --config jest.a11y.config.cjs",
    "test:a11y:report": "node scripts/generate-a11y-report.cjs",
    "test:visual": "vitest run tests/testing/visual-regression.test.ts",
    "test:visual:report": "node scripts/generate-visual-report.cjs",
    "test:coverage": "nyc npm test",
    "test:coverage:ci": "nyc --reporter=text-lcov npm test | tee coverage/lcov.info",
    "test:phase3.2:core": "vitest run tests/testing/playwright-integration.test.ts tests/testing/visual-regression.test.ts",
    "test:all": "npm run test && npm run bdd && npm run pbt",
    "coverage": "vitest run --coverage",
    "bdd": "cucumber-js",
    "pbt": "vitest run -c tests/property/vitest.config.ts",
    "mbt": "node tests/mbt/run.js",
    "mutation": "stryker run",
    "flake:detect": "node scripts/flake-detector.js",
    "flake:detect:quick": "node scripts/flake-detector.js --runs 5 --threshold 0.2",
    "flake:detect:thorough": "node scripts/flake-detector.js --runs 20 --threshold 0.05",
    "ir:validate": "node scripts/ir-schema-validator.js",
    "ir:validate:project": "node scripts/ir-schema-validator.js --project .",
    "ir:validate:rules": "node scripts/ir-schema-validator.js --rules",
    "ir:sample": "node scripts/ir-schema-validator.js --sample",
    "package:quality": "node scripts/package-quality-analyzer.js",
    "package:audit": "npm audit --audit-level moderate",
    "package:outdated": "npm outdated",
    "package:update": "npx npm-check-updates --target minor -u && npm install",
    "quality:scorecard": "node scripts/quality-scorecard-generator.js",
    "benchmark:regression": "node scripts/benchmark-regression-detector.js",
    "benchmark:baseline": "node scripts/benchmark-regression-detector.js --set-baseline",
    "hermetic:validate": "node scripts/hermetic-test-validator.js",
    "hermetic:quick": "node scripts/hermetic-test-quick-validator.js",
    "security:analyze": "node scripts/security-analyzer.js",
    "security:secrets": "npx gitleaks detect --no-git --verbose",
    "security:audit": "npm audit --audit-level=moderate",
    "security:full": "npm run security:analyze && npm run security:secrets && npm run security:audit",
    "accessibility:analyze": "node scripts/accessibility-analyzer.js",
    "accessibility:test": "npm run test:a11y",
    "accessibility:lighthouse": "npx lhci autorun --collect.settings.onlyCategories=accessibility",
    "accessibility:full": "npm run accessibility:analyze && npm run accessibility:test",
    "release:analyze": "node scripts/release-operations.js",
    "release:setup": "node scripts/release-operations.js setup",
    "release:changeset": "npx changeset",
    "release:version": "npx changeset version",
    "release:publish": "npx changeset publish",
    "failures:analyze": "node scripts/failure-visualization.js",
    "failures:collect": "node scripts/failure-visualization.js collect",
    "failures:visualize": "node scripts/failure-visualization.js visualize",
    "failures:report": "npm run failures:collect && npm run failures:visualize",
    "hermetic:analyze": "node scripts/hermetic-ci-enhancer.js",
    "hermetic:enhance": "node scripts/hermetic-ci-enhancer.js enhance",
    "hermetic:full": "npm run hermetic:validate && npm run hermetic:quick && npm run hermetic:analyze",
    "contract": "pact-broker can-i-deploy || true",
    "ae-framework": "tsx src/cli/index.ts",
    "setup-hooks": "cp scripts/hooks/pre-commit .git/hooks/pre-commit && chmod +x .git/hooks/pre-commit",
    "validate-tdd": "npm run ae-framework -- guard",
    "agent:test": "tsx src/agents/test-generation-agent.ts",
    "agent:code": "tsx src/agents/code-generation-agent.ts",
    "mcp:tdd": "tsx src/mcp-server/tdd-server.ts",
    "mcp:test": "tsx src/mcp-server/test-generation-server.ts",
    "mcp:test-gen": "tsx src/mcp-server/test-generation-server.ts",
    "mcp:code": "tsx src/mcp-server/code-generation-server.ts",
    "verify:server": "tsx src/mcp-server/verify-server.ts",
    "verify:full": "tsx -e \"import {VerifyAgent} from './src/agents/verify-agent.js'; const agent = new VerifyAgent(); console.log('Verify Agent initialized')\"",
    "verify:tests": "npm run test && npm run pbt && npm run bdd",
    "verify:quality": "npm run lint && npm run build",
    "verify:security": "npm audit --audit-level moderate",
    "security:test-headers": "tsx src/cli/index.ts security test-headers",
    "security:check-headers": "tsx src/cli/index.ts security check-headers",
    "security:scan": "tsx src/cli/index.ts security scan",
    "security:config": "tsx src/cli/index.ts security show-config",
    "verify:all": "npm run verify:tests && npm run verify:quality && npm run verify:security && npm run mutation",
    "intent-agent": "tsx src/mcp-server/intent-server.ts",
    "intent-agent:build": "tsc src/mcp-server/intent-server.ts --outDir dist/mcp-server --module commonjs --target es2022",
    "agents:build": "npm run build && npm run intent-agent:build",
    "formal-agent": "tsx src/mcp-server/formal-server.ts",
    "formal-agent:dev": "tsx watch src/mcp-server/formal-server.ts",
    "formal-spec": "npm run formal-agent",
    "validate-specs": "tsx -e \"import { FormalAgent } from './src/agents/formal-agent.js'; const agent = new FormalAgent(); console.log('Validating all specifications...'); agent.getSpecifications().forEach(spec => console.log(spec.validation));\"",
    "generate-tla": "tsx -e \"import { FormalAgent } from './src/agents/formal-agent.js'; const agent = new FormalAgent(); console.log('TLA+ generation tools ready');\"",
    "model-check": "tsx -e \"import { FormalAgent } from './src/agents/formal-agent.js'; const agent = new FormalAgent(); console.log('Model checking tools ready');\"",
    "operate:server": "tsx src/mcp-server/operate-server.ts",
    "operate:dev": "tsx watch src/mcp-server/operate-server.ts",
    "container:server": "tsx src/mcp-server/container-server.ts",
    "container:dev": "tsx watch src/mcp-server/container-server.ts",
    "container:demo": "tsx -e \"import { ContainerAgent } from './src/agents/container-agent.js'; console.log('Container verification demo ready');\"",
    "test:container": "vitest run tests/container/",
    "test:phase3.2": "vitest run tests/testing/",
    "test:playwright": "vitest run tests/testing/playwright-integration.test.ts",
    "test:intelligent": "vitest run tests/testing/intelligent-test-selection.test.ts",
    "playwright:install": "playwright install",
    "e2e:demo": "tsx -e \"import { PlaywrightIntegration } from './src/testing/playwright-integration.js'; console.log('Playwright E2E demo ready');\"",
    "visual:demo": "tsx -e \"import { VisualRegressionTesting } from './src/testing/visual-regression.js'; console.log('Visual regression demo ready');\"",
    "smart-test:demo": "tsx -e \"import { IntelligentTestSelection } from './src/testing/intelligent-test-selection.js'; console.log('Intelligent test selection demo ready');\"",
    "test:optimization": "vitest run tests/optimization/",
    "test:phase3.3": "vitest run tests/optimization/",
    "test:parallel": "vitest run tests/optimization/parallel.test.ts",
    "test:monitoring": "vitest run tests/optimization/monitoring.test.ts",
    "parallel:demo": "tsx src/optimization/parallel/demo.ts",
    "monitoring:demo": "tsx src/optimization/monitoring/demo.ts",
    "test:integration": "vitest run tests/optimization/system-integration.test.ts",
    "test:benchmarks": "vitest run tests/optimization/performance-benchmarks.test.ts",
    "test:phase3.3:full": "vitest run tests/optimization/monitoring.test.ts tests/optimization/parallel.test.ts tests/optimization/system-integration.test.ts",
    "benchmark:performance": "vitest run tests/optimization/performance-benchmarks.test.ts --reporter=verbose",
    "optimization:demo": "tsx -e \"import { startDefaultOptimizationSystem } from './src/optimization/index.js'; console.log('Complete optimization system demo ready');\"",
    "analyze:demo": "tsx -e \"import { SequentialInferenceEngine } from './src/engines/sequential-inference-engine.js'; import { DependencyAnalyzer } from './src/analysis/dependency-analyzer.js'; console.log('Sequential Inference Engine & Dependency Analyzer demo ready');\"",
    "dependency:analyze": "tsx -e \"import { DependencyAnalyzer } from './src/analysis/dependency-analyzer.js'; console.log('Dependency Analyzer ready');\"",
    "performance:monitor": "tsx -e \"import { startDefaultMonitoring } from './src/optimization/monitoring/index.js'; console.log('Performance monitoring demo ready');\"",
    "validate:specs": "bash scripts/validate-specs.sh",
    "validate:spec": "bash scripts/validate-specs.sh -f",
    "validate:specs:ci": "bash scripts/validate-specs.sh --no-color",
    "hooks:setup-spec-validation": "cp scripts/hooks/pre-commit-spec-validation .git/hooks/pre-commit-spec-validation && chmod +x .git/hooks/pre-commit-spec-validation",
    "codegen:generate": "bash scripts/codegen-tools.sh generate-all",
    "codegen:drift": "bash scripts/codegen-tools.sh check-drift",
    "codegen:regen": "bash scripts/codegen-tools.sh regenerate-drifted",
    "codegen:watch": "bash scripts/codegen-tools.sh watch",
    "codegen:validate": "bash scripts/codegen-tools.sh validate",
    "codegen:status": "bash scripts/codegen-tools.sh status",
    "codegen:clean": "bash scripts/codegen-tools.sh clean",
    "quality:run": "tsx src/cli/index.ts quality run",
    "quality:run:dev": "tsx src/cli/index.ts quality run --env=development",
    "quality:run:prod": "tsx src/cli/index.ts quality run --env=production",
    "quality:run:accessibility": "tsx src/cli/index.ts quality run --gates=accessibility",
    "quality:run:coverage": "tsx src/cli/index.ts quality run --gates=coverage",
    "quality:run:all": "tsx src/cli/index.ts quality run --gates=accessibility,coverage,lighthouse,linting,security,tdd",
    "quality:list": "tsx src/cli/index.ts quality list",
    "quality:policy": "tsx src/cli/index.ts quality policy",
    "quality:validate": "tsx src/cli/index.ts quality validate",
    "quality:report": "tsx src/cli/index.ts quality report",
    "quality:init": "tsx src/cli/index.ts quality init",
    "quality:gates": "npm run quality:run",
    "quality:gates:dev": "npm run quality:run:dev",
    "quality:gates:prod": "npm run quality:run:prod",
    "lint:unused": "ts-prune",
    "lint:deps": "madge --circular --extensions ts src",
    "test:types": "tsc --noEmit --strict",
    "state:save": "tsx src/cli/index.ts enhanced-state save",
    "state:load": "tsx src/cli/index.ts enhanced-state load",
    "state:versions": "tsx src/cli/index.ts enhanced-state versions",
    "state:snapshot": "tsx src/cli/index.ts enhanced-state snapshot",
    "state:stats": "tsx src/cli/index.ts enhanced-state stats",
    "state:gc": "tsx src/cli/index.ts enhanced-state gc",
    "state:export": "tsx src/cli/index.ts enhanced-state export",
    "state:import": "tsx src/cli/index.ts enhanced-state import",
    "spec:compile": "tsx src/cli/index.ts spec compile",
    "spec:lint": "tsx src/cli/index.ts spec lint",
    "spec:validate": "tsx src/cli/index.ts spec validate",
    "circuit-breaker:create": "tsx src/cli/index.ts circuit-breaker create",
    "circuit-breaker:list": "tsx src/cli/index.ts circuit-breaker list",
    "circuit-breaker:stats": "tsx src/cli/index.ts circuit-breaker stats",
    "circuit-breaker:health": "tsx src/cli/index.ts circuit-breaker health",
    "circuit-breaker:test": "tsx src/cli/index.ts circuit-breaker test",
    "circuit-breaker:watch": "tsx src/cli/index.ts circuit-breaker watch",
    "circuit-breaker:reset": "tsx src/cli/index.ts circuit-breaker reset"
  },
  "dependencies": {
    "@ae-framework/spec-compiler": "file:./packages/spec-compiler",
    "@modelcontextprotocol/sdk": "^0.5.0",
    "@opentelemetry/api": "^1.9.0",
    "@opentelemetry/api-logs": "^0.52.0",
    "@opentelemetry/auto-instrumentations-node": "^0.47.0",
    "@opentelemetry/exporter-metrics-otlp-grpc": "^0.52.0",
    "@opentelemetry/exporter-trace-otlp-grpc": "^0.52.0",
    "@opentelemetry/resources": "^1.25.0",
    "@opentelemetry/sdk-metrics": "^1.25.0",
    "@opentelemetry/sdk-node": "^0.52.0",
    "@opentelemetry/semantic-conventions": "^1.25.0",
    "@types/uuid": "^10.0.0",
    "chalk": "^5.3.0",
    "commander": "^12.0.0",
    "fastify": "^5.0.0",
    "fastify-openapi-glue": "^4.5.0",
    "gitleaks": "^1.0.0",
    "glob": "^10.3.0",
    "handlebars": "^4.7.8",
    "js-yaml": "^4.1.0",
    "pg": "^8.12.0",
    "pino": "^9.0.0",
    "uuid": "^11.1.0",
    "zod": "^3.23.8"
  },
  "devDependencies": {
    "@babel/core": "^7.23.0",
    "@babel/preset-env": "^7.23.0",
    "@babel/preset-react": "^7.23.0",
    "@babel/preset-typescript": "^7.23.0",
    "@cucumber/cucumber": "^11.0.0",
    "@lhci/cli": "^0.12.0",
    "@playwright/test": "^1.47.0",
    "@stryker-mutator/core": "^8.5.0",
    "@stryker-mutator/typescript-checker": "^8.7.1",
    "@stryker-mutator/vitest-runner": "^8.7.1",
    "@types/handlebars": "^4.1.0",
    "@types/js-yaml": "^4.0.5",
    "@types/node": "^22.0.0",
    "@types/pg": "^8.11.0",
    "@typescript-eslint/eslint-plugin": "^8.39.0",
    "@typescript-eslint/parser": "^8.39.0",
    "@vitest/coverage-v8": "^2.0.5",
    "babel-jest": "^29.7.0",
    "chromatic": "^7.0.0",
    "eslint": "^9.8.0",
    "fast-check": "^3.19.0",
    "jest": "^29.7.0",
    "jest-axe": "^8.0.0",
    "jest-dom": "^4.0.0",
    "jest-environment-jsdom": "^29.7.0",
    "jest-junit": "^16.0.0",
    "jsdom": "^22.1.0",
    "nyc": "^15.1.0",
    "playwright": "^1.47.0",
    "tsx": "^4.16.0",
    "typescript": "^5.5.4",
    "vitest": "^2.0.5"
  },
  "engines": {
    "node": ">=18.0.0",
    "pnpm": ">=8.0.0"
  },
  "packageManager": "pnpm@8.15.1"
}
