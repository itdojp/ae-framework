{
  "timestamp": "2025-08-20T00:37:01.220Z",
  "results": [
    {
      "name": "static-analysis-performance",
      "description": "TypeScript compilation and linting performance",
      "category": "build",
      "success": false,
      "error": "Command failed: npm run test:types",
      "duration": 8029,
      "memory": {
        "start": 4,
        "end": 4,
        "peak": 4,
        "delta": 0
      },
      "timestamp": "2025-08-20T00:34:39.743Z",
      "output": "\n> ae-framework@1.0.0 test:types\n> tsc --noEmit --strict\n\npackages/spec-compiler/src/compiler.ts(2,69): error TS6059: File '/home/claudecode/work/ae-framework/packages/spec-compiler/src/types.ts' is not under 'rootDir' '/home/claudecode/work/ae-framework/src'. 'rootDir' is expected to contain all source files.\n  The file is in the program because:\n    Imported via './types.js' from file '/home/claudecode/work/ae-framework/packages/spec-compiler/src/compiler.ts'\n    Imported via './types.js' from file '/home/claudecode/work/ae-framework/packages/spec-compiler/src/index.ts'\n    Imported via './types.js' from file '/home/claudecode/work/ae-framework/packages/spec-compiler/src/index.ts'\n    Imported via './types.js' from file '/home/claudecode/work/ae-framework/packages/spec-compiler/src/index.ts'\n    Imported via './types.js' from file '/home/claudecode/work/ae-framework/packages/spec-compiler/src/index.ts'\n    Imported via './types.js' from file '/home/claudecode/work/ae-framework/packag"
    },
    {
      "name": "test-execution-performance",
      "description": "Test suite execution performance",
      "category": "testing",
      "success": false,
      "error": "Command failed: npm run test:fast\n(node:135777) PromiseRejectionHandledWarning: Promise rejection was handled asynchronously (rejection id: 29)\n(Use `node --trace-warnings ...` to show where the warning was created)\n(node:135777) PromiseRejectionHandledWarning: Promise rejection was handled asynchronously (rejection id: 31)\n(node:135777) PromiseRejectionHandledWarning: Promise rejection was handled asynchronously (rejection id: 33)\nstderr | tests/optimization/system-integration.test.ts > Complete Optimization System Integration > System Lifecycle > should handle startup errors gracefully\n❌ Failed to start optimization system: Error: Startup failed\n    at /home/claudecode/work/ae-framework/tests/optimization/system-integration.test.ts:68:65\n    at file:///home/claudecode/work/ae-framework/node_modules/@vitest/runner/dist/index.js:146:14\n    at file:///home/claudecode/work/ae-framework/node_modules/@vitest/runner/dist/index.js:533:11\n    at runWithTimeout (file:///home/claudecode/work/ae-framework/node_modules/@vitest/runner/dist/index.js:39:7)\n    at runTest (file:///home/claudecode/work/ae-framework/node_modules/@vitest/runner/dist/index.js:1056:17)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///home/claudecode/work/ae-framework/node_modules/@vitest/runner/dist/index.js:1205:15)\n    at runSuite (file:///home/claudecode/work/ae-framework/node_modules/@vitest/runner/dist/index.js:1205:15)\n    at runSuite (file:///home/claudecode/work/ae-framework/node_modules/@vitest/runner/dist/index.js:1205:15)\n    at runFiles (file:///home/claudecode/work/ae-framework/node_modules/@vitest/runner/dist/index.js:1262:5)\n\nerror: unknown command 'invalid-command'\nstderr | tests/cegis/cegis-cli.test.ts > CEGISCli > error handling > should handle invalid artifact in input\n⚠️  Invalid artifact skipped: [\n  {\n    \"validation\": \"uuid\",\n    \"code\": \"invalid_string\",\n    \"message\": \"Invalid uuid\",\n    \"path\": [\n      \"id\"\n    ]\n  },\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"string\",\n    \"received\": \"undefined\",\n    \"path\": [\n      \"description\"\n    ],\n    \"message\": \"Required\"\n  },\n  {\n    \"expected\": \"'critical' | 'major' | 'minor' | 'info'\",\n    \"received\": \"undefined\",\n    \"code\": \"invalid_type\",\n    \"path\": [\n      \"severity\"\n    ],\n    \"message\": \"Required\"\n  },\n  {\n    \"expected\": \"'contract_violation' | 'test_failure' | 'type_error' | 'runtime_error' | 'build_error' | 'lint_error' | 'security_violation' | 'performance_issue' | 'accessibility_violation' | 'dependency_issue'\",\n    \"received\": \"undefined\",\n    \"code\": \"invalid_type\",\n    \"path\": [\n      \"category\"\n    ],\n    \"message\": \"Required\"\n  },\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"object\",\n    \"received\": \"undefined\",\n    \"path\": [\n      \"context\"\n    ],\n    \"message\": \"Required\"\n  },\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"object\",\n    \"received\": \"undefined\",\n    \"path\": [\n      \"evidence\"\n    ],\n    \"message\": \"Required\"\n  },\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"object\",\n    \"received\": \"undefined\",\n    \"path\": [\n      \"metadata\"\n    ],\n    \"message\": \"Required\"\n  }\n]\n\nstderr | tests/utils/enhanced-state-manager.test.ts > EnhancedStateManager > Failure Artifact Management > should persist and emit failure artifacts\n🚨 Failure artifact persisted: validation in test (medium)\n\nstderr | tests/utils/enhanced-state-manager.test.ts > EnhancedStateManager > Failure Artifact Management > should emit specific failure type events\n🚨 Failure artifact persisted: validation in test (high)\n\nstderr | tests/optimization/monitoring.test.ts > Alert Manager > should process performance alerts\n🚨 Alert fired: Critical memory usage: 95.2%\n\nstderr | tests/optimization/monitoring.test.ts > Alert Manager > should process metrics and evaluate rules\n🚨 Alert fired: High CPU: cpu.usage is 85 (threshold: 80)\n\nstderr | tests/optimization/monitoring.test.ts > Alert Manager > should silence and unsilence alerts\n🚨 Alert fired: High CPU usage\n\nstderr | tests/optimization/monitoring.test.ts > Alert Manager > should provide alert summary\n🚨 Alert fired: Test warning\n🚨 Alert fired: Test critical\n\nstderr | tests/utils/persona-manager.test.ts > PersonaManager > initialization > should create emergency profile on load failure\nFailed to initialize persona profile, using default: Error: Corrupted file\n    at /home/claudecode/work/ae-framework/tests/utils/persona-manager.test.ts:81:48\n    at file:///home/claudecode/work/ae-framework/node_modules/@vitest/runner/dist/index.js:146:14\n    at file:///home/claudecode/work/ae-framework/node_modules/@vitest/runner/dist/index.js:533:11\n    at runWithTimeout (file:///home/claudecode/work/ae-framework/node_modules/@vitest/runner/dist/index.js:39:7)\n    at runTest (file:///home/claudecode/work/ae-framework/node_modules/@vitest/runner/dist/index.js:1056:17)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///home/claudecode/work/ae-framework/node_modules/@vitest/runner/dist/index.js:1205:15)\n    at runSuite (file:///home/claudecode/work/ae-framework/node_modules/@vitest/runner/dist/index.js:1205:15)\n    at runSuite (file:///home/claudecode/work/ae-framework/node_modules/@vitest/runner/dist/index.js:1205:15)\n    at runFiles (file:///home/claudecode/work/ae-framework/node_modules/@vitest/runner/dist/index.js:1262:5)\n\nstderr | tests/container/container-agent.test.ts > ContainerAgent > initialization > should initialize successfully\nContainerfiles directory exists but is empty\nCreating default container configurations...\n\nstderr | tests/container/container-agent.test.ts > ContainerAgent > initialization > should create default Containerfiles\nContainerfiles directory exists but is empty\nCreating default container configurations...\n\nstderr | tests/container/container-agent.test.ts > ContainerAgent > initialization > should not initialize twice\nContainerfiles directory exists but is empty\nCreating default container configurations...\n\nstderr | tests/container/container-agent.test.ts > ContainerAgent > container engine detection > should list available engines\nContainerfiles directory exists but is empty\nCreating default container configurations...\n\nstderr | tests/container/container-agent.test.ts > ContainerAgent > verification jobs > should reject invalid project path\nContainerfiles directory exists but is empty\nCreating default container configurations...\n\nstderr | tests/container/container-agent.test.ts > ContainerAgent > verification jobs > should list empty jobs initially\nContainerfiles directory exists but is empty\nCreating default container configurations...\n\nstderr | tests/container/container-agent.test.ts > ContainerAgent > verification jobs > should handle job status for non-existent job\nContainerfiles directory exists but is empty\nCreating default container configurations...\n\nstderr | tests/container/container-agent.test.ts > ContainerAgent > status monitoring > should provide system status\nContainerfiles directory exists but is empty\nCreating default container configurations...\n\nstderr | tests/container/container-agent.test.ts > ContainerAgent > cleanup operations > should perform cleanup without errors\nContainerfiles directory exists but is empty\nCreating default container configurations...\n\nstderr | tests/container/container-agent.test.ts > ContainerAgent > image building > should validate build request parameters\nContainerfiles directory exists but is empty\nCreating default container configurations...\n\nstderr | tests/optimization/performance-benchmarks.test.ts > Performance Benchmarks > Error Recovery Benchmarks > should recover quickly from error conditions\n🚨 Alert fired: Critical error rate: 25.0%\n🚨 Performance Alert [CRITICAL]: Critical error rate: 25.0%\n\n⎯⎯⎯⎯⎯⎯ Failed Suites 14 ⎯⎯⎯⎯⎯⎯\n\n FAIL  tests/a11y/components.test.js [ tests/a11y/components.test.js ]\nReferenceError: describe is not defined\n ❯ tests/a11y/components.test.js:9:1\n      7| // import { axe } from 'jest-axe';\n      8| \n      9| describe('Component Accessibility Tests', () => {\n       | ^\n     10|   beforeEach(() => {\n     11|     document.body.innerHTML = '';\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[1/92]⎯\n\n FAIL  tests/api/security-headers.test.ts > Security Headers Middleware\nFastifyError: Method 'GET' already declared for route '/health'\n ❯ Object.addNewRoute node_modules/fastify/lib/route.js:359:19\n ❯ Object.route node_modules/fastify/lib/route.js:263:19\n ❯ Object.prepareRoute node_modules/fastify/lib/route.js:163:18\n ❯ Object._get [as get] node_modules/fastify/fastify.js:273:34\n ❯ Module.registerHealthEndpoint src/health/health-endpoint.ts:51:11\n     49| export async function registerHealthEndpoint(fastify: FastifyInstance)…\n     50|   // Simple health check endpoint\n     51|   fastify.get('/health', async (request: FastifyRequest, reply: Fastif…\n       |           ^\n     52|     const healthStatus = await getHealthStatus();\n     53|     \n ❯ Module.createServer src/api/server.ts:230:9\n ❯ tests/api/security-headers.test.ts:14:11\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[2/92]⎯\n\n FAIL  tests/api/security-headers.test.ts > Security Headers Middleware\nTypeError: Cannot read properties of undefined (reading 'close')\n ❯ tests/api/security-headers.test.ts:19:15\n     17| \n     18|   afterAll(async () => {\n     19|     await app.close();\n       |               ^\n     20|   });\n     21| \n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[3/92]⎯\n\n FAIL  tests/runtime/conformance-guards.test.ts [ tests/runtime/conformance-guards.test.ts ]\nTypeError: Cannot read properties of undefined (reading 'value')\n ❯ src/runtime/conformance-guards.ts:437:39\n    435| export function ValidateInput<T>(guard: ConformanceGuard<T>) {\n    436|   return function (target: any, propertyKey: string, descriptor: Prope…\n    437|     const originalMethod = descriptor.value;\n       |                                       ^\n    438| \n    439|     descriptor.value = async function (input: unknown, ...args: any[])…\n ❯ __decorateElement tests/runtime/conformance-guards.test.ts:68:29\n ❯ tests/runtime/conformance-guards.test.ts:297:5\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[4/92]⎯\n\n FAIL  tests/runtime/runtime-middleware.test.ts [ tests/runtime/runtime-middleware.test.ts ]\nError: [vitest] No \"metrics\" export is defined on the \"@opentelemetry/api\" mock. Did you forget to return it from \"vi.mock\"?\nIf you need to partially mock a module, you can use \"importOriginal\" helper inside:\n\nvi.mock(import(\"@opentelemetry/api\"), async (importOriginal) => {\n  const actual = await importOriginal()\n  return {\n    ...actual,\n    // your mocked methods\n  }\n})\n\n ❯ src/runtime/conformance-guards.ts:14:15\n     12| // Telemetry instances\n     13| const tracer = trace.getTracer('ae-framework-runtime-conformance');\n     14| const meter = metrics.getMeter('ae-framework-runtime-conformance');\n       |               ^\n     15| \n     16| // Metrics\n ❯ src/runtime/runtime-middleware.ts:2:31\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[5/92]⎯\n\n FAIL  tests/security/sbom-generator.test.ts [ tests/security/sbom-generator.test.ts ]\nError: [vitest] There was an error when mocking a module. If you are using \"vi.mock\" factory, make sure there are no top level variables inside, since this call is hoisted to top of the file. Read more: https://vitest.dev/api/vi.html#vi-mock\n ❯ src/security/sbom-generator.ts:3:31\n      1| /**\n      2|  * Software Bill of Materials (SBOM) Generator\n      3|  * Generates comprehensive SBOMs for security and compliance\n       |                               ^\n      4|  */\n      5| \n\nCaused by: ReferenceError: Cannot access 'mockGlob' before initialization\n ❯ tests/security/sbom-generator.test.ts:5:9\n ❯ src/security/sbom-generator.ts:3:31\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[6/92]⎯\n\n FAIL  apps/web/__e2e__/product.spec.ts [ apps/web/__e2e__/product.spec.ts ]\nError: Playwright Test did not expect test.describe() to be called here.\nMost common reasons include:\n- You are calling test.describe() in a configuration file.\n- You are calling test.describe() in a file that is imported by the configuration file.\n- You have two different versions of @playwright/test. This usually happens\n  when one of the dependencies in your package.json depends on @playwright/test.\n ❯ TestTypeImpl._currentSuite node_modules/playwright/lib/common/testType.js:74:13\n ❯ TestTypeImpl._describe node_modules/playwright/lib/common/testType.js:114:24\n ❯ Function.describe node_modules/playwright/lib/transform/transform.js:275:12\n ❯ apps/web/__e2e__/product.spec.ts:3:6\n      1| import { test, expect } from '@playwright/test';\n      2| \n      3| test.describe('Product Management', () => {\n       |      ^\n      4|   test.beforeEach(async ({ page }) => {\n      5|     // Navigate to products page\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[7/92]⎯\n\n FAIL  examples/inventory/apps/web/__e2e__/customer.spec.ts [ examples/inventory/apps/web/__e2e__/customer.spec.ts ]\nError: Playwright Test did not expect test.describe() to be called here.\nMost common reasons include:\n- You are calling test.describe() in a configuration file.\n- You are calling test.describe() in a file that is imported by the configuration file.\n- You have two different versions of @playwright/test. This usually happens\n  when one of the dependencies in your package.json depends on @playwright/test.\n ❯ TestTypeImpl._currentSuite node_modules/playwright/lib/common/testType.js:74:13\n ❯ TestTypeImpl._describe node_modules/playwright/lib/common/testType.js:114:24\n ❯ Function.describe node_modules/playwright/lib/transform/transform.js:275:12\n ❯ examples/inventory/apps/web/__e2e__/customer.spec.ts:3:6\n      1| import { test, expect } from '@playwright/test';\n      2| \n      3| test.describe('Customer Management', () => {\n       |      ^\n      4|   test.beforeEach(async ({ page }) => {\n      5|     // Navigate to customers page\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[8/92]⎯\n\n FAIL  examples/inventory/apps/web/__e2e__/order.spec.ts [ examples/inventory/apps/web/__e2e__/order.spec.ts ]\nError: Playwright Test did not expect test.describe() to be called here.\nMost common reasons include:\n- You are calling test.describe() in a configuration file.\n- You are calling test.describe() in a file that is imported by the configuration file.\n- You have two different versions of @playwright/test. This usually happens\n  when one of the dependencies in your package.json depends on @playwright/test.\n ❯ TestTypeImpl._currentSuite node_modules/playwright/lib/common/testType.js:74:13\n ❯ TestTypeImpl._describe node_modules/playwright/lib/common/testType.js:114:24\n ❯ Function.describe node_modules/playwright/lib/transform/transform.js:275:12\n ❯ examples/inventory/apps/web/__e2e__/order.spec.ts:3:6\n      1| import { test, expect } from '@playwright/test';\n      2| \n      3| test.describe('Order Management', () => {\n       |      ^\n      4|   test.beforeEach(async ({ page }) => {\n      5|     // Navigate to orders page\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[9/92]⎯\n\n FAIL  examples/inventory/apps/web/__e2e__/product.spec.ts [ examples/inventory/apps/web/__e2e__/product.spec.ts ]\nError: Playwright Test did not expect test.describe() to be called here.\nMost common reasons include:\n- You are calling test.describe() in a configuration file.\n- You are calling test.describe() in a file that is imported by the configuration file.\n- You have two different versions of @playwright/test. This usually happens\n  when one of the dependencies in your package.json depends on @playwright/test.\n ❯ TestTypeImpl._currentSuite node_modules/playwright/lib/common/testType.js:74:13\n ❯ TestTypeImpl._describe node_modules/playwright/lib/common/testType.js:114:24\n ❯ Function.describe node_modules/playwright/lib/transform/transform.js:275:12\n ❯ examples/inventory/apps/web/__e2e__/product.spec.ts:3:6\n      1| import { test, expect } from '@playwright/test';\n      2| \n      3| test.describe('Product Management', () => {\n       |      ^\n      4|   test.beforeEach(async ({ page }) => {\n      5|     // Navigate to products page\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[10/92]⎯\n\n FAIL  src/ui/components/generated/apps/web/__e2e__/order.spec.ts [ src/ui/components/generated/apps/web/__e2e__/order.spec.ts ]\nError: Playwright Test did not expect test.describe() to be called here.\nMost common reasons include:\n- You are calling test.describe() in a configuration file.\n- You are calling test.describe() in a file that is imported by the configuration file.\n- You have two different versions of @playwright/test. This usually happens\n  when one of the dependencies in your package.json depends on @playwright/test.\n ❯ TestTypeImpl._currentSuite node_modules/playwright/lib/common/testType.js:74:13\n ❯ TestTypeImpl._describe node_modules/playwright/lib/common/testType.js:114:24\n ❯ Function.describe node_modules/playwright/lib/transform/transform.js:275:12\n ❯ src/ui/components/generated/apps/web/__e2e__/order.spec.ts:3:6\n      1| import {test, expect} from '@playwright/test';\n      2| \n      3| test.describe('Order Management', () => {\n       |      ^\n      4|   test.beforeEach(async ({page}) => {\n      5|     // Navigate to orders page\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[11/92]⎯\n\n FAIL  src/ui/components/generated/apps/web/__e2e__/product.spec.ts [ src/ui/components/generated/apps/web/__e2e__/product.spec.ts ]\nError: Playwright Test did not expect test.describe() to be called here.\nMost common reasons include:\n- You are calling test.describe() in a configuration file.\n- You are calling test.describe() in a file that is imported by the configuration file.\n- You have two different versions of @playwright/test. This usually happens\n  when one of the dependencies in your package.json depends on @playwright/test.\n ❯ TestTypeImpl._currentSuite node_modules/playwright/lib/common/testType.js:74:13\n ❯ TestTypeImpl._describe node_modules/playwright/lib/common/testType.js:114:24\n ❯ Function.describe node_modules/playwright/lib/transform/transform.js:275:12\n ❯ src/ui/components/generated/apps/web/__e2e__/product.spec.ts:3:6\n      1| import {test, expect} from '@playwright/test';\n      2| \n      3| test.describe('Product Management', () => {\n       |      ^\n      4|   test.beforeEach(async ({page}) => {\n      5|     // Navigate to products page\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[12/92]⎯\n\n FAIL  examples/inventory/src/ui/components/generated/apps/web/__e2e__/customer.spec.ts [ examples/inventory/src/ui/components/generated/apps/web/__e2e__/customer.spec.ts ]\nError: Playwright Test did not expect test.describe() to be called here.\nMost common reasons include:\n- You are calling test.describe() in a configuration file.\n- You are calling test.describe() in a file that is imported by the configuration file.\n- You have two different versions of @playwright/test. This usually happens\n  when one of the dependencies in your package.json depends on @playwright/test.\n ❯ TestTypeImpl._currentSuite node_modules/playwright/lib/common/testType.js:74:13\n ❯ TestTypeImpl._describe node_modules/playwright/lib/common/testType.js:114:24\n ❯ Function.describe node_modules/playwright/lib/transform/transform.js:275:12\n ❯ examples/inventory/src/ui/components/generated/apps/web/__e2e__/customer.spec.ts:3:6\n      1| import {test, expect} from '@playwright/test';\n      2| \n      3| test.describe('Customer Management', () => {\n       |      ^\n      4|   test.beforeEach(async ({page}) => {\n      5|     // Navigate to customers page\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[13/92]⎯\n\n FAIL  examples/inventory/src/ui/components/generated/apps/web/__e2e__/order.spec.ts [ examples/inventory/src/ui/components/generated/apps/web/__e2e__/order.spec.ts ]\nError: Playwright Test did not expect test.describe() to be called here.\nMost common reasons include:\n- You are calling test.describe() in a configuration file.\n- You are calling test.describe() in a file that is imported by the configuration file.\n- You have two different versions of @playwright/test. This usually happens\n  when one of the dependencies in your package.json depends on @playwright/test.\n ❯ TestTypeImpl._currentSuite node_modules/playwright/lib/common/testType.js:74:13\n ❯ TestTypeImpl._describe node_modules/playwright/lib/common/testType.js:114:24\n ❯ Function.describe node_modules/playwright/lib/transform/transform.js:275:12\n ❯ examples/inventory/src/ui/components/generated/apps/web/__e2e__/order.spec.ts:3:6\n      1| import {test, expect} from '@playwright/test';\n      2| \n      3| test.describe('Order Management', () => {\n       |      ^\n      4|   test.beforeEach(async ({page}) => {\n      5|     // Navigate to orders page\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[14/92]⎯\n\n FAIL  examples/inventory/src/ui/components/generated/apps/web/__e2e__/product.spec.ts [ examples/inventory/src/ui/components/generated/apps/web/__e2e__/product.spec.ts ]\nError: Playwright Test did not expect test.describe() to be called here.\nMost common reasons include:\n- You are calling test.describe() in a configuration file.\n- You are calling test.describe() in a file that is imported by the configuration file.\n- You have two different versions of @playwright/test. This usually happens\n  when one of the dependencies in your package.json depends on @playwright/test.\n ❯ TestTypeImpl._currentSuite node_modules/playwright/lib/common/testType.js:74:13\n ❯ TestTypeImpl._describe node_modules/playwright/lib/common/testType.js:114:24\n ❯ Function.describe node_modules/playwright/lib/transform/transform.js:275:12\n ❯ examples/inventory/src/ui/components/generated/apps/web/__e2e__/product.spec.ts:3:6\n      1| import {test, expect} from '@playwright/test';\n      2| \n      3| test.describe('Product Management', () => {\n       |      ^\n      4|   test.beforeEach(async ({page}) => {\n      5|     // Navigate to products page\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[15/92]⎯\n\n⎯⎯⎯⎯⎯⎯ Failed Tests 69 ⎯⎯⎯⎯⎯⎯⎯\n\n FAIL  tests/cegis/auto-fix-engine.test.ts > AutoFixEngine > analyzeFailurePatterns > should identify common patterns in failures\nAssertionError: expected [] to include 'type_error'\n ❯ tests/cegis/auto-fix-engine.test.ts:71:26\n     69|       // Should group by categories\n     70|       const categories = patterns.map(p => p.categories[0]);\n     71|       expect(categories).toContain('type_error');\n       |                          ^\n     72|       expect(categories).toContain('test_failure');\n     73|       expect(categories).toContain('contract_violation');\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[16/92]⎯\n\n FAIL  tests/cegis/auto-fix-engine.test.ts > AutoFixEngine > integration > should work with different failure types\nAssertionError: expected 1 to be 4 // Object.is equality\n\n- Expected\n+ Received\n\n- 4\n+ 1\n\n ❯ tests/cegis/auto-fix-engine.test.ts:281:44\n    279| \n    280|       expect(result).toBeDefined();\n    281|       expect(result.summary.totalFailures).toBe(diverseFailures.length…\n       |                                            ^\n    282|     });\n    283| \n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[17/92]⎯\n\n FAIL  tests/cegis/cegis-cli.test.ts > CEGISCli > apply command > should handle missing input file gracefully\nAssertionError: expected \"error\" to be called with arguments: [ StringContaining{…} ]\n\nReceived: \n\n  1st error call:\n\n  Array [\n-   StringContaining \"Input file not found\",\n+   \"❌ Auto-fix failed:\",\n+   \"Input file not found: nonexistent.json\",\n  ]\n\n\nNumber of calls: 1\n\n ❯ tests/cegis/cegis-cli.test.ts:93:31\n     91| \n     92|       await expect(command.parseAsync(args)).rejects.toThrow();\n     93|       expect(consoleErrorSpy).toHaveBeenCalledWith(\n       |                               ^\n     94|         expect.stringContaining('Input file not found')\n     95|       );\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[18/92]⎯\n\n FAIL  tests/cegis/cegis-cli.test.ts > CEGISCli > error handling > should handle malformed JSON input\nAssertionError: expected \"error\" to be called with arguments: [ StringContaining{…} ]\n\nReceived: \n\n  1st error call:\n\n  Array [\n-   StringContaining \"Failed to parse input file\",\n+   \"❌ Auto-fix failed:\",\n+   \"Failed to parse input file: Expected property name or '}' in JSON at position 2\",\n  ]\n\n\nNumber of calls: 1\n\n ❯ tests/cegis/cegis-cli.test.ts:418:31\n    416| \n    417|       await expect(command.parseAsync(args)).rejects.toThrow();\n    418|       expect(consoleErrorSpy).toHaveBeenCalledWith(\n       |                               ^\n    419|         expect.stringContaining('Failed to parse input file')\n    420|       );\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[19/92]⎯\n\n FAIL  tests/cegis/cegis-cli.test.ts > CEGISCli > error handling > should handle invalid artifact in input\nAssertionError: expected \"log\" to be called with arguments: [ StringContaining{…} ]\n\nReceived: \n\n  1st log call:\n\n  Array [\n-   StringContaining \"Invalid artifact skipped\",\n+   \"🔧 Starting CEGIS auto-fix process...\",\n  ]\n\n  2nd log call:\n\n  Array [\n-   StringContaining \"Invalid artifact skipped\",\n+   \"ℹ️  No failure artifacts found.\",\n  ]\n\n\nNumber of calls: 2\n\n ❯ tests/cegis/cegis-cli.test.ts:435:29\n    433|       await command.parseAsync(args);\n    434| \n    435|       expect(consoleLogSpy).toHaveBeenCalledWith(\n       |                             ^\n    436|         expect.stringContaining('Invalid artifact skipped')\n    437|       );\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[20/92]⎯\n\n FAIL  tests/cegis/failure-artifact-schema.test.ts > FailureArtifact Schema > FailureArtifactFactory > should create from error\nZodError: [\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"string\",\n    \"received\": \"undefined\",\n    \"path\": [\n      \"context\",\n      \"timestamp\"\n    ],\n    \"message\": \"Required\"\n  }\n]\n ❯ Object.get error [as error] node_modules/zod/v3/types.js:39:31\n ❯ ZodObject.parse node_modules/zod/v3/types.js:114:22\n ❯ Function.create src/cegis/failure-artifact-schema.ts:159:34\n    157|     const id = base.id || crypto.randomUUID();\n    158|     \n    159|     return FailureArtifactSchema.parse({\n       |                                  ^\n    160|       id,\n    161|       title: base.title || 'Unknown Failure',\n ❯ Function.fromError src/cegis/failure-artifact-schema.ts:178:17\n ❯ tests/cegis/failure-artifact-schema.test.ts:172:47\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[21/92]⎯\n\n FAIL  tests/conformance/conformance-cli.test.ts > ConformanceCli > error handling > should handle invalid JSON in input file\nError: process.exit unexpectedly called with \"1\"\n ❯ ConformanceCli.handleVerifyCommand src/cli/conformance-cli.ts:182:15\n    180|     } catch (error) {\n    181|       console.error('❌ Verification failed:', error instanceof Error ?…\n    182|       process.exit(1);\n       |               ^\n    183|     }\n    184|   }\n ❯ Command.<anonymous> src/cli/conformance-cli.ts:48:20\n ❯ Command.listener [as _actionHandler] node_modules/commander/lib/command.js:542:17\n ❯ node_modules/commander/lib/command.js:1502:14\n ❯ Command._chainOrCall node_modules/commander/lib/command.js:1386:12\n ❯ Command._parseCommand node_modules/commander/lib/command.js:1501:27\n ❯ node_modules/commander/lib/command.js:1265:27\n ❯ Command._chainOrCall node_modules/commander/lib/command.js:1386:12\n ❯ Command._dispatchSubcommand node_modules/commander/lib/command.js:1261:25\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[22/92]⎯\n\n FAIL  tests/conformance/verification-engine.test.ts > ConformanceVerificationEngine > rule management > should add and retrieve rules\nAssertionError: expected [ { …(9) }, { …(9) }, { …(9) }, …(5) ] to have a length of 3 but got 8\n\n- Expected\n+ Received\n\n- 3\n+ 8\n\n ❯ tests/conformance/verification-engine.test.ts:102:21\n    100|       const rules = engine.getRules();\n    101|       \n    102|       expect(rules).toHaveLength(3); // 2 default + 1 added (from setu…\n       |                     ^\n    103|       expect(rules.some(r => r.id === rule.id)).toBe(true);\n    104|     });\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[23/92]⎯\n\n FAIL  tests/conformance/verification-engine.test.ts > ConformanceVerificationEngine > verification process > should handle verification errors gracefully\nAssertionError: expected 'fail' to be 'error' // Object.is equality\n\nExpected: \"error\"\nReceived: \"fail\"\n\n ❯ tests/conformance/verification-engine.test.ts:198:30\n    196|       const result = await engine.verify({}, context);\n    197| \n    198|       expect(result.overall).toBe('error');\n       |                              ^\n    199|       expect(result.results.some(r => r.status === 'error')).toBe(true…\n    200|     });\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[24/92]⎯\n\n FAIL  tests/conformance/verification-engine.test.ts > ConformanceVerificationEngine > metrics collection > should track verification metrics\nAssertionError: expected 1 to be greater than 1\n ❯ tests/conformance/verification-engine.test.ts:256:56\n    254| \n    255|       const updatedMetrics = engine.getMetrics();\n    256|       expect(updatedMetrics.counts.totalVerifications).toBeGreaterThan(\n       |                                                        ^\n    257|         initialMetrics.counts.totalVerifications\n    258|       );\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[25/92]⎯\n\n FAIL  tests/conformance/verification-engine.test.ts > ConformanceVerificationEngine > metrics collection > should track violation metrics\nAssertionError: expected 1 to be greater than 1\n ❯ tests/conformance/verification-engine.test.ts:271:53\n    269| \n    270|       const updatedMetrics = engine.getMetrics();\n    271|       expect(updatedMetrics.counts.totalViolations).toBeGreaterThan(\n       |                                                     ^\n    272|         initialMetrics.counts.totalViolations\n    273|       );\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[26/92]⎯\n\n FAIL  tests/conformance/verification-engine.test.ts > ConformanceVerificationEngine > error handling > should handle invalid rule data gracefully\nAssertionError: promise resolved \"undefined\" instead of rejecting\n\n- Expected: \n[Error: rejected promise]\n\n+ Received: \nundefined\n\n ❯ tests/conformance/verification-engine.test.ts:342:54\n    340|       delete (invalidRule as any).id;\n    341| \n    342|       await expect(engine.addRule(invalidRule as any)).rejects.toThrow…\n       |                                                      ^\n    343|     });\n    344|   });\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[27/92]⎯\n\n FAIL  tests/integration/integration-cli.test.ts > IntegrationTestingCli > discover command > should discover all resource types\nError: process.exit unexpectedly called with \"1\"\n ❯ IntegrationTestingCli.handleDiscoverCommand src/cli/integration-cli.ts:422:15\n    420|     } catch (error) {\n    421|       console.error('❌ Discovery failed:', error instanceof Error ? er…\n    422|       process.exit(1);\n       |               ^\n    423|     }\n    424|   }\n ❯ Command.<anonymous> src/cli/integration-cli.ts:191:9\n ❯ Command.parseAsync node_modules/commander/lib/command.js:1092:5\n ❯ tests/integration/integration-cli.test.ts:123:7\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[28/92]⎯\n\n FAIL  tests/integration/integration-cli.test.ts > IntegrationTestingCli > list command > should handle unknown resource type\nError: process.exit unexpectedly called with \"1\"\n ❯ IntegrationTestingCli.handleListCommand src/cli/integration-cli.ts:462:17\n    460|       default:\n    461|         console.error(`Unknown resource type: ${options.type}`);\n    462|         process.exit(1);\n       |                 ^\n    463|     }\n    464|   }\n ❯ Command.<anonymous> src/cli/integration-cli.ts:200:20\n ❯ Command.listener [as _actionHandler] node_modules/commander/lib/command.js:542:17\n ❯ node_modules/commander/lib/command.js:1502:14\n ❯ Command._chainOrCall node_modules/commander/lib/command.js:1386:12\n ❯ Command._parseCommand node_modules/commander/lib/command.js:1501:27\n ❯ node_modules/commander/lib/command.js:1265:27\n ❯ Command._chainOrCall node_modules/commander/lib/command.js:1386:12\n ❯ Command._dispatchSubcommand node_modules/commander/lib/command.js:1261:25\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[29/92]⎯\n\n FAIL  tests/integration/integration-cli.test.ts > IntegrationTestingCli > generate command > should handle unknown generation type\n FAIL  tests/integration/integration-cli.test.ts > IntegrationTestingCli > error handling > should validate command options\nError: process.exit unexpectedly called with \"1\"\n ❯ IntegrationTestingCli.handleGenerateCommand src/cli/integration-cli.ts:501:15\n    499|     } catch (error) {\n    500|       console.error('❌ Generation failed:', error instanceof Error ? e…\n    501|       process.exit(1);\n       |               ^\n    502|     }\n    503|   }\n ❯ Command.<anonymous> src/cli/integration-cli.ts:212:20\n ❯ Command.listener [as _actionHandler] node_modules/commander/lib/command.js:542:17\n ❯ node_modules/commander/lib/command.js:1502:14\n ❯ Command._chainOrCall node_modules/commander/lib/command.js:1386:12\n ❯ Command._parseCommand node_modules/commander/lib/command.js:1501:27\n ❯ node_modules/commander/lib/command.js:1265:27\n ❯ Command._chainOrCall node_modules/commander/lib/command.js:1386:12\n ❯ Command._dispatchSubcommand node_modules/commander/lib/command.js:1261:25\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[30/92]⎯\n\n FAIL  tests/integration/integration-cli.test.ts > IntegrationTestingCli > run command > should handle parallel execution options\nError: process.exit unexpectedly called with \"1\"\n ❯ IntegrationTestingCli.handleRunCommand src/cli/integration-cli.ts:367:15\n    365|     } catch (error) {\n    366|       console.error('❌ Integration test execution failed:', error inst…\n    367|       process.exit(1);\n       |               ^\n    368|     }\n    369|   }\n ❯ Command.<anonymous> src/cli/integration-cli.ts:179:9\n ❯ Command.parseAsync node_modules/commander/lib/command.js:1092:5\n ❯ tests/integration/integration-cli.test.ts:516:7\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[31/92]⎯\n\n FAIL  tests/integration/test-orchestrator.test.ts > IntegrationTestOrchestrator > test discovery > should discover tests, suites, and fixtures\nReferenceError: createMockTestCase is not defined\n ❯ MockTestDiscovery.discoverTests tests/integration/test-orchestrator.test.ts:24:5\n     22| class MockTestDiscovery implements TestDiscovery {\n     23|   async discoverTests(): Promise<TestCase[]> {\n     24|     return [\n       |     ^\n     25|       createMockTestCase('test-1', 'Sample E2E Test', 'e2e'),\n     26|       createMockTestCase('test-2', 'Sample API Test', 'integration')\n ❯ IntegrationTestOrchestrator.discoverTests src/integration/test-orchestrator.ts:77:17\n ❯ tests/integration/test-orchestrator.test.ts:122:45\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[32/92]⎯\n\n FAIL  tests/integration/test-orchestrator.test.ts > IntegrationTestOrchestrator > test discovery > should emit discovery events\nReferenceError: createMockTestCase is not defined\n ❯ MockTestDiscovery.discoverTests tests/integration/test-orchestrator.test.ts:24:5\n     22| class MockTestDiscovery implements TestDiscovery {\n     23|   async discoverTests(): Promise<TestCase[]> {\n     24|     return [\n       |     ^\n     25|       createMockTestCase('test-1', 'Sample E2E Test', 'e2e'),\n     26|       createMockTestCase('test-2', 'Sample API Test', 'integration')\n ❯ IntegrationTestOrchestrator.discoverTests src/integration/test-orchestrator.ts:77:17\n ❯ tests/integration/test-orchestrator.test.ts:140:26\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[33/92]⎯\n\n FAIL  tests/integration/test-orchestrator.test.ts > IntegrationTestOrchestrator > test discovery > should cache discovered items\nReferenceError: createMockTestCase is not defined\n ❯ MockTestDiscovery.discoverTests tests/integration/test-orchestrator.test.ts:24:5\n     22| class MockTestDiscovery implements TestDiscovery {\n     23|   async discoverTests(): Promise<TestCase[]> {\n     24|     return [\n       |     ^\n     25|       createMockTestCase('test-1', 'Sample E2E Test', 'e2e'),\n     26|       createMockTestCase('test-2', 'Sample API Test', 'integration')\n ❯ IntegrationTestOrchestrator.discoverTests src/integration/test-orchestrator.ts:77:17\n ❯ tests/integration/test-orchestrator.test.ts:151:26\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[34/92]⎯\n\n FAIL  tests/integration/test-orchestrator.test.ts > IntegrationTestOrchestrator > test execution > should execute a single test\n FAIL  tests/integration/test-orchestrator.test.ts > IntegrationTestOrchestrator > test execution > should handle test not found\n FAIL  tests/integration/test-orchestrator.test.ts > IntegrationTestOrchestrator > test execution > should handle environment not found\nReferenceError: createMockTestCase is not defined\n ❯ MockTestDiscovery.discoverTests tests/integration/test-orchestrator.test.ts:24:5\n     22| class MockTestDiscovery implements TestDiscovery {\n     23|   async discoverTests(): Promise<TestCase[]> {\n     24|     return [\n       |     ^\n     25|       createMockTestCase('test-1', 'Sample E2E Test', 'e2e'),\n     26|       createMockTestCase('test-2', 'Sample API Test', 'integration')\n ❯ IntegrationTestOrchestrator.discoverTests src/integration/test-orchestrator.ts:77:17\n ❯ tests/integration/test-orchestrator.test.ts:164:26\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[35/92]⎯\n\n FAIL  tests/integration/test-orchestrator.test.ts > IntegrationTestOrchestrator > suite execution > should execute a test suite\n FAIL  tests/integration/test-orchestrator.test.ts > IntegrationTestOrchestrator > suite execution > should handle suite not found\n FAIL  tests/integration/test-orchestrator.test.ts > IntegrationTestOrchestrator > suite execution > should prevent concurrent execution of same suite\nReferenceError: createMockTestCase is not defined\n ❯ MockTestDiscovery.discoverTests tests/integration/test-orchestrator.test.ts:24:5\n     22| class MockTestDiscovery implements TestDiscovery {\n     23|   async discoverTests(): Promise<TestCase[]> {\n     24|     return [\n       |     ^\n     25|       createMockTestCase('test-1', 'Sample E2E Test', 'e2e'),\n     26|       createMockTestCase('test-2', 'Sample API Test', 'integration')\n ❯ IntegrationTestOrchestrator.discoverTests src/integration/test-orchestrator.ts:77:17\n ❯ tests/integration/test-orchestrator.test.ts:218:26\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[36/92]⎯\n\n FAIL  tests/integration/test-orchestrator.test.ts > IntegrationTestOrchestrator > filtering > should filter tests by category\n FAIL  tests/integration/test-orchestrator.test.ts > IntegrationTestOrchestrator > filtering > should filter tests by tags\n FAIL  tests/integration/test-orchestrator.test.ts > IntegrationTestOrchestrator > filtering > should exclude specific tests\nReferenceError: createMockTestCase is not defined\n ❯ MockTestDiscovery.discoverTests tests/integration/test-orchestrator.test.ts:24:5\n     22| class MockTestDiscovery implements TestDiscovery {\n     23|   async discoverTests(): Promise<TestCase[]> {\n     24|     return [\n       |     ^\n     25|       createMockTestCase('test-1', 'Sample E2E Test', 'e2e'),\n     26|       createMockTestCase('test-2', 'Sample API Test', 'integration')\n ❯ IntegrationTestOrchestrator.discoverTests src/integration/test-orchestrator.ts:77:17\n ❯ tests/integration/test-orchestrator.test.ts:279:26\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[37/92]⎯\n\n FAIL  tests/integration/test-orchestrator.test.ts > IntegrationTestOrchestrator > execution status > should report running status during execution\nReferenceError: createMockTestCase is not defined\n ❯ MockTestDiscovery.discoverTests tests/integration/test-orchestrator.test.ts:24:5\n     22| class MockTestDiscovery implements TestDiscovery {\n     23|   async discoverTests(): Promise<TestCase[]> {\n     24|     return [\n       |     ^\n     25|       createMockTestCase('test-1', 'Sample E2E Test', 'e2e'),\n     26|       createMockTestCase('test-2', 'Sample API Test', 'integration')\n ❯ IntegrationTestOrchestrator.discoverTests src/integration/test-orchestrator.ts:77:17\n ❯ tests/integration/test-orchestrator.test.ts:338:26\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[38/92]⎯\n\n FAIL  tests/resilience/backoff-strategies.test.ts > BackoffStrategy > Retry Conditions > should respect custom retry condition\nAssertionError: expected true to be false // Object.is equality\n\n- Expected\n+ Received\n\n- false\n+ true\n\n ❯ tests/resilience/backoff-strategies.test.ts:154:30\n    152|       const result = await promise;\n    153| \n    154|       expect(result.success).toBe(false);\n       |                              ^\n    155|       expect(result.attempts).toBe(1);\n    156|       expect(operation).toHaveBeenCalledTimes(1);\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[39/92]⎯\n\n FAIL  tests/resilience/backoff-strategies.test.ts > Integration Tests > should handle complex failure scenarios\nAssertionError: expected 'CLOSED' to be 'OPEN' // Object.is equality\n\nExpected: \"OPEN\"\nReceived: \"CLOSED\"\n\n ❯ tests/resilience/backoff-strategies.test.ts:658:41\n    656|     // Verify circuit is open\n    657|     const stats = httpClient.getHealthStats();\n    658|     expect(stats.circuitBreaker?.state).toBe(CircuitState.OPEN);\n       |                                         ^\n    659| \n    660|     // Wait for recovery period\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[40/92]⎯\n\n FAIL  tests/resilience/bulkhead-isolation.test.ts > Bulkhead > Statistics > should assess health correctly\nAssertionError: expected false to be true // Object.is equality\n\n- Expected\n+ Received\n\n- true\n+ false\n\n ❯ tests/resilience/bulkhead-isolation.test.ts:154:36\n    152| \n    153|     it('should assess health correctly', async () => {\n    154|       expect(bulkhead.isHealthy()).toBe(true);\n       |                                    ^\n    155| \n    156|       // Fill most of capacity to make unhealthy\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[41/92]⎯\n\n FAIL  tests/resilience/bulkhead-isolation.test.ts > Bulkhead > Reset Functionality > should reset statistics and cancel queued operations\nAssertionError: expected 2 to be +0 // Object.is equality\n\n- Expected\n+ Received\n\n- 0\n+ 2\n\n ❯ tests/resilience/bulkhead-isolation.test.ts:186:28\n    184| \n    185|       const stats = bulkhead.getStats();\n    186|       expect(stats.active).toBe(0); // Active operations continue but …\n       |                            ^\n    187|       expect(stats.queued).toBe(0);\n    188|       expect(stats.totalExecuted).toBe(0);\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[42/92]⎯\n\n FAIL  tests/resilience/bulkhead-isolation.test.ts > BulkheadManager > System Health > should provide system health overview\nAssertionError: expected +0 to be 2 // Object.is equality\n\n- Expected\n+ Received\n\n- 2\n+ 0\n\n ❯ tests/resilience/bulkhead-isolation.test.ts:325:39\n    323|       \n    324|       expect(health.totalBulkheads).toBe(2);\n    325|       expect(health.healthyBulkheads).toBe(2);\n       |                                       ^\n    326|       expect(health.healthy).toBe(true);\n    327|       expect(health.totalActive).toBe(0);\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[43/92]⎯\n\n FAIL  tests/resilience/integration.test.ts > Resilience System Integration > Combined Patterns > should handle a complete resilience scenario\nAssertionError: expected false to be true // Object.is equality\n\n- Expected\n+ Received\n\n- true\n+ false\n\n ❯ tests/resilience/integration.test.ts:71:30\n     69|       const result = await backoffStrategy.executeWithRetry(resilientO…\n     70| \n     71|       expect(result.success).toBe(true);\n       |                              ^\n     72|       expect(result.result).toBe('Success 1');\n     73|       expect(operationCalls).toBe(1);\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[44/92]⎯\n\n FAIL  tests/resilience/integration.test.ts > Resilience System Integration > Combined Patterns > should demonstrate rate limiting with bulkhead isolation\nError: Queue full for bulkhead rate-limited-bulkhead\n ❯ Bulkhead.handleRejection src/resilience/bulkhead-isolation.ts:159:12\n    157|     this.rejectionReasons[reason]++;\n    158|     this.options.onReject?.(reason);\n    159|     reject(new Error(message));\n       |            ^\n    160|   }\n    161| \n ❯ src/resilience/bulkhead-isolation.ts:66:14\n ❯ Bulkhead.execute src/resilience/bulkhead-isolation.ts:57:12\n ❯ tests/resilience/integration.test.ts:145:40\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[45/92]⎯\n\n FAIL  tests/resilience/integration.test.ts > Resilience System Integration > Error Recovery Scenarios > should handle timeout recovery\nAssertionError: expected [Function] to throw error including 'timed out' but got 'Cannot access \\'timeoutPromise\\' befo…'\n\nExpected: \"timed out\"\nReceived: \"Cannot access 'timeoutPromise' before initialization\"\n\n ❯ tests/resilience/integration.test.ts:207:7\n    205| \n    206|       // First call should timeout\n    207|       await expect(timeoutWrapper.execute(adaptiveOperation))\n       |       ^\n    208|         .rejects.toThrow('timed out');\n    209| \n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[46/92]⎯\n\n FAIL  tests/resilience/integration.test.ts > Resilience System Integration > Performance and Monitoring > should track comprehensive metrics across all components\nAssertionError: expected 6 to be 8 // Object.is equality\n\n- Expected\n+ Received\n\n- 8\n+ 6\n\n ❯ tests/resilience/integration.test.ts:269:52\n    267| \n    268|       expect(cbStats.totalRequests).toBeGreaterThan(0);\n    269|       expect(cbStats.failures + cbStats.successes).toBe(cbStats.totalR…\n       |                                                    ^\n    270|       expect(bulkheadStats.totalExecuted + bulkheadStats.totalRejected…\n    271|       \n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[47/92]⎯\n\n FAIL  tests/resilience/timeout-patterns.test.ts > TimeoutWrapper > Basic Timeout > should timeout long-running operations\nAssertionError: expected error to be instance of TimeoutError\n\n- Expected: \n[Function TimeoutError]\n\n+ Received: \n[ReferenceError: Cannot access 'timeoutPromise' before initialization]\n\n ❯ tests/resilience/timeout-patterns.test.ts:49:7\n     47|       vi.advanceTimersByTime(101);\n     48| \n     49|       await expect(promise).rejects.toThrow(TimeoutError);\n       |       ^\n     50|       await expect(promise).rejects.toThrow(\"Operation 'slow-operation…\n     51|     });\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[48/92]⎯\n\n FAIL  tests/resilience/timeout-patterns.test.ts > TimeoutWrapper > Basic Timeout > should call onTimeout callback\nAssertionError: expected error to be instance of TimeoutError\n\n- Expected: \n[Function TimeoutError]\n\n+ Received: \n[ReferenceError: Cannot access 'timeoutPromise' before initialization]\n\n ❯ tests/resilience/timeout-patterns.test.ts:67:7\n     65|       vi.advanceTimersByTime(101);\n     66| \n     67|       await expect(promise).rejects.toThrow(TimeoutError);\n       |       ^\n     68|       expect(onTimeout).toHaveBeenCalledWith(100);\n     69|     });\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[49/92]⎯\n\n FAIL  tests/resilience/timeout-patterns.test.ts > TimeoutWrapper > Basic Timeout > should handle AbortController\nAssertionError: expected error to be instance of TimeoutError\n\n- Expected: \n[Function TimeoutError]\n\n+ Received: \n[ReferenceError: Cannot access 'timeoutPromise' before initialization]\n\n ❯ tests/resilience/timeout-patterns.test.ts:85:7\n     83|       vi.advanceTimersByTime(101);\n     84| \n     85|       await expect(promise).rejects.toThrow(TimeoutError);\n       |       ^\n     86|       expect(abortController.signal.aborted).toBe(true);\n     87|     });\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[50/92]⎯\n\n FAIL  tests/resilience/timeout-patterns.test.ts > AdaptiveTimeout > Basic Adaptation > should adapt timeout based on execution patterns\nReferenceError: Cannot access 'timeoutPromise' before initialization\n ❯ src/resilience/timeout-patterns.ts:59:8\n     57|       }, this.options.timeoutMs);\n     58|       // Attach timeout ID for cleanup\n     59|       (timeoutPromise as any).timeoutId = timeoutId;\n       |        ^\n     60|     });\n     61| \n ❯ TimeoutWrapper.execute src/resilience/timeout-patterns.ts:47:28\n ❯ AdaptiveTimeout.execute src/resilience/timeout-patterns.ts:135:43\n ❯ tests/resilience/timeout-patterns.test.ts:147:41\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[51/92]⎯\n\n FAIL  tests/resilience/timeout-patterns.test.ts > AdaptiveTimeout > Basic Adaptation > should increase timeout after timeouts occur\nAssertionError: expected error to be instance of TimeoutError\n\n- Expected: \n[Function TimeoutError]\n\n+ Received: \n[ReferenceError: Cannot access 'timeoutPromise' before initialization]\n\n ❯ tests/resilience/timeout-patterns.test.ts:170:7\n    168|       vi.advanceTimersByTime(501);\n    169| \n    170|       await expect(promise).rejects.toThrow(TimeoutError);\n       |       ^\n    171| \n    172|       const stats = adaptiveTimeout.getStats();\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[52/92]⎯\n\n FAIL  tests/resilience/timeout-patterns.test.ts > AdaptiveTimeout > Statistics > should track comprehensive statistics\nReferenceError: Cannot access 'timeoutPromise' before initialization\n ❯ src/resilience/timeout-patterns.ts:59:8\n     57|       }, this.options.timeoutMs);\n     58|       // Attach timeout ID for cleanup\n     59|       (timeoutPromise as any).timeoutId = timeoutId;\n       |        ^\n     60|     });\n     61| \n ❯ TimeoutWrapper.execute src/resilience/timeout-patterns.ts:47:28\n ❯ AdaptiveTimeout.execute src/resilience/timeout-patterns.ts:135:43\n ❯ tests/resilience/timeout-patterns.test.ts:187:41\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[53/92]⎯\n\n FAIL  tests/resilience/timeout-patterns.test.ts > AdaptiveTimeout > Statistics > should calculate timeout rate correctly\nAssertionError: expected error to be instance of TimeoutError\n\n- Expected: \n[Function TimeoutError]\n\n+ Received: \n[ReferenceError: Cannot access 'timeoutPromise' before initialization]\n\n ❯ tests/resilience/timeout-patterns.test.ts:212:7\n    210|       const promise = adaptiveTimeout.execute(slowOperation);\n    211|       vi.advanceTimersByTime(501);\n    212|       await expect(promise).rejects.toThrow(TimeoutError);\n       |       ^\n    213| \n    214|       const stats = adaptiveTimeout.getStats();\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[54/92]⎯\n\n FAIL  tests/resilience/timeout-patterns.test.ts > AdaptiveTimeout > Manual Control > should reset to base timeout\nAssertionError: expected error to be instance of TimeoutError\n\n- Expected: \n[Function TimeoutError]\n\n+ Received: \n[ReferenceError: Cannot access 'timeoutPromise' before initialization]\n\n ❯ tests/resilience/timeout-patterns.test.ts:240:7\n    238|       const promise = adaptiveTimeout.execute(slowOperation);\n    239|       vi.advanceTimersByTime(501);\n    240|       await expect(promise).rejects.toThrow(TimeoutError);\n       |       ^\n    241| \n    242|       expect(adaptiveTimeout.getCurrentTimeout()).toBeGreaterThan(500);\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[55/92]⎯\n\n FAIL  tests/utils/circuit-breaker.test.ts > CircuitBreaker > Basic Functionality > should start in CLOSED state\nTypeError: circuitBreaker.isHealthy is not a function\n ❯ tests/utils/circuit-breaker.test.ts:25:29\n     23|       expect(circuitBreaker.getState()).toBe(CircuitState.CLOSED);\n     24|       expect(circuitBreaker.getName()).toBe('test-breaker');\n     25|       expect(circuitBreaker.isHealthy()).toBe(true);\n       |                             ^\n     26|     });\n     27| \n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[56/92]⎯\n\n FAIL  tests/utils/circuit-breaker.test.ts > CircuitBreaker > Basic Functionality > should execute synchronous operations\nTypeError: circuitBreaker.executeSync is not a function\n ❯ tests/utils/circuit-breaker.test.ts:59:37\n     57|       const operation = vi.fn().mockReturnValue('sync success');\n     58|       \n     59|       const result = circuitBreaker.executeSync(operation);\n       |                                     ^\n     60|       \n     61|       expect(result).toBe('sync success');\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[57/92]⎯\n\n FAIL  tests/utils/circuit-breaker.test.ts > CircuitBreaker > Statistics and Monitoring > should determine health status correctly\nTypeError: circuitBreaker.isHealthy is not a function\n ❯ tests/utils/circuit-breaker.test.ts:219:29\n    217| \n    218|     it('should determine health status correctly', async () => {\n    219|       expect(circuitBreaker.isHealthy()).toBe(true);\n       |                             ^\n    220|       \n    221|       // Force circuit open\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[58/92]⎯\n\n FAIL  tests/utils/circuit-breaker.test.ts > CircuitBreaker > Health Report Generation > should generate comprehensive health report\nTypeError: circuitBreaker.generateHealthReport is not a function\n ❯ tests/utils/circuit-breaker.test.ts:240:37\n    238|       await expect(circuitBreaker.execute(failOp)).rejects.toThrow();\n    239|       \n    240|       const report = circuitBreaker.generateHealthReport();\n       |                                     ^\n    241|       \n    242|       expect(report.name).toBe('test-breaker');\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[59/92]⎯\n\n FAIL  tests/utils/circuit-breaker.test.ts > CircuitBreaker > Health Report Generation > should provide recommendations for unhealthy circuits\nTypeError: circuitBreaker.generateHealthReport is not a function\n ❯ tests/utils/circuit-breaker.test.ts:253:37\n    251|       circuitBreaker.forceOpen();\n    252|       \n    253|       const report = circuitBreaker.generateHealthReport();\n       |                                     ^\n    254|       \n    255|       expect(report.health).toBe('unhealthy');\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[60/92]⎯\n\n FAIL  tests/utils/circuit-breaker.test.ts > CircuitBreaker > Event Emission > should emit circuit opened event\nAssertionError: expected \"spy\" to be called with arguments: [ { name: 'test-breaker', …(3) } ]\n\nReceived: \n\n  1st spy call:\n\n  Array [\n    Object {\n      \"failureCount\": 3,\n      \"name\": \"test-breaker\",\n+     \"previousState\": \"CLOSED\",\n      \"threshold\": 3,\n      \"timeout\": 1000,\n    },\n  ]\n\n\nNumber of calls: 1\n\n ❯ tests/utils/circuit-breaker.test.ts:303:29\n    301|       }\n    302|       \n    303|       expect(openedHandler).toHaveBeenCalledWith({\n       |                             ^\n    304|         name: 'test-breaker',\n    305|         failureCount: 3,\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[61/92]⎯\n\n FAIL  tests/utils/circuit-breaker.test.ts > CircuitBreaker > Event Emission > should emit state change events\nAssertionError: expected \"spy\" to be called with arguments: [ ObjectContaining{…} ]\n\nReceived: \n\n\n\nNumber of calls: 0\n\n ❯ tests/utils/circuit-breaker.test.ts:328:34\n    326|       circuitBreaker.forceOpen();\n    327|       \n    328|       expect(stateChangeHandler).toHaveBeenCalledWith(\n       |                                  ^\n    329|         expect.objectContaining({\n    330|           name: 'test-breaker',\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[62/92]⎯\n\n FAIL  tests/utils/circuit-breaker.test.ts > CircuitBreaker > Error Type Filtering > should only trip on expected error types when specified\nAssertionError: expected 'OPEN' to be 'CLOSED' // Object.is equality\n\nExpected: \"CLOSED\"\nReceived: \"OPEN\"\n\n ❯ tests/utils/circuit-breaker.test.ts:385:43\n    383|       await expect(selectiveBreaker.execute(validationOp)).rejects.toT…\n    384|       \n    385|       expect(selectiveBreaker.getState()).toBe(CircuitState.CLOSED);\n       |                                           ^\n    386|       \n    387|       // Network errors should count and open circuit\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[63/92]⎯\n\n FAIL  tests/utils/circuit-breaker.test.ts > CircuitBreakerManager > Circuit Breaker Management > should create and retrieve circuit breakers\n FAIL  tests/utils/circuit-breaker.test.ts > CircuitBreakerManager > Circuit Breaker Management > should get all circuit breakers\n FAIL  tests/utils/circuit-breaker.test.ts > CircuitBreakerManager > Circuit Breaker Management > should remove circuit breakers\n FAIL  tests/utils/circuit-breaker.test.ts > CircuitBreakerManager > Circuit Breaker Management > should reset all circuit breakers\n FAIL  tests/utils/circuit-breaker.test.ts > CircuitBreakerManager > Global Statistics > should track global statistics\n FAIL  tests/utils/circuit-breaker.test.ts > CircuitBreakerManager > Health Reporting > should generate comprehensive health report\n FAIL  tests/utils/circuit-breaker.test.ts > CircuitBreakerManager > Health Reporting > should determine overall health correctly\n FAIL  tests/utils/circuit-breaker.test.ts > CircuitBreakerManager > Event Forwarding > should forward events from individual circuit breakers\nTypeError: CircuitBreakerManager is not a constructor\n ❯ tests/utils/circuit-breaker.test.ts:400:15\n    398| \n    399|   beforeEach(() => {\n    400|     manager = new CircuitBreakerManager();\n       |               ^\n    401|   });\n    402| \n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[64/92]⎯\n\n FAIL  tests/utils/circuit-breaker.test.ts > CircuitBreakerManager > Circuit Breaker Management > should create and retrieve circuit breakers\n FAIL  tests/utils/circuit-breaker.test.ts > CircuitBreakerManager > Circuit Breaker Management > should get all circuit breakers\n FAIL  tests/utils/circuit-breaker.test.ts > CircuitBreakerManager > Circuit Breaker Management > should remove circuit breakers\n FAIL  tests/utils/circuit-breaker.test.ts > CircuitBreakerManager > Circuit Breaker Management > should reset all circuit breakers\n FAIL  tests/utils/circuit-breaker.test.ts > CircuitBreakerManager > Global Statistics > should track global statistics\n FAIL  tests/utils/circuit-breaker.test.ts > CircuitBreakerManager > Health Reporting > should generate comprehensive health report\n FAIL  tests/utils/circuit-breaker.test.ts > CircuitBreakerManager > Health Reporting > should determine overall health correctly\n FAIL  tests/utils/circuit-breaker.test.ts > CircuitBreakerManager > Event Forwarding > should forward events from individual circuit breakers\nTypeError: Cannot read properties of undefined (reading 'removeAllListeners')\n ❯ tests/utils/circuit-breaker.test.ts:404:13\n    402| \n    403|   afterEach(() => {\n    404|     manager.removeAllListeners();\n       |             ^\n    405|   });\n    406| \n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[65/92]⎯\n\n FAIL  tests/utils/evidence-validator.test.ts > EvidenceValidator > validateClaim > should extract keywords correctly\n FAIL  tests/utils/evidence-validator.test.ts > EvidenceValidator > Confidence Calculation > should give higher confidence with diverse evidence types\n FAIL  tests/utils/evidence-validator.test.ts > EvidenceValidator > Integration Tests > should work with extended commands context\nError: Test timed out in 5000ms.\nIf this is a long-running test, pass a timeout value as the last argument or configure it globally with \"testTimeout\".\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[66/92]⎯\n\n FAIL  tests/utils/evidence-validator.test.ts > EvidenceValidator > validateSolution > should validate both claim and implementation\n FAIL  tests/utils/evidence-validator.test.ts > EvidenceValidator > Confidence Calculation > should calculate confidence within valid range\nError: Test timed out in 10000ms.\nIf this is a long-running test, pass a timeout value as the last argument or configure it globally with \"testTimeout\".\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[67/92]⎯\n\n FAIL  tests/utils/evidence-validator.test.ts > EvidenceValidator > Edge Cases > should handle very long claims\nError: Test timed out in 40000ms.\nIf this is a long-running test, pass a timeout value as the last argument or configure it globally with \"testTimeout\".\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[68/92]⎯\n\n\n⎯⎯⎯⎯ Unhandled Rejection ⎯⎯⎯⎯⎯\nError: HTTP 500: Internal Server Error\n ❯ ResilientHttpClient.executeHttpRequest src/resilience/backoff-strategies.ts:565:21\n    563| \n    564|     if (!response.ok) {\n    565|       const error = new Error(`HTTP ${response.status}: ${response.sta…\n       |                     ^\n    566|       (error as any).status = response.status;\n    567|       throw error;\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯\nSerialized Error: { status: 500 }\nThis error originated in \"tests/resilience/backoff-strategies.test.ts\" test file. It doesn't mean the error was thrown inside the file itself, but while it was running.\nThe latest test that might've caused the error is \"should open circuit breaker on repeated failures\". It might mean one of the following:\n- The error was thrown, while Vitest was running this test.\n- If the error occurred after the test had been completed, this was the last documented test before it was thrown.\n\n⎯⎯⎯⎯ Unhandled Rejection ⎯⎯⎯⎯⎯\nError: HTTP 500: Internal Server Error\n ❯ ResilientHttpClient.executeHttpRequest src/resilience/backoff-strategies.ts:565:21\n    563| \n    564|     if (!response.ok) {\n    565|       const error = new Error(`HTTP ${response.status}: ${response.sta…\n       |                     ^\n    566|       (error as any).status = response.status;\n    567|       throw error;\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯\nSerialized Error: { status: 500 }\nThis error originated in \"tests/resilience/backoff-strategies.test.ts\" test file. It doesn't mean the error was thrown inside the file itself, but while it was running.\nThe latest test that might've caused the error is \"should open circuit breaker on repeated failures\". It might mean one of the following:\n- The error was thrown, while Vitest was running this test.\n- If the error occurred after the test had been completed, this was the last documented test before it was thrown.\n\n⎯⎯⎯⎯ Unhandled Rejection ⎯⎯⎯⎯⎯\nError: Circuit breaker is OPEN for HTTP GET /api/failing. Next attempt in 1000ms\n ❯ CircuitBreaker.execute src/resilience/backoff-strategies.ts:248:15\n    246|         this.options.onStateChange?.(this.state);\n    247|       } else {\n    248|         throw new Error(`Circuit breaker is OPEN for ${operationName}.…\n       |               ^\n    249|       }\n    250|     }\n ❯ operation src/resilience/backoff-strategies.ts:525:36\n\nThis error originated in \"tests/resilience/backoff-strategies.test.ts\" test file. It doesn't mean the error was thrown inside the file itself, but while it was running.\nThe latest test that might've caused the error is \"should open circuit breaker on repeated failures\". It might mean one of the following:\n- The error was thrown, while Vitest was running this test.\n- If the error occurred after the test had been completed, this was the last documented test before it was thrown.\n\n",
      "duration": 134039,
      "memory": {
        "start": 4,
        "end": 5,
        "peak": 5,
        "delta": 0
      },
      "timestamp": "2025-08-20T00:36:53.782Z",
      "output": "\n> ae-framework@1.0.0 test:fast\n> vitest run --exclude \"tests/testing/intelligent-test-selection.test.ts\"\n\n\n RUN  v2.1.9 /home/claudecode/work/ae-framework\n\nstdout | tests/testing/visual-regression.test.ts > VisualRegressionTesting > generateVisualTests > should generate comprehensive visual test suite\n👁️  Visual test generation started: visual-req-1\n\nstdout | tests/testing/visual-regression.test.ts > VisualRegressionTesting > generateVisualTests > should generate component tests when includeComponents is true\n👁️  Visual test generation started: visual-req-1\n\nstdout | tests/testing/visual-regression.test.ts > VisualRegressionTesting > generateVisualTests > should generate page tests when includePages is true\n👁️  Visual test generation started: visual-req-1\n\nstdout | tests/testing/visual-regression.test.ts > VisualRegressionTesting > generateVisualTests > should respect config overrides\n👁️  Visual test generation started: visual-req-1\n\nstdout | tests/testing/visual-regression.test.t"
    },
    {
      "name": "ir-validation-performance",
      "description": "IR schema validation performance",
      "category": "validation",
      "success": false,
      "error": "Command failed: npm run ir:validate:project\nfile:///home/claudecode/work/ae-framework/scripts/ir-schema-validator.js:248\n    report += `**Rules Checked:** ${result.summary.totalRules}\\n`;\n                                                   ^\n\nTypeError: Cannot read properties of undefined (reading 'totalRules')\n    at IRSchemaValidator.generateReport (file:///home/claudecode/work/ae-framework/scripts/ir-schema-validator.js:248:52)\n    at IRSchemaValidator.validateProject (file:///home/claudecode/work/ae-framework/scripts/ir-schema-validator.js:317:28)\n    at file:///home/claudecode/work/ae-framework/scripts/ir-schema-validator.js:434:15\n    at ModuleJob.run (node:internal/modules/esm/module_job:263:25)\n    at async ModuleLoader.import (node:internal/modules/esm/loader:540:24)\n    at async asyncRunEntryPointWithESMLoader (node:internal/modules/run_main:117:5)\n\nNode.js v20.19.4\n",
      "duration": 232,
      "memory": {
        "start": 5,
        "end": 5,
        "peak": 5,
        "delta": 0
      },
      "timestamp": "2025-08-20T00:36:54.014Z",
      "output": "\n> ae-framework@1.0.0 ir:validate:project\n> node scripts/ir-schema-validator.js --project .\n\n🔍 Found 3 IR files to validate...\n📄 Validating: clean-sample-ir.json\n📄 Validating: invalid-sample-ir.json\n📄 Validating: sample-ir.json\n\n📊 Validation Summary:\n   Files validated: 3\n   Overall status: ❌ INVALID\n   Total errors: 6\n   Total warnings: 2\n"
    },
    {
      "name": "package-analysis-performance",
      "description": "Package quality analysis performance",
      "category": "analysis",
      "success": true,
      "error": null,
      "duration": 7205,
      "memory": {
        "start": 5,
        "end": 5,
        "peak": 5,
        "delta": 0
      },
      "timestamp": "2025-08-20T00:37:01.220Z",
      "output": "\n> ae-framework@1.0.0 package:quality\n> node scripts/package-quality-analyzer.js\n\n📦 Analyzing package quality...\n\n🔒 Analyzing security issues...\n\n📅 Analyzing outdated packages...\n\n📊 Package Quality Analysis Complete!\n\nOverall Quality: GOOD\nScore: 60/100\nErrors: 0\nWarnings: 2\nSecurity Issues: 46\nOutdated Packages: 0\n\n📄 Detailed report saved: ./package-quality-report.md\n"
    }
  ],
  "metadata": {
    "nodeVersion": "v20.19.4",
    "platform": "linux",
    "arch": "x64",
    "cpus": 16
  }
}