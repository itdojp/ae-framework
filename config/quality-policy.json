{
  "version": "1.0.0",
  "lastUpdated": "2025-01-19T09:40:00Z",
  "description": "Centralized Quality Policy for AE-Framework - Single Source of Truth for quality gates and standards",
  
  "environments": {
    "development": {
      "description": "Development environment with relaxed quality gates for rapid iteration",
      "enforcementLevel": "warning"
    },
    "testing": {
      "description": "Testing environment with standard quality gates",
      "enforcementLevel": "strict"
    },
    "staging": {
      "description": "Staging environment with production-level quality gates",
      "enforcementLevel": "strict"
    },
    "production": {
      "description": "Production environment with maximum quality enforcement",
      "enforcementLevel": "blocking"
    }
  },

  "qualityGates": {
    "accessibility": {
      "name": "Accessibility Compliance",
      "description": "WCAG 2.1 AA compliance validation",
      "category": "frontend",
      "enabled": true,
      "thresholds": {
        "development": {
          "minScore": 70,
          "maxViolations": 10,
          "blockOnCritical": false
        },
        "testing": {
          "minScore": 85,
          "maxViolations": 5,
          "blockOnCritical": true
        },
        "staging": {
          "minScore": 95,
          "maxViolations": 2,
          "blockOnCritical": true
        },
        "production": {
          "minScore": 98,
          "maxViolations": 0,
          "blockOnCritical": true
        }
      },
      "tools": [
        "@axe-core/cli",
        "lighthouse",
        "jest-axe"
      ],
      "commands": {
        "test": "npm run test:a11y",
        "report": "npm run test:a11y:report"
      }
    },

    "coverage": {
      "name": "Test Coverage",
      "description": "Code coverage requirements for unit and integration tests",
      "category": "testing",
      "enabled": true,
      "thresholds": {
        "development": {
          "lines": 60,
          "functions": 60,
          "branches": 50,
          "statements": 60,
          "blockOnFail": false
        },
        "testing": {
          "lines": 80,
          "functions": 80,
          "branches": 70,
          "statements": 80,
          "blockOnFail": true
        },
        "staging": {
          "lines": 90,
          "functions": 85,
          "branches": 80,
          "statements": 90,
          "blockOnFail": true
        },
        "production": {
          "lines": 95,
          "functions": 90,
          "branches": 85,
          "statements": 95,
          "blockOnFail": true
        }
      },
      "excludePatterns": [
        "dist/**",
        "node_modules/**",
        "coverage/**",
        "**/*.test.ts",
        "**/*.spec.ts",
        "**/test/**"
      ],
      "tools": [
        "vitest",
        "nyc",
        "@vitest/coverage-v8"
      ],
      "commands": {
        "test": "npm run coverage",
        "report": "echo 'Coverage report available in coverage/'"
      }
    },

    "lighthouse": {
      "name": "Lighthouse Performance",
      "description": "Web performance metrics using Lighthouse",
      "category": "performance",
      "enabled": true,
      "thresholds": {
        "development": {
          "performance": 60,
          "accessibility": 70,
          "bestPractices": 70,
          "seo": 60,
          "blockOnFail": false
        },
        "testing": {
          "performance": 80,
          "accessibility": 90,
          "bestPractices": 85,
          "seo": 80,
          "blockOnFail": true
        },
        "staging": {
          "performance": 90,
          "accessibility": 95,
          "bestPractices": 95,
          "seo": 90,
          "blockOnFail": true
        },
        "production": {
          "performance": 95,
          "accessibility": 98,
          "bestPractices": 98,
          "seo": 95,
          "blockOnFail": true
        }
      },
      "tools": [
        "@lhci/cli",
        "lighthouse"
      ],
      "commands": {
        "test": "lhci autorun || true",
        "report": "echo 'Lighthouse report available in .lighthouseci/'"
      }
    },

    "linting": {
      "name": "Code Linting",
      "description": "TypeScript and code style validation",
      "category": "code-quality",
      "enabled": true,
      "thresholds": {
        "development": {
          "maxErrors": 0,
          "maxWarnings": 0,
          "blockOnErrors": false
        },
        "testing": {
          "maxErrors": 5,
          "maxWarnings": 20,
          "blockOnErrors": true
        },
        "staging": {
          "maxErrors": 0,
          "maxWarnings": 10,
          "blockOnErrors": true
        },
        "production": {
          "maxErrors": 0,
          "maxWarnings": 0,
          "blockOnErrors": true
        }
      },
      "tools": [
        "eslint",
        "@typescript-eslint/eslint-plugin",
        "prettier"
      ],
      "commands": {
        "test": "node scripts/quality/check-lint-summary.mjs",
        "fix": "npm run lint -- --fix"
      }
    },

    "security": {
      "name": "Security Vulnerabilities",
      "description": "Security vulnerability scanning and dependency audit",
      "category": "security",
      "enabled": true,
      "thresholds": {
        "development": {
          "maxCritical": 5,
          "maxHigh": 10,
          "maxMedium": 20,
          "blockOnCritical": false
        },
        "testing": {
          "maxCritical": 2,
          "maxHigh": 5,
          "maxMedium": 15,
          "blockOnCritical": true
        },
        "staging": {
          "maxCritical": 0,
          "maxHigh": 2,
          "maxMedium": 10,
          "blockOnCritical": true
        },
        "production": {
          "maxCritical": 0,
          "maxHigh": 0,
          "maxMedium": 5,
          "blockOnCritical": true
        }
      },
      "tools": [
        "npm audit",
        "snyk",
        "semgrep"
      ],
      "commands": {
        "test": "npm run verify:security",
        "fix": "npm audit fix"
      }
    },

    "tdd": {
      "name": "Test-Driven Development",
      "description": "TDD cycle validation and test quality metrics",
      "category": "methodology",
      "enabled": true,
      "thresholds": {
        "development": {
          "minTestsPerFunction": 1,
          "maxCyclomaticComplexity": 15,
          "blockOnFail": false
        },
        "testing": {
          "minTestsPerFunction": 2,
          "maxCyclomaticComplexity": 10,
          "blockOnFail": true
        },
        "staging": {
          "minTestsPerFunction": 3,
          "maxCyclomaticComplexity": 8,
          "blockOnFail": true
        },
        "production": {
          "minTestsPerFunction": 3,
          "maxCyclomaticComplexity": 6,
          "blockOnFail": true
        }
      },
      "tools": [
        "vitest",
        "typescript",
        "eslint-plugin-complexity"
      ],
      "commands": {
        "test": "node scripts/quality/tdd-smoke-check.mjs",
        "guard": "npm run ae-framework -- guard"
      }
    },

    "performance": {
      "name": "Performance Benchmarks",
      "description": "API response time and throughput validation",
      "category": "performance",
      "enabled": true,
      "thresholds": {
        "development": {
          "maxResponseTime": 2000,
          "minThroughput": 100,
          "maxMemoryUsage": "512MB",
          "blockOnFail": false
        },
        "testing": {
          "maxResponseTime": 1000,
          "minThroughput": 500,
          "maxMemoryUsage": "256MB",
          "blockOnFail": true
        },
        "staging": {
          "maxResponseTime": 500,
          "minThroughput": 1000,
          "maxMemoryUsage": "128MB",
          "blockOnFail": true
        },
        "production": {
          "maxResponseTime": 200,
          "minThroughput": 2000,
          "maxMemoryUsage": "64MB",
          "blockOnFail": true
        }
      },
      "tools": [
        "autocannon",
        "clinic.js",
        "0x"
      ],
      "commands": {
        "test": "npm run test:benchmarks",
        "profile": "clinic doctor -- node dist/index.js"
      }
    },

    "api-validation": {
      "name": "API Contract Validation",
      "description": "OpenAPI specification compliance and schema validation",
      "category": "api",
      "enabled": true,
      "thresholds": {
        "development": {
          "schemaComplianceScore": 70,
          "maxContractViolations": 10,
          "blockOnFail": false
        },
        "testing": {
          "schemaComplianceScore": 90,
          "maxContractViolations": 5,
          "blockOnFail": true
        },
        "staging": {
          "schemaComplianceScore": 98,
          "maxContractViolations": 1,
          "blockOnFail": true
        },
        "production": {
          "schemaComplianceScore": 100,
          "maxContractViolations": 0,
          "blockOnFail": true
        }
      },
      "tools": [
        "openapi-validator",
        "zod",
        "ajv"
      ],
      "commands": {
        "test": "npm run validate:api",
        "generate": "npm run openapi:generate"
      }
    }
  },

  "compositeGates": {
    "minimal": {
      "description": "Minimal quality gates for rapid development",
      "gates": ["linting", "tdd"],
      "environments": ["development"]
    },
    "standard": {
      "description": "Standard quality gates for regular development",
      "gates": ["linting", "coverage", "security", "tdd"],
      "environments": ["testing"]
    },
    "comprehensive": {
      "description": "Comprehensive quality gates for production readiness",
      "gates": ["accessibility", "coverage", "lighthouse", "linting", "security", "tdd", "performance"],
      "environments": ["staging"]
    },
    "production": {
      "description": "Production-grade quality gates with maximum enforcement",
      "gates": ["accessibility", "coverage", "lighthouse", "linting", "security", "tdd", "performance", "api-validation"],
      "environments": ["production"]
    }
  },

  "integrations": {
    "ci": {
      "githubActions": {
        "enabled": true,
        "workflow": ".github/workflows/quality-gates.yml",
        "triggerOn": ["push", "pull_request"],
        "parallelExecution": true
      },
      "preCommitHooks": {
        "enabled": true,
        "hooks": ["linting", "tdd"],
        "blocking": false
      }
    },
    "monitoring": {
      "opentelemetry": {
        "enabled": true,
        "metricsPrefix": "quality_gates",
        "tracingEnabled": true
      },
      "dashboards": {
        "grafana": {
          "enabled": false,
          "url": "http://localhost:3000/dashboards/quality"
        }
      }
    }
  },

  "notifications": {
    "slack": {
      "enabled": false,
      "webhook": "${SLACK_WEBHOOK_URL}",
      "channels": {
        "failures": "#quality-alerts",
        "summary": "#dev-team"
      }
    },
    "email": {
      "enabled": false,
      "recipients": ["team@example.com"],
      "onFailure": true,
      "dailySummary": true
    }
  },

  "reporting": {
    "formats": ["json", "html", "junit"],
    "outputDirectory": "reports/quality-gates",
    "retention": {
      "days": 30,
      "maxReports": 100
    },
    "aggregation": {
      "enabled": true,
      "interval": "daily",
      "metrics": ["pass_rate", "avg_score", "trend_analysis"]
    }
  }
}